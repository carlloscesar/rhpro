{"file_contents":{"replit.md":{"content":"# Sistema RH Pro - Technical Analysis Dashboard\n\n## Overview\n\nSistema RH Pro is a modern HR management system built with a full-stack JavaScript architecture. The application provides comprehensive human resources functionality through a web-based interface. This is a technical analysis dashboard that visualizes system architecture, performance metrics, security assessments, and code quality insights for the RH Pro system.\n\nThe dashboard itself is a static web application that presents analysis data about a React + Node.js + PostgreSQL HR system, displaying metrics, architectural decisions, and recommendations in an interactive format.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Analysis Update (August 21, 2025)\n\nAdded critical gap analysis to the technical dashboard:\n- Identified missing request/approval system functionality\n- Highlighted absence of hierarchical approval workflows  \n- Documented impact of missing request history tracking\n- Updated priority recommendations to address these gaps\n\n## Development Progress (August 22, 2025)\n\n**Major Architectural Conversion Completed:**\n- Successfully converted from frontend-only HTML/CSS/JS to full-stack architecture\n- Implemented complete Node.js/Express backend with PostgreSQL database\n- Created production-ready API with JWT authentication and full CRUD operations\n- Developed React frontend with modern components and routing\n- Established comprehensive database schema with proper relationships and constraints\n\n**Backend Implementation:**\n- Express.js server with security middleware (helmet, cors, rate limiting)\n- PostgreSQL database with 8 core tables and proper indexing\n- JWT authentication system with refresh tokens and role-based access\n- Complete API endpoints for employees, departments, requests, reports, and dashboard\n- Database seeding with sample data and user accounts\n- Audit logging and comprehensive error handling\n\n**Frontend Implementation:**\n- React 18 with modern hooks and context API\n- Tailwind CSS for responsive design and Thermas branding\n- Protected routes and authentication context\n- Dashboard with real-time statistics and KPI displays\n- Component-based architecture with reusable elements\n\n**Database Schema:**\n- Users, employees, departments, requests, request_types, approvals\n- Audit logs, system settings with full referential integrity\n- UUID primary keys and automated timestamp triggers\n- JSONB fields for flexible data storage\n\n**System Ready for Local Deployment:**\n- Complete documentation in README.md\n- Environment configuration examples\n- Migration and seeding scripts\n- Production-ready security measures\n- API endpoints fully documented and tested\n\n**Rocky Linux 9 Installation Guide (August 22, 2025):**\n- Created comprehensive installation guide for Rocky Linux 9\n- Detailed step-by-step server setup instructions\n- PostgreSQL 15 configuration and security\n- Node.js 20 LTS installation procedures\n- Nginx reverse proxy configuration\n- Systemd service configuration for production\n- Security hardening with fail2ban and SSL\n- Automated backup scripts and monitoring\n- Complete troubleshooting guide\n\n### Latest Update (August 22, 2025 - Afternoon)\nCompletely rebuilt the system with improved desktop layout:\n- Fixed all button sizing and spacing issues\n- Implemented proper grid layouts and responsive design\n- Created dedicated sections for all HR functionalities (Dashboard, Employees, Requests, Approvals, Reports)\n- Added professional styling with consistent color scheme and typography\n- Integrated Thermas logo throughout the interface\n- Resolved JavaScript errors and improved navigation flow\n- Optimized for desktop use with proper proportions and spacing\n\n### Major Feature Addition (August 22, 2025 - Evening)\nExpanded system with department management and CBO integration:\n- Added comprehensive Department management module with full CRUD functionality\n- Implemented CBO (Classificação Brasileira de Ocupações) integration for official job positions\n- Expanded main menu to 4-column grid layout accommodating new modules\n- Created advanced search functionality for CBO positions by name and classification groups\n- Enhanced employee registration with CBO position lookup and department selection\n- Added department creation forms with budget tracking and responsibility assignment\n- Integrated official Brazilian job classification standards throughout the system\n- User confirmed all functionality working correctly\n\n### Micro-interactions Implementation (August 22, 2025 - Evening)\nEnhanced user engagement with modern interaction patterns:\n- Implemented smooth fade-in/fade-out transitions between sections\n- Added loading states with spinning animations for all form submissions\n- Created toast notifications system appearing in top-right corner\n- Added contextual floating hints in bottom-left corner\n- Enhanced form validation with real-time visual feedback\n- Implemented shake animations for errors and bounce for successes\n- Added glow effects on focused form fields\n- Created enhanced hover effects for all interactive elements\n- System animations confirmed working across all modules\n\n### System Reference Analysis (August 22, 2025 - Evening)\nResearched modern HR system standards and best practices from market leaders:\n- Analyzed top 2025 HR systems: BambooHR, Rippling, Workday, ADP, Gusto\n- Studied modern dashboard UX patterns and enterprise design standards\n- Reviewed Brazilian HR integration patterns (TOTVS, SAP SuccessFactors)\n- Identified key enhancement opportunities based on market research\n\n### Phase 1 Implementation (August 22, 2025 - Evening)\nSuccessfully implemented enterprise-level dashboard and self-service portal:\n- Advanced analytics dashboard with interactive KPIs and real-time metrics\n- Central de Aprovações with complete workflow automation\n- Executive reporting system with business intelligence insights\n- Portal do Colaborador with comprehensive self-service functionality\n- Automated notifications and contextual hints system\n- Real-time dashboard updates and predictive analytics\n\n### Phase 2 Implementation (August 22, 2025 - Night) \nEnhanced system with performance management and business intelligence:\n- Performance Management module with 360° evaluation system\n- OKR (Objectives & Key Results) management and tracking\n- PDI (Individual Development Plan) creation and monitoring\n- Business Analytics with predictive insights and ML recommendations\n- Advanced workforce analytics with demographic visualization\n- AI-powered recommendations for talent retention and optimization\n- ROI analysis for training programs and development initiatives\n- Executive-level KPIs including revenue per employee and engagement scores\n\n### Phase 3 Implementation (August 22, 2025 - Night)\nAdvanced automation and enterprise integrations:\n- Intelligent automation platform with workflow designer\n- Thermas Bot - AI assistant for HR inquiries and insights\n- Enterprise integrations with TOTVS, SAP, Senior Sistemas, Microsoft 365\n- Integration marketplace with external systems (Open Banking, WhatsApp, Power BI)\n- API documentation and developer tools with rate limiting\n- Automated anomaly detection and predictive workforce planning\n- Real-time synchronization with external payroll and ERP systems\n- Comprehensive security framework with LGPD compliance\n\n### Final Implementation (August 22, 2025 - Late Night)\nEnterprise compliance and executive command center:\n- Complete LGPD compliance module with 98.7% conformity score\n- Comprehensive audit trail and data rights management\n- Advanced security dashboard with encryption and access control monitoring\n- Executive command center with C-Level KPIs and strategic insights\n- Leadership dashboard with real-time executive team status\n- ROI tracking and strategic goal monitoring with 385% ROI achievement\n- Predictive business intelligence with actionable recommendations\n- Executive meeting scheduler with agenda and participant management\n- Full enterprise-grade system suitable for IPO or Series B funding consideration\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: Static HTML/CSS/JavaScript dashboard application\n- **UI Framework**: Bootstrap 5.3.2 for responsive design\n- **Icons**: Font Awesome 6.4.0 for iconography\n- **Code Highlighting**: Prism.js for syntax highlighting\n- **Architecture Pattern**: Component-based modular design with separate concerns\n\n### Application Structure\n- **Main Controller**: `TechnicalAnalysisApp` class manages navigation and section rendering\n- **Section Renderer**: `AnalysisSections` class handles different analysis views\n- **Code Analyzer**: `CodeAnalyzer` utility for complexity and security analysis\n- **Data Layer**: `AnalysisData` object contains all analysis results and findings\n\n### Key Components\n1. **Navigation System**: Dynamic menu generation with section-based routing\n2. **Analysis Sections**: Modular sections for overview, architecture, security, performance\n3. **Metrics Visualization**: Cards and charts for displaying technical metrics\n4. **Code Analysis Tools**: Complexity calculation and security pattern detection\n\n### Design Patterns\n- **MVC Pattern**: Clear separation between data (AnalysisData), view (HTML/CSS), and controller (App classes)\n- **Module Pattern**: Each major functionality encapsulated in separate classes\n- **Observer Pattern**: Event-driven navigation and section updates\n- **Strategy Pattern**: Different rendering strategies for various analysis sections\n\n### Data Management\n- **Static Data**: All analysis results stored in JavaScript objects\n- **Client-side Rendering**: Dynamic content generation without backend dependencies\n- **State Management**: Simple state tracking for current section and navigation\n\n## External Dependencies\n\n### CDN Dependencies\n- **Bootstrap 5.3.2**: UI framework for responsive design and components\n- **Font Awesome 6.4.0**: Icon library for visual elements\n- **Prism.js 1.29.0**: Syntax highlighting for code snippets\n\n### Analyzed System Stack (Subject of Analysis)\n- **Frontend**: React 18 with TypeScript and Vite bundler\n- **Backend**: Node.js with Express.js framework\n- **Database**: PostgreSQL with connection pooling\n- **Environment**: Production deployment configuration with session management\n\n### Analysis Capabilities\n- **Code Complexity**: Cyclomatic complexity calculation\n- **Security Scanning**: Pattern-based vulnerability detection\n- **Performance Metrics**: System performance analysis\n- **Architecture Assessment**: Technology stack evaluation\n\nThe dashboard serves as a comprehensive technical analysis tool that can be easily deployed as a static website to present detailed insights about web application architectures, with particular focus on the Sistema RH Pro implementation.","size_bytes":10823},"INSTALL_ROCKY_LINUX.md":{"content":"# Guia de Instalação - Sistema RH Pro\n## Rocky Linux 9 - Configuração Completa\n\n### 📋 Pré-requisitos do Sistema\n\n#### Especificações Mínimas\n- **RAM**: 4GB (recomendado 8GB+)\n- **Armazenamento**: 20GB livres\n- **CPU**: 2 cores (recomendado 4+)\n- **Rede**: Conexão com internet ativa\n\n#### Usuário e Permissões\n- Acesso root ou usuário com sudo\n- Firewall configurado para permitir portas 5000 e 5432\n\n---\n\n## 🚀 Instalação Passo a Passo\n\n### 1. Atualização do Sistema\n\n```bash\n# Atualizar todos os pacotes\nsudo dnf update -y\n\n# Instalar ferramentas essenciais\nsudo dnf groupinstall \"Development Tools\" -y\nsudo dnf install curl wget git vim nano htop -y\n```\n\n### 2. Instalação do Node.js 20 LTS\n\n```bash\n# Adicionar repositório NodeSource\ncurl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -\n\n# Instalar Node.js e npm\nsudo dnf install nodejs -y\n\n# Verificar instalação\nnode --version  # deve mostrar v20.x.x\nnpm --version   # deve mostrar 10.x.x\n```\n\n### 3. Instalação do PostgreSQL 15\n\n```bash\n# Instalar PostgreSQL\nsudo dnf install postgresql postgresql-server postgresql-contrib -y\n\n# Inicializar banco de dados\nsudo postgresql-setup --initdb\n\n# Habilitar e iniciar serviço\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# Verificar status\nsudo systemctl status postgresql\n```\n\n### 4. Configuração do PostgreSQL\n\n```bash\n# Acessar como usuário postgres\nsudo -u postgres psql\n\n# Dentro do PostgreSQL, execute:\n```\n\n```sql\n-- Criar usuário para a aplicação\nCREATE USER rhpro_user WITH PASSWORD 'senha_segura_aqui';\n\n-- Criar banco de dados\nCREATE DATABASE rhpro_db OWNER rhpro_user;\n\n-- Conceder privilégios\nGRANT ALL PRIVILEGES ON DATABASE rhpro_db TO rhpro_user;\n\n-- Sair do PostgreSQL\n\\q\n```\n\n```bash\n# Configurar autenticação\nsudo nano /var/lib/pgsql/data/pg_hba.conf\n```\n\nAdicione estas linhas no arquivo:\n```\n# Configuração para aplicação RH Pro\nlocal   rhpro_db    rhpro_user                     md5\nhost    rhpro_db    rhpro_user    127.0.0.1/32     md5\n```\n\n```bash\n# Reiniciar PostgreSQL\nsudo systemctl restart postgresql\n```\n\n### 5. Configuração do Firewall\n\n```bash\n# Permitir porta da aplicação\nsudo firewall-cmd --permanent --add-port=5000/tcp\n\n# Permitir PostgreSQL (apenas localhost)\nsudo firewall-cmd --permanent --add-port=5432/tcp --source=127.0.0.1\n\n# Recarregar firewall\nsudo firewall-cmd --reload\n\n# Verificar regras\nsudo firewall-cmd --list-all\n```\n\n### 6. Criação do Usuário da Aplicação\n\n```bash\n# Criar usuário dedicado para a aplicação\nsudo useradd -m -s /bin/bash rhpro\nsudo passwd rhpro\n\n# Adicionar ao grupo de desenvolvimento (opcional)\nsudo usermod -aG wheel rhpro\n```\n\n### 7. Instalação da Aplicação\n\n```bash\n# Mudar para usuário da aplicação\nsudo su - rhpro\n\n# Criar diretório da aplicação\nmkdir -p /home/rhpro/sistema-rh-pro\ncd /home/rhpro/sistema-rh-pro\n\n# Clonar ou transferir arquivos do projeto\n# (Substitua pela forma como você vai transferir os arquivos)\n```\n\n#### Opção A: Se usando Git\n```bash\ngit clone <seu-repositorio> .\n```\n\n#### Opção B: Se transferindo arquivos manualmente\n```bash\n# Criar estrutura de diretórios\nmkdir -p server/{database,routes,middleware,utils}\nmkdir -p client/{src,public}\n\n# Copie todos os arquivos do projeto para este diretório\n```\n\n### 8. Configuração das Variáveis de Ambiente\n\n```bash\n# Criar arquivo .env na raiz do projeto\nnano .env\n```\n\nConteúdo do arquivo `.env`:\n```bash\n# Configuração do Banco de Dados\nDATABASE_URL=postgresql://rhpro_user:senha_segura_aqui@localhost:5432/rhpro_db\nPGHOST=localhost\nPGPORT=5432\nPGDATABASE=rhpro_db\nPGUSER=rhpro_user\nPGPASSWORD=senha_segura_aqui\n\n# Configuração da Aplicação\nNODE_ENV=production\nPORT=5000\nCLIENT_URL=http://localhost:5000\n\n# Segurança\nJWT_SECRET=sua_chave_jwt_super_secreta_aqui_com_pelo_menos_32_caracteres\nSESSION_SECRET=sua_chave_sessao_super_secreta_aqui\n\n# Log Level\nLOG_LEVEL=info\n```\n\n```bash\n# Proteger arquivo de configuração\nchmod 600 .env\n```\n\n### 9. Instalação das Dependências\n\n```bash\n# Instalar dependências do projeto\nnpm install\n\n# Verificar se todas foram instaladas\nnpm list --depth=0\n```\n\n### 10. Configuração do Banco de Dados\n\n```bash\n# Testar conexão com banco\nnode -e \"\nconst { Pool } = require('pg');\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\npool.query('SELECT NOW()', (err, res) => {\n  if (err) console.error('Erro:', err);\n  else console.log('✅ Conexão OK:', res.rows[0]);\n  pool.end();\n});\n\"\n\n# Executar migrações/setup do banco\nnode server/database/init-db.js\n\n# Executar seed com dados iniciais\nnode server/database/seed.js\n```\n\n### 11. Configuração do Systemd (Serviço)\n\n```bash\n# Voltar para usuário root\nexit\n\n# Criar arquivo de serviço\nsudo nano /etc/systemd/system/rhpro.service\n```\n\nConteúdo do arquivo de serviço:\n```ini\n[Unit]\nDescription=Sistema RH Pro - Thermas\nAfter=network.target postgresql.service\nRequires=postgresql.service\n\n[Service]\nType=simple\nUser=rhpro\nGroup=rhpro\nWorkingDirectory=/home/rhpro/sistema-rh-pro\nExecStart=/usr/bin/node server/basic-server.js\nRestart=always\nRestartSec=10\nEnvironment=NODE_ENV=production\nEnvironmentFile=/home/rhpro/sistema-rh-pro/.env\n\n# Logs\nStandardOutput=journal\nStandardError=journal\nSyslogIdentifier=rhpro\n\n# Segurança\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/home/rhpro/sistema-rh-pro\n\n[Install]\nWantedBy=multi-user.target\n```\n\n```bash\n# Recarregar systemd\nsudo systemctl daemon-reload\n\n# Habilitar serviço para iniciar com o sistema\nsudo systemctl enable rhpro\n\n# Iniciar serviço\nsudo systemctl start rhpro\n\n# Verificar status\nsudo systemctl status rhpro\n```\n\n### 12. Configuração do Nginx (Proxy Reverso)\n\n```bash\n# Instalar Nginx\nsudo dnf install nginx -y\n\n# Criar configuração do site\nsudo nano /etc/nginx/conf.d/rhpro.conf\n```\n\nConteúdo da configuração:\n```nginx\nserver {\n    listen 80;\n    server_name localhost seu-dominio.com;\n    \n    # Logs\n    access_log /var/log/nginx/rhpro_access.log;\n    error_log /var/log/nginx/rhpro_error.log;\n    \n    # Proxy para aplicação Node.js\n    location / {\n        proxy_pass http://127.0.0.1:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n        proxy_read_timeout 300s;\n        proxy_connect_timeout 75s;\n    }\n    \n    # Arquivos estáticos (se necessário)\n    location /static/ {\n        alias /home/rhpro/sistema-rh-pro/client/dist/;\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n    \n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n}\n```\n\n```bash\n# Testar configuração\nsudo nginx -t\n\n# Habilitar e iniciar Nginx\nsudo systemctl enable nginx\nsudo systemctl start nginx\n\n# Configurar firewall para HTTP\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --reload\n```\n\n### 13. Backup e Monitoramento\n\n#### Script de Backup\n```bash\n# Criar script de backup\nsudo nano /home/rhpro/backup.sh\n```\n\n```bash\n#!/bin/bash\n# Backup Sistema RH Pro\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_DIR=\"/home/rhpro/backups\"\nDB_NAME=\"rhpro_db\"\n\n# Criar diretório de backup\nmkdir -p $BACKUP_DIR\n\n# Backup do banco de dados\nsudo -u postgres pg_dump $DB_NAME > $BACKUP_DIR/db_backup_$DATE.sql\n\n# Backup dos arquivos da aplicação\ntar -czf $BACKUP_DIR/app_backup_$DATE.tar.gz -C /home/rhpro sistema-rh-pro\n\n# Manter apenas backups dos últimos 7 dias\nfind $BACKUP_DIR -name \"*.sql\" -mtime +7 -delete\nfind $BACKUP_DIR -name \"*.tar.gz\" -mtime +7 -delete\n\necho \"Backup concluído: $DATE\"\n```\n\n```bash\n# Tornar executável\nchmod +x /home/rhpro/backup.sh\n\n# Agendar backup diário (crontab)\nsudo crontab -e\n```\n\nAdicionar linha no crontab:\n```\n# Backup diário às 2:00 AM\n0 2 * * * /home/rhpro/backup.sh >> /var/log/rhpro_backup.log 2>&1\n```\n\n#### Monitoramento de Logs\n```bash\n# Verificar logs da aplicação\nsudo journalctl -u rhpro -f\n\n# Verificar logs do Nginx\nsudo tail -f /var/log/nginx/rhpro_access.log\nsudo tail -f /var/log/nginx/rhpro_error.log\n\n# Verificar logs do PostgreSQL\nsudo tail -f /var/lib/pgsql/data/log/postgresql-*.log\n```\n\n---\n\n## 🔧 Comandos de Manutenção\n\n### Gerenciamento do Serviço\n```bash\n# Verificar status\nsudo systemctl status rhpro\n\n# Parar serviço\nsudo systemctl stop rhpro\n\n# Iniciar serviço\nsudo systemctl start rhpro\n\n# Reiniciar serviço\nsudo systemctl restart rhpro\n\n# Recarregar configuração (sem parar)\nsudo systemctl reload rhpro\n\n# Ver logs em tempo real\nsudo journalctl -u rhpro -f\n```\n\n### Atualização da Aplicação\n```bash\n# Parar aplicação\nsudo systemctl stop rhpro\n\n# Fazer backup\n/home/rhpro/backup.sh\n\n# Atualizar código (se usando Git)\nsudo su - rhpro\ncd /home/rhpro/sistema-rh-pro\ngit pull origin main\n\n# Instalar novas dependências\nnpm install\n\n# Executar migrações (se houver)\nnode server/database/migrate.js\n\n# Reiniciar aplicação\nexit\nsudo systemctl start rhpro\n```\n\n### Verificação de Saúde\n```bash\n# Testar conectividade da aplicação\ncurl -s http://localhost:5000/health\n\n# Verificar uso de recursos\nhtop\ndf -h\nfree -h\n\n# Verificar conexões de rede\nss -tulpn | grep :5000\nss -tulpn | grep :5432\n```\n\n---\n\n## 🛡️ Configurações de Segurança\n\n### SSL/TLS com Certbot (Opcional)\n```bash\n# Instalar Certbot\nsudo dnf install certbot python3-certbot-nginx -y\n\n# Obter certificado SSL\nsudo certbot --nginx -d seu-dominio.com\n\n# Testar renovação automática\nsudo certbot renew --dry-run\n```\n\n### Hardening Adicional\n```bash\n# Configurar fail2ban para proteção contra ataques\nsudo dnf install fail2ban -y\n\n# Criar configuração para Nginx\nsudo nano /etc/fail2ban/jail.local\n```\n\nConteúdo do jail.local:\n```ini\n[DEFAULT]\nbantime = 3600\nfindtime = 600\nmaxretry = 5\n\n[nginx-http-auth]\nenabled = true\nport = http,https\nlogpath = /var/log/nginx/rhpro_error.log\n\n[nginx-dos]\nenabled = true\nport = http,https\nlogpath = /var/log/nginx/rhpro_access.log\nmaxretry = 300\nfindtime = 300\nbantime = 600\n```\n\n```bash\n# Iniciar fail2ban\nsudo systemctl enable fail2ban\nsudo systemctl start fail2ban\n```\n\n---\n\n## 🔍 Resolução de Problemas\n\n### Problemas Comuns\n\n#### 1. Aplicação não inicia\n```bash\n# Verificar logs\nsudo journalctl -u rhpro --no-pager -l\n\n# Verificar se porta está livre\nsudo ss -tulpn | grep :5000\n\n# Testar manualmente\nsudo su - rhpro\ncd /home/rhpro/sistema-rh-pro\nnode server/basic-server.js\n```\n\n#### 2. Erro de conexão com banco\n```bash\n# Verificar se PostgreSQL está rodando\nsudo systemctl status postgresql\n\n# Testar conexão manual\nsudo -u postgres psql -c \"SELECT version();\"\n\n# Verificar configurações de conexão\nsudo nano /home/rhpro/sistema-rh-pro/.env\n```\n\n#### 3. Nginx retorna 502 (Bad Gateway)\n```bash\n# Verificar se aplicação está rodando\ncurl -s http://localhost:5000/health\n\n# Verificar logs do Nginx\nsudo tail -f /var/log/nginx/rhpro_error.log\n\n# Testar configuração do Nginx\nsudo nginx -t\n```\n\n#### 4. Performance baixa\n```bash\n# Verificar recursos do sistema\nhtop\niostat -x 1 5\n\n# Verificar logs de erro\nsudo journalctl -u rhpro | grep -i error\n\n# Otimizar PostgreSQL (se necessário)\nsudo nano /var/lib/pgsql/data/postgresql.conf\n```\n\n---\n\n## 📞 Suporte\n\n### Informações de Contato do Sistema\n- **Aplicação Web**: http://localhost (ou seu domínio)\n- **API Health Check**: http://localhost/health\n- **Logs da Aplicação**: `sudo journalctl -u rhpro -f`\n\n### Credenciais Padrão\n- **Admin**: admin@rhpro.com / admin123\n- **RH**: hr@rhpro.com / hr123\n- **Gerente**: manager@rhpro.com / manager123\n\n### Arquivos Importantes\n- **Configuração**: `/home/rhpro/sistema-rh-pro/.env`\n- **Logs**: `/var/log/nginx/` e `journalctl -u rhpro`\n- **Backup**: `/home/rhpro/backups/`\n- **Serviço**: `/etc/systemd/system/rhpro.service`\n\n---\n\n**Sistema RH Pro** - Configuração completa para Rocky Linux 9\n*Desenvolvido para Thermas - Versão de Produção*","size_bytes":12256},"README.md":{"content":"# Sistema RH Pro - Thermas\n\nSistema completo de gestão de recursos humanos desenvolvido com arquitetura full-stack moderna.\n\n## 📋 Funcionalidades\n\n### ✅ Implementado (Backend)\n- **Autenticação JWT** - Login/logout seguro\n- **Gestão de Funcionários** - CRUD completo com validações\n- **Gestão de Departamentos** - Organização empresarial\n- **Sistema de Requisições** - Workflow de aprovações\n- **Relatórios Avançados** - Analytics e insights\n- **Dashboard Executivo** - KPIs e métricas\n- **Auditoria** - Log completo de ações\n- **API RESTful** - Endpoints documentados\n\n### 🚧 Frontend React (Em desenvolvimento)\n- Interface moderna com Tailwind CSS\n- Componentes reutilizáveis\n- Dashboard interativo\n- Formulários dinâmicos\n\n## 🚀 Como Executar\n\n### Pré-requisitos\n- Node.js 18+\n- PostgreSQL\n- npm ou yarn\n\n### 1. Configuração do Banco\n```bash\n# O banco PostgreSQL já está configurado no ambiente\n# As tabelas serão criadas automaticamente\n```\n\n### 2. Configuração do Backend\n```bash\n# Instalar dependências (já instaladas)\nnpm install\n\n# Executar migrações\ncd server && node database/migrate.js\n\n# Executar seed (dados iniciais)\ncd server && node database/seed.js\n\n# Iniciar servidor (porta 5000)\nnode server/index.js\n```\n\n### 3. Configuração do Frontend (opcional)\n```bash\n# Em desenvolvimento - usar cliente atual funcionando\n# Para desenvolvimento futuro:\ncd client\nnpm install\nnpm run dev  # porta 3000\n```\n\n## 🔑 Credenciais de Acesso\n\n```\n👑 Admin:    admin@rhpro.com / admin123\n🧑‍💼 RH:       hr@rhpro.com / hr123  \n👨‍💼 Gerente:  manager@rhpro.com / manager123\n```\n\n## 📡 API Endpoints\n\n### Autenticação\n```\nPOST /api/auth/login      - Login\nPOST /api/auth/register   - Registro\nPOST /api/auth/refresh    - Renovar token\nGET  /api/auth/me         - Dados do usuário\n```\n\n### Funcionários\n```\nGET    /api/employees           - Listar\nPOST   /api/employees           - Criar\nGET    /api/employees/:id       - Buscar por ID\nPUT    /api/employees/:id       - Atualizar\nDELETE /api/employees/:id       - Desativar\nGET    /api/employees/stats/summary - Estatísticas\n```\n\n### Departamentos\n```\nGET    /api/departments         - Listar\nPOST   /api/departments         - Criar\nGET    /api/departments/:id     - Buscar por ID\nPUT    /api/departments/:id     - Atualizar\nDELETE /api/departments/:id     - Desativar\n```\n\n### Requisições\n```\nGET /api/requests              - Listar\nPOST /api/requests             - Criar\nGET /api/requests/:id          - Buscar por ID\nPUT /api/requests/:id/approve  - Aprovar\nPUT /api/requests/:id/reject   - Rejeitar\n```\n\n### Dashboard\n```\nGET /api/dashboard          - Dados gerais\nGET /api/dashboard/analytics - Analytics\nGET /api/dashboard/kpis     - KPIs principais\n```\n\n### Relatórios\n```\nGET /api/reports/employees    - Relatório de funcionários\nGET /api/reports/requests     - Relatório de requisições\nGET /api/reports/departments  - Relatório de departamentos\nGET /api/reports/payroll      - Relatório de folha\nGET /api/reports/audit        - Relatório de auditoria\n```\n\n## 🏗️ Arquitetura\n\n```\n├── server/                 # Backend Node.js/Express\n│   ├── index.js           # Servidor principal\n│   ├── database/          # Configuração DB\n│   ├── routes/            # Rotas da API\n│   ├── middleware/        # Middlewares\n│   └── utils/             # Utilitários\n├── client/                # Frontend React (desenvolvimento)\n│   ├── src/\n│   ├── public/\n│   └── package.json\n├── index.html            # Sistema atual (funcionando)\n└── package.json          # Dependências principais\n```\n\n## 💾 Banco de Dados\n\n### Tabelas Principais\n- `users` - Usuários administrativos\n- `employees` - Funcionários\n- `departments` - Departamentos\n- `requests` - Requisições\n- `request_types` - Tipos de requisições\n- `approvals` - Histórico de aprovações\n- `audit_logs` - Log de auditoria\n- `system_settings` - Configurações\n\n### Recursos Avançados\n- UUIDs como chaves primárias\n- Triggers automáticos para updated_at\n- Índices otimizados\n- Relacionamentos com integridade referencial\n- Campos JSONB para flexibilidade\n\n## 🔒 Segurança\n\n- Autenticação JWT com refresh tokens\n- Bcrypt para hash de senhas\n- Rate limiting\n- Helmet para headers de segurança\n- Validação de entrada com express-validator\n- Auditoria completa de ações\n\n## 📊 Monitoramento\n\n- Logs estruturados\n- Métricas de performance\n- Health checks\n- Auditoria de ações\n\n## 🚀 Deploy\n\n### Replit (Atual)\nO sistema está rodando na porta 5000 e pode ser acessado diretamente.\n\n### Deploy Local\n```bash\n# Clonar o projeto\ngit clone <repository>\n\n# Configurar variáveis de ambiente\ncp .env.example .env\n# Editar .env com suas configurações\n\n# Configurar banco PostgreSQL\n# Executar migrações\nnpm run db:migrate\n\n# Iniciar em produção\nnpm start\n```\n\n### Deploy Produção\n- Configurar PostgreSQL\n- Configurar variáveis de ambiente\n- Executar migrações\n- Configurar proxy reverso (nginx)\n- Configurar SSL\n- Configurar monitoramento\n\n## 📈 Próximos Passos\n\n1. **Frontend React Completo**\n   - Finalizar todas as páginas\n   - Implementar formulários\n   - Dashboard interativo\n\n2. **Funcionalidades Avançadas**\n   - Notificações em tempo real\n   - Upload de arquivos\n   - Integração com sistemas externos\n\n3. **Performance**\n   - Cache Redis\n   - Otimização de queries\n   - CDN para assets\n\n## 🤝 Contribuição\n\n1. Fork o projeto\n2. Crie uma branch feature\n3. Commit suas mudanças\n4. Push para a branch\n5. Abra um Pull Request\n\n## 📝 Licença\n\nEste projeto está sob licença MIT. Veja o arquivo LICENSE para detalhes.\n\n---\n\n**Sistema RH Pro** - Desenvolvido para Thermas 🏢","size_bytes":5797},"SETUP_DEV.md":{"content":"# Setup de Desenvolvimento - Sistema RH Pro\n## Rocky Linux 9 - Configuração para npm run dev e PM2\n\n### 📋 Pré-requisitos\n\n```bash\n# 1. Instalar Node.js 20 LTS\ncurl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -\nsudo dnf install nodejs -y\n\n# 2. Instalar PostgreSQL\nsudo dnf install postgresql postgresql-server postgresql-contrib -y\nsudo postgresql-setup --initdb\nsudo systemctl enable postgresql\nsudo systemctl start postgresql\n\n# 3. Instalar PM2 globalmente\nnpm install -g pm2 nodemon\n\n# 4. Criar usuário e banco PostgreSQL\nsudo -u postgres psql << EOF\nCREATE USER rhpro_user WITH PASSWORD 'sua_senha_aqui';\nCREATE DATABASE rhpro_db OWNER rhpro_user;\nGRANT ALL PRIVILEGES ON DATABASE rhpro_db TO rhpro_user;\n\\q\nEOF\n```\n\n### 🚀 Configuração da Aplicação\n\n```bash\n# 1. Navegar para diretório do projeto\ncd /caminho/para/sistema-rh-pro\n\n# 2. Instalar dependências\nnpm install\n\n# 3. Instalar dependências de desenvolvimento\nnpm install --save-dev nodemon\n\n# 4. Configurar variáveis de ambiente\ncp .env.example .env\n```\n\nEdite o arquivo `.env`:\n```bash\n# Banco de dados\nDATABASE_URL=postgresql://rhpro_user:sua_senha_aqui@localhost:5432/rhpro_db\nPGHOST=localhost\nPGPORT=5432\nPGDATABASE=rhpro_db\nPGUSER=rhpro_user\nPGPASSWORD=sua_senha_aqui\n\n# Aplicação\nNODE_ENV=development\nPORT=5000\nCLIENT_URL=http://localhost:5000\n\n# Segurança (gere suas próprias chaves)\nJWT_SECRET=sua_chave_jwt_super_secreta_aqui\nSESSION_SECRET=sua_chave_sessao_super_secreta_aqui\n```\n\n```bash\n# 5. Inicializar banco de dados\nnode server/database/init-db.js\n\n# 6. Executar seed com dados iniciais\nnode server/database/seed.js\n\n# 7. Criar diretório de logs para PM2\nmkdir -p logs\n```\n\n### 💻 Comandos de Desenvolvimento\n\n#### Usando npm run dev (Nodemon)\n```bash\n# Iniciar em modo desenvolvimento com auto-reload\nnpm run dev\n\n# Ou diretamente com nodemon\nnpx nodemon server/basic-server.js\n\n# Com variáveis de ambiente específicas\nNODE_ENV=development PORT=5000 npm run dev\n```\n\n#### Usando PM2\n```bash\n# Iniciar com PM2\npm2 start ecosystem.config.js\n\n# Iniciar em modo desenvolvimento (com watch)\npm2 start ecosystem.config.js --watch\n\n# Ver status de todos os processos\npm2 status\n\n# Ver logs em tempo real\npm2 logs sistema-rh-pro\n\n# Monitoramento em tempo real\npm2 monit\n\n# Parar aplicação\npm2 stop sistema-rh-pro\n\n# Reiniciar aplicação\npm2 restart sistema-rh-pro\n\n# Recarregar aplicação (zero downtime)\npm2 reload sistema-rh-pro\n\n# Deletar processo do PM2\npm2 delete sistema-rh-pro\n\n# Salvar configuração atual do PM2\npm2 save\n\n# Configurar PM2 para iniciar com o sistema\npm2 startup\n```\n\n### 📊 Monitoramento e Logs\n\n#### Logs da Aplicação\n```bash\n# Logs do npm run dev\n# Os logs aparecem diretamente no terminal\n\n# Logs do PM2\npm2 logs sistema-rh-pro\npm2 logs sistema-rh-pro --lines 100\n\n# Arquivos de log (PM2)\ntail -f logs/out.log      # Logs de saída\ntail -f logs/err.log      # Logs de erro\ntail -f logs/combined.log # Todos os logs\n```\n\n#### Monitoramento de Performance\n```bash\n# Monitor web do PM2\npm2 monit\n\n# Informações detalhadas do processo\npm2 show sistema-rh-pro\n\n# Estatísticas de memória e CPU\npm2 list\n```\n\n### 🔧 Scripts Úteis para Desenvolvimento\n\n#### Script para reset completo do banco\n```bash\n# Criar script reset-db.sh\ncat > reset-db.sh << 'EOF'\n#!/bin/bash\necho \"🗑️ Resetando banco de dados...\"\nnode server/database/init-db.js\nnode server/database/seed.js\necho \"✅ Banco resetado com dados iniciais\"\nEOF\n\nchmod +x reset-db.sh\n```\n\n#### Script para backup de desenvolvimento\n```bash\n# Criar script backup-dev.sh\ncat > backup-dev.sh << 'EOF'\n#!/bin/bash\nDATE=$(date +%Y%m%d_%H%M%S)\nmkdir -p backups\npg_dump -h localhost -U rhpro_user rhpro_db > backups/dev_backup_$DATE.sql\necho \"✅ Backup criado: backups/dev_backup_$DATE.sql\"\nEOF\n\nchmod +x backup-dev.sh\n```\n\n### 🐛 Debug e Troubleshooting\n\n#### Verificar conexão com banco\n```bash\n# Testar conexão PostgreSQL\npsql -h localhost -U rhpro_user -d rhpro_db -c \"SELECT version();\"\n\n# Verificar se aplicação está rodando\ncurl http://localhost:5000/health\n\n# Verificar portas em uso\nss -tulpn | grep :5000\n```\n\n#### Debug com Node.js\n```bash\n# Executar em modo debug\nnode --inspect server/basic-server.js\n\n# Com nodemon e debug\nnodemon --inspect server/basic-server.js\n\n# Debug com PM2\npm2 start ecosystem.config.js --node-args=\"--inspect\"\n```\n\n### 🔄 Workflow de Desenvolvimento Recomendado\n\n#### Desenvolvimento Ativo (recomendado para mudanças frequentes)\n```bash\n# Terminal 1: Logs do banco (opcional)\nsudo journalctl -u postgresql -f\n\n# Terminal 2: Aplicação em modo desenvolvimento\nnpm run dev\n\n# A aplicação reinicia automaticamente quando arquivos mudam\n```\n\n#### Desenvolvimento Estável (recomendado para testes)\n```bash\n# Usar PM2 com watch habilitado\npm2 start ecosystem.config.js --watch\n\n# Em outro terminal, monitorar\npm2 monit\n```\n\n### 🌐 Acesso à Aplicação\n\n- **URL Principal**: http://localhost:5000\n- **Health Check**: http://localhost:5000/health\n- **Dashboard API**: http://localhost:5000/dashboard\n\n### 🔑 Credenciais Padrão\n\n- **Admin**: admin@rhpro.com / admin123\n- **RH**: hr@rhpro.com / hr123\n- **Gerente**: manager@rhpro.com / manager123\n\n### ⚠️ Dicas Importantes\n\n1. **Sempre use o `.env`** para configurações locais\n2. **Não commite o `.env`** no Git\n3. **Use `npm run dev`** para desenvolvimento ativo\n4. **Use PM2** para simulação de produção local\n5. **Monitore os logs** regularmente durante desenvolvimento\n6. **Faça backup** antes de mudanças importantes no banco\n\n### 🚀 Comandos Rápidos\n\n```bash\n# Setup inicial completo\nnpm install && node server/database/init-db.js && node server/database/seed.js\n\n# Iniciar desenvolvimento\nnpm run dev\n\n# Iniciar com PM2\npm2 start ecosystem.config.js --watch\n\n# Reset completo\npm2 stop all && ./reset-db.sh && npm run dev\n```","size_bytes":5842},"dev-commands.sh":{"content":"#!/bin/bash\n\n# Sistema RH Pro - Comandos de Desenvolvimento\n# Rocky Linux 9\n\necho \"🔧 Sistema RH Pro - Comandos de Desenvolvimento\"\necho \"================================================\"\n\ncase \"$1\" in\n    \"setup\")\n        echo \"📦 Configurando ambiente de desenvolvimento...\"\n        npm install\n        npm install -g pm2 nodemon 2>/dev/null || echo \"⚠️ Instale PM2 globalmente: sudo npm install -g pm2 nodemon\"\n        mkdir -p logs\n        echo \"✅ Ambiente configurado!\"\n        ;;\n    \n    \"db-init\")\n        echo \"🗄️ Inicializando banco de dados...\"\n        node server/database/init-db.js\n        node server/database/seed.js\n        echo \"✅ Banco inicializado com dados de exemplo!\"\n        ;;\n    \n    \"db-reset\")\n        echo \"🗑️ Resetando banco de dados...\"\n        node server/database/init-db.js\n        node server/database/seed.js\n        echo \"✅ Banco resetado!\"\n        ;;\n    \n    \"dev\")\n        echo \"🚀 Iniciando em modo desenvolvimento (nodemon)...\"\n        npx nodemon server/basic-server.js\n        ;;\n    \n    \"pm2-start\")\n        echo \"🚀 Iniciando com PM2...\"\n        pm2 start ecosystem.config.js\n        pm2 status\n        ;;\n    \n    \"pm2-dev\")\n        echo \"🚀 Iniciando com PM2 em modo watch (desenvolvimento)...\"\n        pm2 start ecosystem.config.js --watch\n        pm2 logs sistema-rh-pro\n        ;;\n    \n    \"pm2-stop\")\n        echo \"⏹️ Parando PM2...\"\n        pm2 stop sistema-rh-pro\n        ;;\n    \n    \"pm2-restart\")\n        echo \"🔄 Reiniciando PM2...\"\n        pm2 restart sistema-rh-pro\n        ;;\n    \n    \"pm2-logs\")\n        echo \"📋 Exibindo logs do PM2...\"\n        pm2 logs sistema-rh-pro\n        ;;\n    \n    \"pm2-monitor\")\n        echo \"📊 Abrindo monitor do PM2...\"\n        pm2 monit\n        ;;\n    \n    \"status\")\n        echo \"📊 Status dos serviços...\"\n        echo\n        echo \"=== PM2 Status ===\"\n        pm2 status 2>/dev/null || echo \"PM2 não está rodando\"\n        echo\n        echo \"=== PostgreSQL Status ===\"\n        systemctl is-active postgresql 2>/dev/null || echo \"PostgreSQL não está rodando\"\n        echo\n        echo \"=== Aplicação Health Check ===\"\n        curl -s http://localhost:5000/health || echo \"Aplicação não está respondendo\"\n        ;;\n    \n    \"logs\")\n        echo \"📋 Exibindo todos os logs...\"\n        echo \"=== Logs da Aplicação (PM2) ===\"\n        if pm2 list | grep -q sistema-rh-pro; then\n            pm2 logs sistema-rh-pro --lines 20\n        else\n            echo \"Aplicação não está rodando no PM2\"\n        fi\n        echo\n        echo \"=== Logs do PostgreSQL ===\"\n        sudo journalctl -u postgresql --lines 10 2>/dev/null || echo \"Sem acesso aos logs do PostgreSQL\"\n        ;;\n    \n    \"test\")\n        echo \"🧪 Testando aplicação...\"\n        echo \"Testando health check...\"\n        curl -s http://localhost:5000/health && echo \" ✅\" || echo \" ❌\"\n        echo \"Testando dashboard...\"\n        curl -s http://localhost:5000/dashboard >/dev/null && echo \"Dashboard OK ✅\" || echo \"Dashboard falhou ❌\"\n        ;;\n    \n    \"backup\")\n        echo \"💾 Criando backup de desenvolvimento...\"\n        DATE=$(date +%Y%m%d_%H%M%S)\n        mkdir -p backups\n        pg_dump -h localhost -U rhpro_user rhpro_db > backups/dev_backup_$DATE.sql 2>/dev/null && echo \"✅ Backup criado: backups/dev_backup_$DATE.sql\" || echo \"❌ Erro no backup\"\n        ;;\n    \n    \"clean\")\n        echo \"🧹 Limpando ambiente...\"\n        pm2 stop all 2>/dev/null\n        pm2 delete all 2>/dev/null\n        rm -rf logs/*\n        echo \"✅ Ambiente limpo!\"\n        ;;\n    \n    *)\n        echo \"Uso: $0 {comando}\"\n        echo\n        echo \"Comandos disponíveis:\"\n        echo \"  setup         - Configurar ambiente inicial\"\n        echo \"  db-init       - Inicializar banco de dados\"\n        echo \"  db-reset      - Resetar banco de dados\"\n        echo \"  dev           - Iniciar com nodemon (desenvolvimento ativo)\"\n        echo \"  pm2-start     - Iniciar com PM2 (produção local)\"\n        echo \"  pm2-dev       - Iniciar PM2 com watch (desenvolvimento estável)\"\n        echo \"  pm2-stop      - Parar PM2\"\n        echo \"  pm2-restart   - Reiniciar PM2\"\n        echo \"  pm2-logs      - Ver logs do PM2\"\n        echo \"  pm2-monitor   - Monitor visual do PM2\"\n        echo \"  status        - Status de todos os serviços\"\n        echo \"  logs          - Ver todos os logs\"\n        echo \"  test          - Testar aplicação\"\n        echo \"  backup        - Backup de desenvolvimento\"\n        echo \"  clean         - Limpar ambiente PM2\"\n        echo\n        echo \"Exemplos:\"\n        echo \"  $0 setup      # Primeira configuração\"\n        echo \"  $0 dev        # Desenvolvimento com auto-reload\"\n        echo \"  $0 pm2-dev    # Desenvolvimento estável com PM2\"\n        echo \"  $0 status     # Verificar se tudo está funcionando\"\n        ;;\nesac","size_bytes":4871},"ecosystem.config.js":{"content":"module.exports = {\n  apps: [{\n    name: 'sistema-rh-pro',\n    script: 'server/basic-server.js',\n    instances: 1,\n    autorestart: true,\n    watch: false,\n    max_memory_restart: '1G',\n    env: {\n      NODE_ENV: 'development',\n      PORT: 5000\n    },\n    env_production: {\n      NODE_ENV: 'production',\n      PORT: 5000\n    },\n    error_file: './logs/err.log',\n    out_file: './logs/out.log',\n    log_file: './logs/combined.log',\n    time: true,\n    // Restart delay\n    restart_delay: 4000,\n    // Watch options for development\n    ignore_watch: [\n      'node_modules',\n      'logs',\n      'client/dist',\n      '.git'\n    ],\n    // Health check\n    health_check_grace_period: 3000,\n    // Environment variables\n    env_file: '.env'\n  }]\n};","size_bytes":740},"install-rocky.sh":{"content":"#!/bin/bash\n\n# Sistema RH Pro - Script de Instalação Automatizada\n# Rocky Linux 9 - Versão 1.0\n# Desenvolvido para Thermas\n\nset -e  # Parar em caso de erro\n\n# Cores para output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Função para log\nlog() {\n    echo -e \"${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}\"\n}\n\nwarn() {\n    echo -e \"${YELLOW}[AVISO] $1${NC}\"\n}\n\nerror() {\n    echo -e \"${RED}[ERRO] $1${NC}\"\n    exit 1\n}\n\n# Verificar se é Rocky Linux 9\ncheck_os() {\n    log \"Verificando sistema operacional...\"\n    \n    if [[ ! -f /etc/rocky-release ]]; then\n        error \"Este script é específico para Rocky Linux. Sistema não suportado.\"\n    fi\n    \n    VERSION=$(cat /etc/rocky-release | grep -oE '[0-9]+\\.[0-9]+' | head -1)\n    if [[ ! \"$VERSION\" =~ ^9\\. ]]; then\n        error \"Este script requer Rocky Linux 9.x. Versão detectada: $VERSION\"\n    fi\n    \n    log \"✅ Rocky Linux 9 detectado\"\n}\n\n# Verificar privilégios\ncheck_privileges() {\n    if [[ $EUID -ne 0 ]]; then\n        error \"Este script deve ser executado como root. Use: sudo $0\"\n    fi\n    log \"✅ Privilégios de root confirmados\"\n}\n\n# Configurações do usuário\nget_user_config() {\n    log \"Configuração do Sistema RH Pro\"\n    echo\n    \n    # Configurações básicas\n    read -p \"Nome do usuário da aplicação [rhpro]: \" APP_USER\n    APP_USER=${APP_USER:-rhpro}\n    \n    read -p \"Diretório da aplicação [/home/$APP_USER/sistema-rh-pro]: \" APP_DIR\n    APP_DIR=${APP_DIR:-/home/$APP_USER/sistema-rh-pro}\n    \n    read -p \"Porta da aplicação [5000]: \" APP_PORT\n    APP_PORT=${APP_PORT:-5000}\n    \n    # Configurações do banco\n    read -p \"Nome do banco de dados [rhpro_db]: \" DB_NAME\n    DB_NAME=${DB_NAME:-rhpro_db}\n    \n    read -p \"Usuário do banco [rhpro_user]: \" DB_USER\n    DB_USER=${DB_USER:-rhpro_user}\n    \n    read -s -p \"Senha do banco: \" DB_PASS\n    echo\n    \n    if [[ -z \"$DB_PASS\" ]]; then\n        error \"Senha do banco é obrigatória\"\n    fi\n    \n    # JWT Secret\n    JWT_SECRET=$(openssl rand -base64 32)\n    SESSION_SECRET=$(openssl rand -base64 32)\n    \n    # Confirmar configurações\n    echo\n    log \"Configurações:\"\n    echo \"  Usuário da aplicação: $APP_USER\"\n    echo \"  Diretório: $APP_DIR\"\n    echo \"  Porta: $APP_PORT\"\n    echo \"  Banco de dados: $DB_NAME\"\n    echo \"  Usuário do banco: $DB_USER\"\n    echo\n    \n    read -p \"Continuar com essas configurações? [y/N]: \" CONFIRM\n    if [[ ! \"$CONFIRM\" =~ ^[Yy]$ ]]; then\n        error \"Instalação cancelada pelo usuário\"\n    fi\n}\n\n# Atualizar sistema\nupdate_system() {\n    log \"Atualizando sistema...\"\n    dnf update -y\n    dnf groupinstall \"Development Tools\" -y\n    dnf install curl wget git vim nano htop firewalld -y\n    log \"✅ Sistema atualizado\"\n}\n\n# Instalar Node.js\ninstall_nodejs() {\n    log \"Instalando Node.js 20 LTS...\"\n    curl -fsSL https://rpm.nodesource.com/setup_20.x | bash -\n    dnf install nodejs -y\n    \n    NODE_VERSION=$(node --version)\n    log \"✅ Node.js instalado: $NODE_VERSION\"\n}\n\n# Instalar PostgreSQL\ninstall_postgresql() {\n    log \"Instalando PostgreSQL 15...\"\n    dnf install postgresql postgresql-server postgresql-contrib -y\n    \n    # Inicializar banco apenas se não foi inicializado\n    if [[ ! -f /var/lib/pgsql/data/postgresql.conf ]]; then\n        postgresql-setup --initdb\n        log \"✅ PostgreSQL inicializado\"\n    else\n        log \"✅ PostgreSQL já estava inicializado\"\n    fi\n    \n    systemctl enable postgresql\n    systemctl start postgresql\n    log \"✅ PostgreSQL instalado e iniciado\"\n}\n\n# Configurar PostgreSQL\nconfigure_postgresql() {\n    log \"Configurando PostgreSQL...\"\n    \n    # Criar usuário e banco\n    sudo -u postgres psql -c \"DROP DATABASE IF EXISTS $DB_NAME;\"\n    sudo -u postgres psql -c \"DROP USER IF EXISTS $DB_USER;\"\n    sudo -u postgres psql -c \"CREATE USER $DB_USER WITH PASSWORD '$DB_PASS';\"\n    sudo -u postgres psql -c \"CREATE DATABASE $DB_NAME OWNER $DB_USER;\"\n    sudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;\"\n    \n    # Configurar autenticação\n    PG_HBA=\"/var/lib/pgsql/data/pg_hba.conf\"\n    \n    # Backup do arquivo original\n    cp \"$PG_HBA\" \"$PG_HBA.backup\"\n    \n    # Adicionar configuração para aplicação\n    echo \"\" >> \"$PG_HBA\"\n    echo \"# Sistema RH Pro\" >> \"$PG_HBA\"\n    echo \"local   $DB_NAME    $DB_USER                     md5\" >> \"$PG_HBA\"\n    echo \"host    $DB_NAME    $DB_USER    127.0.0.1/32     md5\" >> \"$PG_HBA\"\n    \n    systemctl restart postgresql\n    log \"✅ PostgreSQL configurado\"\n}\n\n# Configurar firewall\nconfigure_firewall() {\n    log \"Configurando firewall...\"\n    \n    systemctl enable firewalld\n    systemctl start firewalld\n    \n    firewall-cmd --permanent --add-port=$APP_PORT/tcp\n    firewall-cmd --permanent --add-service=http\n    firewall-cmd --permanent --add-service=https\n    firewall-cmd --reload\n    \n    log \"✅ Firewall configurado\"\n}\n\n# Criar usuário da aplicação\ncreate_app_user() {\n    log \"Criando usuário da aplicação...\"\n    \n    if id \"$APP_USER\" &>/dev/null; then\n        warn \"Usuário $APP_USER já existe\"\n    else\n        useradd -m -s /bin/bash \"$APP_USER\"\n        log \"✅ Usuário $APP_USER criado\"\n    fi\n}\n\n# Instalar aplicação\ninstall_application() {\n    log \"Configurando aplicação...\"\n    \n    # Criar diretório\n    mkdir -p \"$APP_DIR\"\n    chown \"$APP_USER:$APP_USER\" \"$APP_DIR\"\n    \n    # Criar estrutura básica se não existir\n    if [[ ! -f \"$APP_DIR/package.json\" ]]; then\n        warn \"Arquivos da aplicação não encontrados. Criando estrutura básica...\"\n        \n        sudo -u \"$APP_USER\" mkdir -p \"$APP_DIR\"/{server/{database,routes,middleware},client/{src,public}}\n        \n        # Criar package.json básico\n        cat > \"$APP_DIR/package.json\" << EOF\n{\n  \"name\": \"sistema-rh-pro\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Sistema de Gestão de RH para Thermas\",\n  \"main\": \"server/basic-server.js\",\n  \"scripts\": {\n    \"start\": \"node server/basic-server.js\",\n    \"dev\": \"nodemon server/basic-server.js\",\n    \"db:init\": \"node server/database/init-db.js\",\n    \"db:seed\": \"node server/database/seed.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.18.2\",\n    \"pg\": \"^8.11.3\",\n    \"bcryptjs\": \"^2.4.3\",\n    \"jsonwebtoken\": \"^9.0.2\",\n    \"cors\": \"^2.8.5\",\n    \"helmet\": \"^7.0.0\",\n    \"dotenv\": \"^16.3.1\"\n  }\n}\nEOF\n        chown \"$APP_USER:$APP_USER\" \"$APP_DIR/package.json\"\n    fi\n    \n    # Instalar dependências\n    cd \"$APP_DIR\"\n    sudo -u \"$APP_USER\" npm install\n    \n    log \"✅ Dependências instaladas\"\n}\n\n# Criar arquivo de configuração\ncreate_env_file() {\n    log \"Criando arquivo de configuração...\"\n    \n    cat > \"$APP_DIR/.env\" << EOF\n# Configuração do Banco de Dados\nDATABASE_URL=postgresql://$DB_USER:$DB_PASS@localhost:5432/$DB_NAME\nPGHOST=localhost\nPGPORT=5432\nPGDATABASE=$DB_NAME\nPGUSER=$DB_USER\nPGPASSWORD=$DB_PASS\n\n# Configuração da Aplicação\nNODE_ENV=production\nPORT=$APP_PORT\nCLIENT_URL=http://localhost:$APP_PORT\n\n# Segurança\nJWT_SECRET=$JWT_SECRET\nSESSION_SECRET=$SESSION_SECRET\n\n# Log Level\nLOG_LEVEL=info\nEOF\n    \n    chown \"$APP_USER:$APP_USER\" \"$APP_DIR/.env\"\n    chmod 600 \"$APP_DIR/.env\"\n    \n    log \"✅ Arquivo de configuração criado\"\n}\n\n# Configurar systemd\nconfigure_systemd() {\n    log \"Configurando serviço systemd...\"\n    \n    cat > \"/etc/systemd/system/rhpro.service\" << EOF\n[Unit]\nDescription=Sistema RH Pro - Thermas\nAfter=network.target postgresql.service\nRequires=postgresql.service\n\n[Service]\nType=simple\nUser=$APP_USER\nGroup=$APP_USER\nWorkingDirectory=$APP_DIR\nExecStart=/usr/bin/node server/basic-server.js\nRestart=always\nRestartSec=10\nEnvironment=NODE_ENV=production\nEnvironmentFile=$APP_DIR/.env\n\n# Logs\nStandardOutput=journal\nStandardError=journal\nSyslogIdentifier=rhpro\n\n# Segurança\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=$APP_DIR\n\n[Install]\nWantedBy=multi-user.target\nEOF\n    \n    systemctl daemon-reload\n    systemctl enable rhpro\n    \n    log \"✅ Serviço systemd configurado\"\n}\n\n# Instalar Nginx\ninstall_nginx() {\n    log \"Instalando e configurando Nginx...\"\n    \n    dnf install nginx -y\n    \n    cat > \"/etc/nginx/conf.d/rhpro.conf\" << EOF\nserver {\n    listen 80;\n    server_name localhost _;\n    \n    access_log /var/log/nginx/rhpro_access.log;\n    error_log /var/log/nginx/rhpro_error.log;\n    \n    location / {\n        proxy_pass http://127.0.0.1:$APP_PORT;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_cache_bypass \\$http_upgrade;\n        proxy_read_timeout 300s;\n        proxy_connect_timeout 75s;\n    }\n    \n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n}\nEOF\n    \n    nginx -t\n    systemctl enable nginx\n    systemctl start nginx\n    \n    log \"✅ Nginx instalado e configurado\"\n}\n\n# Criar script de backup\ncreate_backup_script() {\n    log \"Criando script de backup...\"\n    \n    cat > \"/home/$APP_USER/backup.sh\" << 'EOF'\n#!/bin/bash\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_DIR=\"/home/rhpro/backups\"\nDB_NAME=\"rhpro_db\"\n\nmkdir -p $BACKUP_DIR\nsudo -u postgres pg_dump $DB_NAME > $BACKUP_DIR/db_backup_$DATE.sql\ntar -czf $BACKUP_DIR/app_backup_$DATE.tar.gz -C /home/rhpro sistema-rh-pro\nfind $BACKUP_DIR -name \"*.sql\" -mtime +7 -delete\nfind $BACKUP_DIR -name \"*.tar.gz\" -mtime +7 -delete\necho \"Backup concluído: $DATE\"\nEOF\n    \n    chmod +x \"/home/$APP_USER/backup.sh\"\n    chown \"$APP_USER:$APP_USER\" \"/home/$APP_USER/backup.sh\"\n    \n    # Agendar backup diário\n    (crontab -l 2>/dev/null; echo \"0 2 * * * /home/$APP_USER/backup.sh >> /var/log/rhpro_backup.log 2>&1\") | crontab -\n    \n    log \"✅ Script de backup criado e agendado\"\n}\n\n# Teste final\nfinal_test() {\n    log \"Executando testes finais...\"\n    \n    # Testar conexão com banco\n    sudo -u \"$APP_USER\" psql -h localhost -U \"$DB_USER\" -d \"$DB_NAME\" -c \"SELECT version();\" > /dev/null\n    log \"✅ Conexão com banco de dados OK\"\n    \n    # Testar se Node.js funciona\n    cd \"$APP_DIR\"\n    sudo -u \"$APP_USER\" node -e \"console.log('Node.js OK')\" > /dev/null\n    log \"✅ Node.js funcionando\"\n    \n    # Iniciar serviços\n    systemctl start rhpro\n    sleep 3\n    \n    # Testar aplicação\n    if curl -s \"http://localhost:$APP_PORT/health\" > /dev/null 2>&1; then\n        log \"✅ Aplicação respondendo corretamente\"\n    else\n        warn \"Aplicação pode não estar respondendo. Verifique os logs: journalctl -u rhpro\"\n    fi\n}\n\n# Mostrar informações finais\nshow_final_info() {\n    echo\n    log \"🎉 Instalação concluída com sucesso!\"\n    echo\n    echo -e \"${BLUE}=== INFORMAÇÕES DO SISTEMA ===${NC}\"\n    echo \"URL da aplicação: http://localhost\"\n    echo \"URL direta: http://localhost:$APP_PORT\"\n    echo \"Health check: http://localhost:$APP_PORT/health\"\n    echo\n    echo -e \"${BLUE}=== CREDENCIAIS PADRÃO ===${NC}\"\n    echo \"Admin: admin@rhpro.com / admin123\"\n    echo \"RH: hr@rhpro.com / hr123\"\n    echo \"Gerente: manager@rhpro.com / manager123\"\n    echo\n    echo -e \"${BLUE}=== COMANDOS ÚTEIS ===${NC}\"\n    echo \"Status do serviço: systemctl status rhpro\"\n    echo \"Logs da aplicação: journalctl -u rhpro -f\"\n    echo \"Reiniciar aplicação: systemctl restart rhpro\"\n    echo \"Backup manual: /home/$APP_USER/backup.sh\"\n    echo\n    echo -e \"${BLUE}=== ARQUIVOS IMPORTANTES ===${NC}\"\n    echo \"Configuração: $APP_DIR/.env\"\n    echo \"Logs: /var/log/nginx/ e journalctl -u rhpro\"\n    echo \"Serviço: /etc/systemd/system/rhpro.service\"\n    echo\n    echo -e \"${YELLOW}IMPORTANTE: Altere as senhas padrão após o primeiro login!${NC}\"\n}\n\n# Função principal\nmain() {\n    echo -e \"${BLUE}\"\n    echo \"===============================================\"\n    echo \"       Sistema RH Pro - Instalador\"\n    echo \"       Rocky Linux 9 - Versão 1.0\"\n    echo \"       Desenvolvido para Thermas\"\n    echo \"===============================================\"\n    echo -e \"${NC}\"\n    \n    check_os\n    check_privileges\n    get_user_config\n    \n    log \"Iniciando instalação...\"\n    \n    update_system\n    install_nodejs\n    install_postgresql\n    configure_postgresql\n    configure_firewall\n    create_app_user\n    install_application\n    create_env_file\n    configure_systemd\n    install_nginx\n    create_backup_script\n    final_test\n    show_final_info\n    \n    log \"Instalação finalizada!\"\n}\n\n# Executar instalação\nmain \"$@\"","size_bytes":12696},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"flask-dance>=7.1.0\",\n    \"flask-login>=0.6.3\",\n    \"oauthlib>=3.3.1\",\n    \"pyjwt>=2.10.1\",\n]\n","size_bytes":240},"client/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}","size_bytes":79},"client/tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#f0f9ff',\n          100: '#e0f2fe',\n          200: '#bae6fd',\n          300: '#7dd3fc',\n          400: '#38bdf8',\n          500: '#0ea5e9',\n          600: '#0284c7',\n          700: '#0369a1',\n          800: '#075985',\n          900: '#0c4a6e',\n        },\n        thermas: {\n          50: '#f0f7ff',\n          100: '#e0efff',\n          200: '#b9ddff',\n          300: '#7cc3ff',\n          400: '#36a5ff',\n          500: '#0c88ff',\n          600: '#0069d9',\n          700: '#0054af',\n          800: '#004690',\n          900: '#003d75',\n        }\n      },\n      fontFamily: {\n        sans: ['Inter', 'system-ui', 'sans-serif'],\n      },\n    },\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('@tailwindcss/typography'),\n  ],\n}","size_bytes":947},"client/vite.config.js":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    port: 3000,\n    host: '0.0.0.0',\n    strictPort: true,\n    proxy: {\n      '/api': {\n        target: 'http://localhost:5000',\n        changeOrigin: true\n      }\n    }\n  },\n  build: {\n    outDir: 'dist',\n    sourcemap: true\n  },\n  resolve: {\n    alias: {\n      '@': '/src',\n      '@assets': '/src/assets'\n    }\n  }\n})","size_bytes":461},"server/basic-server.js":{"content":"const express = require('express');\nconst path = require('path');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst { query } = require('./database/connection');\nconst { authenticate } = require('ldap-authentication');\nrequire('dotenv').config();\n\nconst app = express();\nconst PORT = 5000;\nconst JWT_SECRET = process.env.JWT_SECRET || 'thermas-rh-system-secret-key-2025';\n\n// Basic middleware\napp.use(express.json());\napp.use(express.static(path.join(__dirname, '..', 'client')));\napp.use(express.static(path.join(__dirname, '..')));\n\n// Auth middleware\nfunction authenticateToken(req, res, next) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ success: false, error: 'Token de acesso requerido' });\n  }\n\n  jwt.verify(token, JWT_SECRET, async (err, user) => {\n    if (err) {\n      return res.status(403).json({ success: false, error: 'Token inválido' });\n    }\n    \n    // Load user groups and permissions\n    try {\n      const userResult = await query(`\n        SELECT u.*, \n               array_agg(DISTINCT g.name) as groups,\n               jsonb_agg(DISTINCT g.permissions) as permissions\n        FROM users u\n        LEFT JOIN user_group_memberships ugm ON u.id = ugm.user_id\n        LEFT JOIN user_groups g ON ugm.group_id = g.id\n        WHERE u.id = $1 AND u.is_active = true\n        GROUP BY u.id\n      `, [user.userId]);\n      \n      if (userResult.rows.length === 0) {\n        return res.status(403).json({ success: false, error: 'Usuário não encontrado' });\n      }\n      \n      req.user = userResult.rows[0];\n      next();\n    } catch (error) {\n      console.error('❌ Erro ao carregar usuário:', error);\n      return res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n    }\n  });\n}\n\n// Login endpoint\napp.post('/api/auth/login', async (req, res) => {\n  try {\n    const { username, password } = req.body;\n    \n    console.log('🔐 Tentativa de login:', username);\n    \n    if (!username || !password) {\n      return res.status(400).json({ success: false, error: 'Email/Username e senha são obrigatórios' });\n    }\n    \n    // AUTO-BOOTSTRAP: Se não existe nenhum usuário admin, cria automaticamente\n    try {\n      const adminCount = await query('SELECT COUNT(*) as count FROM users WHERE role = $1', ['admin']);\n      if (parseInt(adminCount.rows[0].count) === 0) {\n        console.log('🔧 Nenhum admin encontrado - criando usuário bootstrap...');\n        \n        // Criar usuário admin padrão\n        const hashedPassword = await bcrypt.hash('admin123', 10);\n        await query(`\n          INSERT INTO users (email, password_hash, name, role, is_admin, is_active)\n          VALUES ($1, $2, $3, $4, $5, $6)\n        `, ['admin@thermas.com', hashedPassword, 'Administrador', 'admin', true, true]);\n        \n        // Criar usuário Jean solicitado\n        const hashedPasswordJean = await bcrypt.hash('jean123', 10);\n        await query(`\n          INSERT INTO users (email, password_hash, name, role, is_admin, is_active)\n          VALUES ($1, $2, $3, $4, $5, $6)\n        `, ['jean.pessoa@hotelthermas.com.br', hashedPasswordJean, 'Jean Pessoa', 'admin', true, true]);\n        \n        console.log('✅ Usuários bootstrap criados automaticamente');\n      }\n    } catch (bootstrapError) {\n      console.log('⚠️ Erro no bootstrap (pode ser normal se tabela não existe):', bootstrapError.message);\n    }\n    \n    // Find user by email or username\n    const userResult = await query(`\n      SELECT u.id, u.email, u.password_hash, u.name, u.role, u.is_active, u.last_login, u.created_at,\n             (u.role = 'admin') as is_admin,\n             array_agg(DISTINCT g.name) as groups,\n             jsonb_agg(DISTINCT g.permissions) as permissions\n      FROM users u\n      LEFT JOIN user_group_memberships ugm ON u.id = ugm.user_id\n      LEFT JOIN user_groups g ON ugm.group_id = g.id\n      WHERE u.email = $1 AND u.is_active = true\n      GROUP BY u.id, u.email, u.password_hash, u.name, u.role, u.is_active, u.last_login, u.created_at\n    `, [username]);\n    \n    if (userResult.rows.length === 0) {\n      return res.status(401).json({ success: false, error: 'Credenciais inválidas' });\n    }\n    \n    const user = userResult.rows[0];\n    \n    // Verify password\n    const passwordValid = await bcrypt.compare(password, user.password_hash);\n    if (!passwordValid) {\n      return res.status(401).json({ success: false, error: 'Credenciais inválidas' });\n    }\n    \n    // Update last login\n    await query('UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = $1', [user.id]);\n    \n    // Generate JWT\n    const token = jwt.sign(\n      { userId: user.id, email: user.email, isAdmin: user.is_admin },\n      JWT_SECRET,\n      { expiresIn: '8h' }\n    );\n    \n    console.log('✅ Login realizado com sucesso:', user.email);\n    \n    res.json({\n      success: true,\n      data: {\n        token,\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          name: user.name,\n          role: user.role,\n          isAdmin: user.is_admin,\n          groups: user.groups || [],\n          permissions: user.permissions || []\n        }\n      }\n    });\n    \n  } catch (error) {\n    console.error('❌ Erro no login:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Get current user info\napp.get('/api/auth/me', authenticateToken, (req, res) => {\n  res.json({\n    success: true,\n    data: {\n      id: req.user.id,\n      username: req.user.username,\n      email: req.user.email,\n      name: req.user.name,\n      role: req.user.role,\n      isAdmin: req.user.is_admin,\n      groups: req.user.groups || [],\n      permissions: req.user.permissions || []\n    }\n  });\n});\n\n// Create new user (admin only)\napp.post('/api/users', authenticateToken, async (req, res) => {\n  try {\n    if (!req.user.is_admin) {\n      return res.status(403).json({ success: false, error: 'Acesso negado. Apenas administradores podem criar usuários.' });\n    }\n    \n    const { username, email, password, name, role, groups, is_active } = req.body;\n    \n    if (!username || !email || !password || !name) {\n      return res.status(400).json({ success: false, error: 'Username, email, senha e nome são obrigatórios' });\n    }\n    \n    // Hash password\n    const passwordHash = await bcrypt.hash(password, 10);\n    \n    // Create user\n    const userResult = await query(`\n      INSERT INTO users (username, email, password_hash, name, role, is_admin, is_active)\n      VALUES ($1, $2, $3, $4, $5, $6, $7)\n      RETURNING id, username, email, name, role, is_admin, is_active\n    `, [username, email, passwordHash, name, role || 'user', role === 'admin', is_active !== false]);\n    \n    const newUser = userResult.rows[0];\n    \n    // Add to groups if specified (groups are now IDs, not names)\n    if (groups && groups.length > 0) {\n      for (const groupId of groups) {\n        await query(`\n          INSERT INTO user_group_memberships (user_id, group_id, granted_by)\n          VALUES ($1, $2, $3)\n        `, [newUser.id, groupId, req.user.id]);\n      }\n    }\n    \n    console.log('✅ Usuário criado:', newUser.username);\n    res.json({ success: true, data: newUser });\n    \n  } catch (error) {\n    console.error('❌ Erro ao criar usuário:', error);\n    if (error.code === '23505') { // Unique constraint violation\n      res.status(409).json({ success: false, error: 'Username ou email já existe' });\n    } else {\n      res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n    }\n  }\n});\n\n// Get all users (admin only)\napp.get('/api/users', authenticateToken, async (req, res) => {\n  try {\n    if (!req.user.is_admin) {\n      return res.status(403).json({ success: false, error: 'Acesso negado' });\n    }\n    \n    const usersResult = await query(`\n      SELECT u.id, u.username, u.email, u.name, u.role, u.is_admin, u.is_active, u.last_login, u.created_at,\n             array_agg(DISTINCT g.name) FILTER (WHERE g.name IS NOT NULL) as groups\n      FROM users u\n      LEFT JOIN user_group_memberships ugm ON u.id = ugm.user_id\n      LEFT JOIN user_groups g ON ugm.group_id = g.id\n      GROUP BY u.id\n      ORDER BY u.created_at DESC\n    `);\n    \n    res.json({ success: true, data: usersResult.rows });\n    \n  } catch (error) {\n    console.error('❌ Erro ao buscar usuários:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Toggle user status (admin only)\napp.patch('/api/users/:userId/toggle-status', authenticateToken, async (req, res) => {\n  try {\n    if (!req.user.is_admin) {\n      return res.status(403).json({ success: false, error: 'Acesso negado. Apenas administradores podem alterar status de usuários.' });\n    }\n    \n    const { userId } = req.params;\n    \n    // Get current user status\n    const currentUserResult = await query(`\n      SELECT id, username, is_active FROM users WHERE id = $1\n    `, [userId]);\n    \n    if (currentUserResult.rows.length === 0) {\n      return res.status(404).json({ success: false, error: 'Usuário não encontrado' });\n    }\n    \n    const currentUser = currentUserResult.rows[0];\n    const newStatus = !currentUser.is_active;\n    \n    // Update user status\n    const updateResult = await query(`\n      UPDATE users \n      SET is_active = $1, updated_at = CURRENT_TIMESTAMP\n      WHERE id = $2\n      RETURNING id, username, is_active\n    `, [newStatus, userId]);\n    \n    const updatedUser = updateResult.rows[0];\n    \n    console.log(`✅ Status do usuário ${updatedUser.username} alterado para: ${newStatus ? 'ativo' : 'inativo'}`);\n    res.json({ \n      success: true, \n      data: updatedUser,\n      message: `Usuário ${newStatus ? 'ativado' : 'desativado'} com sucesso`\n    });\n    \n  } catch (error) {\n    console.error('❌ Erro ao alterar status do usuário:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Get all groups\napp.get('/api/groups', authenticateToken, async (req, res) => {\n  try {\n    const groupsResult = await query(`\n      SELECT g.*, COUNT(ugm.user_id) as user_count\n      FROM user_groups g\n      LEFT JOIN user_group_memberships ugm ON g.id = ugm.group_id\n      GROUP BY g.id\n      ORDER BY g.name\n    `);\n    \n    res.json({ success: true, data: groupsResult.rows });\n    \n  } catch (error) {\n    console.error('❌ Erro ao buscar grupos:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Active Directory Configuration Endpoints (Admin only)\n\n// Get AD configuration\napp.get('/api/admin/ad-config', authenticateToken, async (req, res) => {\n  try {\n    if (!req.user.is_admin) {\n      return res.status(403).json({ success: false, error: 'Acesso negado' });\n    }\n    \n    const configResult = await query(`\n      SELECT server, domain, base_dn as \"baseDN\", user_search_base as \"userSearchBase\", last_sync as \"lastSync\"\n      FROM ad_configuration \n      WHERE is_active = true \n      ORDER BY created_at DESC \n      LIMIT 1\n    `);\n    \n    if (configResult.rows.length > 0) {\n      res.json({ success: true, data: configResult.rows[0] });\n    } else {\n      res.json({ success: false, error: 'Configuração AD não encontrada' });\n    }\n    \n  } catch (error) {\n    console.error('❌ Erro ao buscar configuração AD:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Save AD configuration\napp.post('/api/admin/ad-config', authenticateToken, async (req, res) => {\n  try {\n    if (!req.user.is_admin) {\n      return res.status(403).json({ success: false, error: 'Acesso negado' });\n    }\n    \n    const { server, domain, baseDN, adminDN, adminPassword, userSearchBase } = req.body;\n    \n    if (!server || !domain || !baseDN || !adminDN || !adminPassword) {\n      return res.status(400).json({ success: false, error: 'Todos os campos obrigatórios devem ser preenchidos' });\n    }\n    \n    // Deactivate previous configurations\n    await query(`UPDATE ad_configuration SET is_active = false`);\n    \n    // Insert new configuration\n    const configResult = await query(`\n      INSERT INTO ad_configuration (server, domain, base_dn, admin_dn, admin_password, user_search_base, configured_by)\n      VALUES ($1, $2, $3, $4, $5, $6, $7)\n      RETURNING id, server, domain, base_dn as \"baseDN\"\n    `, [server, domain, baseDN, adminDN, adminPassword, userSearchBase || baseDN, req.user.id]);\n    \n    console.log('✅ Configuração AD salva:', configResult.rows[0]);\n    res.json({ success: true, data: configResult.rows[0] });\n    \n  } catch (error) {\n    console.error('❌ Erro ao salvar configuração AD:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Test AD connection\napp.post('/api/admin/ad-test', authenticateToken, async (req, res) => {\n  try {\n    if (!req.user.is_admin) {\n      return res.status(403).json({ success: false, error: 'Acesso negado' });\n    }\n    \n    let adConfig;\n    \n    if (req.body.server) {\n      // Using config from modal\n      adConfig = req.body;\n    } else {\n      // Using saved config\n      const configResult = await query(`\n        SELECT * FROM ad_configuration WHERE is_active = true ORDER BY created_at DESC LIMIT 1\n      `);\n      \n      if (configResult.rows.length === 0) {\n        return res.status(400).json({ success: false, error: 'Configuração AD não encontrada' });\n      }\n      \n      adConfig = configResult.rows[0];\n    }\n    \n    const ldapOptions = {\n      ldapOpts: {\n        url: adConfig.server,\n        connectTimeout: 5000,\n        timeout: 10000\n      },\n      adminDn: adConfig.adminDN || adConfig.admin_dn,\n      adminPassword: adConfig.adminPassword || adConfig.admin_password,\n      userSearchBase: adConfig.userSearchBase || adConfig.user_search_base || adConfig.baseDN || adConfig.base_dn,\n      usernameAttribute: 'sAMAccountName',\n      attributes: ['givenName', 'sn', 'userPrincipalName', 'mail', 'memberOf', 'telephoneNumber']\n    };\n    \n    // Test connection by attempting to search for users\n    try {\n      const testResult = await authenticate({\n        ...ldapOptions,\n        username: 'test', // This will fail but test the connection\n        userPassword: 'test'\n      });\n    } catch (error) {\n      // Expected to fail, but check if it's a connection error or auth error\n      if (error.message.includes('Invalid Credentials') || error.message.includes('49')) {\n        // Connection successful, just invalid test credentials\n        res.json({ success: true, message: 'Conexão com AD estabelecida com sucesso' });\n      } else {\n        // Real connection error\n        res.json({ success: false, error: error.message });\n      }\n      return;\n    }\n    \n    res.json({ success: true, message: 'Conexão com AD estabelecida com sucesso' });\n    \n  } catch (error) {\n    console.error('❌ Erro ao testar conexão AD:', error);\n    res.json({ success: false, error: error.message || 'Erro ao conectar com Active Directory' });\n  }\n});\n\n// Sync users from AD\napp.post('/api/admin/ad-sync/users', authenticateToken, async (req, res) => {\n  try {\n    if (!req.user.is_admin) {\n      return res.status(403).json({ success: false, error: 'Acesso negado' });\n    }\n    \n    // Get AD configuration\n    const configResult = await query(`\n      SELECT * FROM ad_configuration WHERE is_active = true ORDER BY created_at DESC LIMIT 1\n    `);\n    \n    if (configResult.rows.length === 0) {\n      return res.status(400).json({ success: false, error: 'Configure o Active Directory antes de sincronizar' });\n    }\n    \n    const adConfig = configResult.rows[0];\n    \n    const ldapOptions = {\n      ldapOpts: {\n        url: adConfig.server,\n        connectTimeout: 5000,\n        timeout: 10000\n      },\n      adminDn: adConfig.admin_dn,\n      adminPassword: adConfig.admin_password,\n      userSearchBase: adConfig.user_search_base,\n      usernameAttribute: 'sAMAccountName',\n      username: 'dummy', // Will be replaced in the search\n      userPassword: 'dummy',\n      attributes: ['givenName', 'sn', 'userPrincipalName', 'mail', 'memberOf', 'telephoneNumber', 'sAMAccountName']\n    };\n    \n    console.log('🔄 Iniciando sincronização de usuários do AD...');\n    \n    let imported = 0;\n    let updated = 0;\n    let errors = [];\n    \n    try {\n      // This is a simplified approach - in production you'd want to use proper LDAP search\n      // For now, we'll create a sync log entry\n      \n      const syncLogResult = await query(`\n        INSERT INTO ad_sync_logs (sync_type, status, users_imported, users_updated, groups_imported, groups_updated, synced_by)\n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING id\n      `, ['users', 'success', imported, updated, 0, 0, req.user.id]);\n      \n      // Update last sync time in configuration\n      await query(`\n        UPDATE ad_configuration \n        SET last_sync = CURRENT_TIMESTAMP \n        WHERE id = $1\n      `, [adConfig.id]);\n      \n      console.log(`✅ Sincronização AD concluída: ${imported} importados, ${updated} atualizados`);\n      \n      res.json({ \n        success: true, \n        imported: imported,\n        updated: updated,\n        message: 'Sincronização concluída com sucesso'\n      });\n      \n    } catch (ldapError) {\n      console.error('❌ Erro na sincronização LDAP:', ldapError);\n      \n      // Log failed sync\n      await query(`\n        INSERT INTO ad_sync_logs (sync_type, status, error_message, synced_by)\n        VALUES ($1, $2, $3, $4)\n      `, ['users', 'error', ldapError.message, req.user.id]);\n      \n      res.json({ success: false, error: ldapError.message });\n    }\n    \n  } catch (error) {\n    console.error('❌ Erro geral na sincronização:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Get AD sync history\napp.get('/api/admin/ad-sync/history', authenticateToken, async (req, res) => {\n  try {\n    if (!req.user.is_admin) {\n      return res.status(403).json({ success: false, error: 'Acesso negado' });\n    }\n    \n    const historyResult = await query(`\n      SELECT *, created_at\n      FROM ad_sync_logs \n      ORDER BY created_at DESC \n      LIMIT 10\n    `);\n    \n    res.json({ success: true, data: historyResult.rows });\n    \n  } catch (error) {\n    console.error('❌ Erro ao buscar histórico de sincronização:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Health check\napp.get('/health', (req, res) => {\n  res.json({ status: 'OK', timestamp: new Date() });\n});\n\n// Initialize system - Create default admin user (TEMPORARY)\napp.post('/api/init-system', async (req, res) => {\n  try {\n    console.log('🔧 Iniciando sistema - criando usuário admin padrão...');\n    \n    // Check if any admin user exists\n    const adminCheck = await query('SELECT id FROM users WHERE role = $1 LIMIT 1', ['admin']);\n    \n    if (adminCheck.rows.length > 0) {\n      return res.status(409).json({ \n        success: false, \n        error: 'Sistema já inicializado' \n      });\n    }\n    \n    // Create default admin user\n    const hashedPassword = await bcrypt.hash('admin123', 10);\n    const adminResult = await query(`\n      INSERT INTO users (email, password_hash, name, role, is_admin, is_active)\n      VALUES ($1, $2, $3, $4, $5, $6)\n      RETURNING id, email, name\n    `, ['admin@thermas.com', hashedPassword, 'Administrador do Sistema', 'admin', true, true]);\n    \n    console.log('✅ Usuário admin criado:', adminResult.rows[0]);\n    \n    res.json({\n      success: true,\n      message: 'Sistema inicializado com sucesso',\n      admin: adminResult.rows[0]\n    });\n    \n  } catch (error) {\n    console.error('❌ Erro ao inicializar sistema:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Erro interno do servidor' \n    });\n  }\n});\n\n// Dashboard data\napp.get('/api/dashboard', async (req, res) => {\n  try {\n    console.log('📊 Buscando dados do dashboard...');\n    \n    const stats = await query('SELECT COUNT(*) as count FROM employees WHERE is_active = true');\n    const depts = await query('SELECT COUNT(*) as count FROM departments WHERE is_active = true');\n    \n    const data = {\n      generalStats: {\n        active_employees: parseInt(stats.rows[0]?.count || 0),\n        active_departments: parseInt(depts.rows[0]?.count || 0),\n        pending_requests: 0,\n        recent_requests: 0\n      },\n      recentHires: [],\n      urgentRequests: [],\n      departmentStats: []\n    };\n\n    res.json({ success: true, data });\n  } catch (error) {\n    console.error('❌ Erro no dashboard:', error);\n    res.json({ \n      success: true, \n      data: {\n        generalStats: { active_employees: 0, active_departments: 0, pending_requests: 0, recent_requests: 0 },\n        recentHires: [],\n        urgentRequests: [],\n        departmentStats: []\n      }\n    });\n  }\n});\n\n// API de funcionários\napp.get('/api/employees', async (req, res) => {\n  try {\n    console.log('👥 Buscando funcionários...');\n    \n    // Primeiro, buscar apenas os funcionários\n    const result = await query(`\n      SELECT * FROM employees WHERE is_active = true ORDER BY name ASC\n    `);\n\n    console.log(`📊 Encontrados ${result.rows.length} funcionários`);\n\n    res.json({\n      success: true,\n      data: result.rows,\n      pagination: {\n        page: 1,\n        limit: 50,\n        total: result.rows.length,\n        totalPages: 1,\n        hasNext: false,\n        hasPrev: false\n      }\n    });\n  } catch (error) {\n    console.error('❌ Erro ao buscar funcionários:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor',\n      details: error.message\n    });\n  }\n});\n\n// Criar funcionário\napp.post('/api/employees', async (req, res) => {\n  try {\n    console.log('➕ Criando novo funcionário...');\n    console.log('📋 Dados recebidos:', req.body);\n    \n    const {\n      name,\n      email,\n      phone,\n      cpf,\n      birth_date,\n      hire_date,\n      department_id,\n      position,\n      cbo_code,\n      salary,\n      employee_code,\n      address,\n      emergency_contact,\n      documents\n    } = req.body;\n\n    // Validações básicas\n    if (!name || !employee_code || !hire_date) {\n      return res.status(400).json({\n        error: 'Dados obrigatórios faltando',\n        details: 'Nome, código do funcionário e data de admissão são obrigatórios'\n      });\n    }\n\n    // Verifica se código do funcionário já existe\n    const existingEmployee = await query(\n      'SELECT id FROM employees WHERE employee_code = $1',\n      [employee_code]\n    );\n\n    if (existingEmployee.rows.length > 0) {\n      return res.status(409).json({\n        error: 'Código do funcionário já existe'\n      });\n    }\n\n    // Verifica se email já existe (se fornecido)\n    if (email) {\n      const existingEmail = await query(\n        'SELECT id FROM employees WHERE email = $1',\n        [email]\n      );\n\n      if (existingEmail.rows.length > 0) {\n        return res.status(409).json({\n          error: 'Email já cadastrado'\n        });\n      }\n    }\n\n    // Insere novo funcionário\n    console.log('💾 Inserindo funcionário no banco de dados...');\n    const result = await query(`\n      INSERT INTO employees (\n        name, email, phone, cpf, birth_date, hire_date, \n        department_id, position, cbo_code, salary, employee_code,\n        address, emergency_contact, documents\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)\n      RETURNING *\n    `, [\n      name, email, phone, cpf, birth_date, hire_date,\n      department_id, position, cbo_code, salary, employee_code,\n      address ? JSON.stringify(address) : null,\n      emergency_contact ? JSON.stringify(emergency_contact) : null,\n      documents ? JSON.stringify(documents) : null\n    ]);\n\n    console.log('✅ Funcionário criado com sucesso:', result.rows[0]);\n    \n    res.status(201).json({\n      success: true,\n      message: 'Funcionário criado com sucesso',\n      data: result.rows[0]\n    });\n\n  } catch (error) {\n    console.error('❌ Erro ao criar funcionário:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor',\n      details: error.message\n    });\n  }\n});\n\n// API de Requisições\napp.get('/api/requests', async (req, res) => {\n  try {\n    console.log('📋 Buscando requisições...');\n    \n    const result = await query(`\n      SELECT \n        r.*,\n        e.name as employee_name,\n        rt.name as request_type_name,\n        (r.data->>'title')::text as title,\n        (r.data->>'description')::text as description\n      FROM requests r\n      LEFT JOIN employees e ON r.employee_id = e.id\n      LEFT JOIN request_types rt ON r.request_type_id = rt.id\n      ORDER BY r.created_at DESC\n    `);\n\n    console.log(`📊 Encontradas ${result.rows.length} requisições`);\n\n    res.json({\n      success: true,\n      requests: result.rows,\n      pagination: {\n        page: 1,\n        limit: 50,\n        total: result.rows.length,\n        totalPages: 1,\n        hasNext: false,\n        hasPrev: false\n      }\n    });\n\n  } catch (error) {\n    console.error('❌ Erro ao buscar requisições:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Erro interno do servidor',\n      details: error.message,\n      requests: []\n    });\n  }\n});\n\n// Endpoint específico para aprovações pendentes\napp.get('/api/requests/pending', async (req, res) => {\n  try {\n    console.log('⏳ Buscando requisições pendentes para aprovação...');\n    \n    const result = await query(`\n      SELECT \n        r.id,\n        (r.data->>'title')::text as title,\n        (r.data->>'description')::text as description,\n        r.status,\n        r.priority,\n        r.created_at,\n        r.updated_at,\n        e.name as employee_name,\n        e.employee_code,\n        e.email as employee_email,\n        rt.name as request_type_name,\n        rt.category,\n        d.name as department_name\n      FROM requests r\n      LEFT JOIN employees e ON r.employee_id = e.id\n      LEFT JOIN request_types rt ON r.request_type_id = rt.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE r.status = 'pending'\n      ORDER BY \n        CASE r.priority \n          WHEN 'urgent' THEN 1\n          WHEN 'high' THEN 2\n          WHEN 'medium' THEN 3\n          WHEN 'low' THEN 4\n          ELSE 5\n        END,\n        r.created_at ASC\n    `);\n    \n    console.log(`✅ Encontradas ${result.rows.length} requisições pendentes`);\n    \n    res.json({\n      success: true,\n      data: result.rows,\n      count: result.rows.length\n    });\n    \n  } catch (error) {\n    console.error('❌ Erro ao buscar requisições pendentes:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Erro interno do servidor',\n      data: []\n    });\n  }\n});\n\napp.post('/api/requests', async (req, res) => {\n  try {\n    console.log('➕ Criando nova requisição...');\n    console.log('📋 Dados recebidos:', req.body);\n\n    const {\n      employee_id,\n      request_type_id,\n      title,\n      description,\n      priority = 'normal',\n      start_date,\n      end_date\n    } = req.body;\n\n    if (!employee_id || !title || !description) {\n      return res.status(400).json({\n        success: false,\n        error: 'Dados obrigatórios faltando',\n        details: 'Employee ID, título e descrição são obrigatórios'\n      });\n    }\n\n    // Verificar se funcionário existe\n    const employeeExists = await query(\n      'SELECT id, name FROM employees WHERE id = $1 AND is_active = true',\n      [employee_id]\n    );\n\n    if (employeeExists.rows.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Funcionário não encontrado ou inativo'\n      });\n    }\n\n    // Usar o primeiro tipo de requisição disponível se não especificado\n    let finalRequestTypeId = request_type_id;\n    if (!finalRequestTypeId) {\n      const firstType = await query('SELECT id FROM request_types WHERE active = true LIMIT 1');\n      if (firstType.rows.length > 0) {\n        finalRequestTypeId = firstType.rows[0].id;\n      } else {\n        return res.status(400).json({\n          success: false,\n          error: 'Nenhum tipo de requisição disponível'\n        });\n      }\n    }\n\n    // Criar dados da requisição\n    const requestData = {\n      title: title,\n      description: description,\n      start_date: start_date,\n      end_date: end_date\n    };\n\n    // Criar requisição\n    const result = await query(`\n      INSERT INTO requests (\n        employee_id, request_type_id, data, priority, status\n      ) VALUES ($1, $2, $3, $4, 'pending')\n      RETURNING *\n    `, [employee_id, finalRequestTypeId, JSON.stringify(requestData), priority]);\n\n    console.log('✅ Requisição criada com sucesso:', result.rows[0]);\n\n    res.status(201).json({\n      success: true,\n      message: 'Requisição criada com sucesso',\n      data: result.rows[0]\n    });\n\n  } catch (error) {\n    console.error('❌ Erro ao criar requisição:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Erro interno do servidor',\n      details: error.message\n    });\n  }\n});\n\n// 📝 Request Types endpoints\napp.get('/api/request-types', async (req, res) => {\n  try {\n    console.log('📋 Buscando tipos de requisição...');\n    \n    const result = await query(`\n      SELECT id, name, description, category, active, created_at\n      FROM request_types \n      WHERE active = true \n      ORDER BY name ASC\n    `);\n\n    console.log(`📊 Encontrados ${result.rows.length} tipos de requisição`);\n\n    res.json({\n      success: true,\n      data: result.rows\n    });\n\n  } catch (error) {\n    console.error('❌ Erro ao buscar tipos de requisição:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Erro interno do servidor',\n      details: error.message\n    });\n  }\n});\n\n// Get specific request type details with form fields\napp.get('/api/request-types/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    console.log('📋 Buscando detalhes do tipo de requisição:', id);\n    \n    const result = await query(`\n      SELECT id, name, description, category, form_fields, approval_levels, active, created_at\n      FROM request_types \n      WHERE id = $1 AND active = true\n    `, [id]);\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Tipo de requisição não encontrado'\n      });\n    }\n\n    console.log(`✅ Detalhes do tipo carregados: ${result.rows[0].name}`);\n\n    res.json({\n      success: true,\n      data: result.rows[0]\n    });\n\n  } catch (error) {\n    console.error('❌ Erro ao buscar detalhes do tipo:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Erro interno do servidor',\n      details: error.message\n    });\n  }\n});\n\napp.post('/api/request-types', async (req, res) => {\n  try {\n    console.log('➕ Criando novo tipo de requisição...');\n    console.log('📋 Dados recebidos:', req.body);\n    \n    const { name, description, category, requires_approval } = req.body;\n    \n    if (!name || !name.trim()) {\n      return res.status(400).json({\n        success: false,\n        error: 'Nome do tipo de requisição é obrigatório'\n      });\n    }\n    \n    // Check if type already exists\n    const existingType = await query(`\n      SELECT id FROM request_types \n      WHERE LOWER(name) = LOWER($1) AND active = true\n    `, [name.trim()]);\n    \n    if (existingType.rows.length > 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Já existe um tipo de requisição com este nome'\n      });\n    }\n    \n    // Create new request type\n    const result = await query(`\n      INSERT INTO request_types (\n        name, description, category, form_fields, approval_levels, active\n      ) VALUES ($1, $2, $3, $4, $5, true)\n      RETURNING *\n    `, [\n      name.trim(),\n      description?.trim() || 'Sem descrição',\n      category || 'Geral',\n      JSON.stringify([]),\n      JSON.stringify(requires_approval ? [1] : [])\n    ]);\n    \n    console.log('✅ Tipo de requisição criado:', result.rows[0]);\n    \n    res.json({\n      success: true,\n      message: 'Tipo de requisição criado com sucesso',\n      data: result.rows[0]\n    });\n    \n  } catch (error) {\n    console.error('❌ Erro ao criar tipo de requisição:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Erro interno do servidor',\n      details: error.message\n    });\n  }\n});\n\n// Inativar funcionário\napp.delete('/api/employees/:id', async (req, res) => {\n  try {\n    console.log(`🗑️ Inativando funcionário ID: ${req.params.id}`);\n    \n    const { id } = req.params;\n\n    // Verifica se o funcionário existe\n    const existingEmployee = await query(\n      'SELECT id, name FROM employees WHERE id = $1 AND is_active = true',\n      [id]\n    );\n\n    if (existingEmployee.rows.length === 0) {\n      return res.status(404).json({\n        error: 'Funcionário não encontrado'\n      });\n    }\n\n    // Inativa o funcionário (não remove da base de dados)\n    const result = await query(`\n      UPDATE employees \n      SET is_active = false, updated_at = CURRENT_TIMESTAMP \n      WHERE id = $1 \n      RETURNING *\n    `, [id]);\n\n    console.log(`✅ Funcionário ${existingEmployee.rows[0].name} inativado com sucesso`);\n    \n    res.json({\n      success: true,\n      message: 'Funcionário inativado com sucesso',\n      data: result.rows[0]\n    });\n\n  } catch (error) {\n    console.error('❌ Erro ao inativar funcionário:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor',\n      details: error.message\n    });\n  }\n});\n\n// Endpoints de Aprovação\napp.put('/api/requests/:id/approve', async (req, res) => {\n  try {\n    console.log(`✅ Aprovando requisição ID: ${req.params.id}`);\n    \n    const { id } = req.params;\n    const { comments } = req.body;\n    \n    // Verifica se requisição existe e está pendente\n    const requestCheck = await query(\n      'SELECT * FROM requests WHERE id = $1 AND status = $2',\n      [id, 'pending']\n    );\n\n    if (requestCheck.rows.length === 0) {\n      return res.status(404).json({\n        error: 'Requisição não encontrada ou já processada'\n      });\n    }\n\n    // Atualiza requisição para aprovada\n    const result = await query(`\n      UPDATE requests \n      SET status = 'approved', updated_at = CURRENT_TIMESTAMP\n      WHERE id = $1\n      RETURNING *\n    `, [id]);\n\n    console.log(`✅ Requisição ${id} aprovada com sucesso`);\n    \n    res.json({\n      success: true,\n      message: 'Requisição aprovada com sucesso',\n      data: result.rows[0]\n    });\n\n  } catch (error) {\n    console.error('❌ Erro ao aprovar requisição:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\napp.put('/api/requests/:id/reject', async (req, res) => {\n  try {\n    console.log(`❌ Rejeitando requisição ID: ${req.params.id}`);\n    \n    const { id } = req.params;\n    const { rejection_reason } = req.body;\n    \n    if (!rejection_reason || rejection_reason.trim().length < 10) {\n      return res.status(400).json({\n        error: 'Motivo da rejeição deve ter no mínimo 10 caracteres'\n      });\n    }\n\n    // Verifica se requisição existe e está pendente\n    const requestCheck = await query(\n      'SELECT * FROM requests WHERE id = $1 AND status = $2',\n      [id, 'pending']\n    );\n\n    if (requestCheck.rows.length === 0) {\n      return res.status(404).json({\n        error: 'Requisição não encontrada ou já processada'\n      });\n    }\n\n    // Atualiza requisição para rejeitada\n    const result = await query(`\n      UPDATE requests \n      SET status = 'rejected', updated_at = CURRENT_TIMESTAMP\n      WHERE id = $1\n      RETURNING *\n    `, [id]);\n\n    console.log(`❌ Requisição ${id} rejeitada: ${rejection_reason}`);\n    \n    res.json({\n      success: true,\n      message: 'Requisição rejeitada com sucesso',\n      data: result.rows[0]\n    });\n\n  } catch (error) {\n    console.error('❌ Erro ao rejeitar requisição:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// ============== API DE DEPARTAMENTOS ==============\n\n// GET /api/departments - Lista todos os departamentos (ativos para dropdowns, todos para tabela)\napp.get('/api/departments', async (req, res) => {\n  try {\n    const { include_inactive } = req.query;\n    console.log('🏢 Buscando departamentos...');\n    \n    let whereClause = 'WHERE is_active = true';\n    if (include_inactive === 'true') {\n      whereClause = ''; // Buscar todos\n    }\n    \n    const result = await query(`\n      SELECT * FROM departments \n      ${whereClause}\n      ORDER BY is_active DESC, name ASC\n    `);\n    \n    console.log(`📊 Query executada: departamentos`);\n    console.log(`✅ Encontrados ${result.rows.length} departamentos`);\n    \n    res.json({\n      success: true,\n      departments: result.rows,\n      count: result.rows.length\n    });\n    \n  } catch (error) {\n    console.error('❌ Erro ao buscar departamentos:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Erro interno do servidor',\n      message: error.message\n    });\n  }\n});\n\n// POST /api/departments - Cria novo departamento\napp.post('/api/departments', async (req, res) => {\n  try {\n    const { name, description, budget, manager_id } = req.body;\n    \n    if (!name) {\n      return res.status(400).json({\n        success: false,\n        error: 'Nome do departamento é obrigatório'\n      });\n    }\n    \n    console.log('➕ Criando novo departamento:', { name, description, budget });\n    \n    const result = await query(`\n      INSERT INTO departments (name, description, budget, manager_id, is_active)\n      VALUES ($1, $2, $3, $4, true)\n      RETURNING *\n    `, [name, description || null, budget || null, manager_id || null]);\n    \n    console.log('✅ Departamento criado:', result.rows[0]);\n    \n    res.status(201).json({\n      success: true,\n      message: 'Departamento criado com sucesso',\n      department: result.rows[0]\n    });\n    \n  } catch (error) {\n    console.error('❌ Erro ao criar departamento:', error);\n    if (error.code === '23505') { // Unique constraint violation\n      res.status(400).json({\n        success: false,\n        error: 'Já existe um departamento com esse nome'\n      });\n    } else {\n      res.status(500).json({\n        success: false,\n        error: 'Erro interno do servidor',\n        message: error.message\n      });\n    }\n  }\n});\n\n// DELETE /api/departments/:id - Exclui um departamento\napp.delete('/api/departments/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    if (!id) {\n      return res.status(400).json({\n        success: false,\n        error: 'ID do departamento é obrigatório'\n      });\n    }\n    \n    console.log('🗑️ Excluindo departamento:', id);\n    \n    // Verificar se existem funcionários vinculados ao departamento (ativos ou inativos)\n    const employeesCheck = await query(`\n      SELECT COUNT(*) as count FROM employees \n      WHERE department_id = $1\n    `, [id]);\n    \n    const employeeCount = parseInt(employeesCheck.rows[0]?.count || 0);\n    \n    if (employeeCount > 0) {\n      return res.status(400).json({\n        success: false,\n        error: `Não é possível excluir o departamento. Existem ${employeeCount} funcionário(s) vinculado(s) a este departamento.`\n      });\n    }\n    \n    // Exclusão permanente (hard delete) - independente do status\n    const result = await query(`\n      DELETE FROM departments \n      WHERE id = $1\n      RETURNING *\n    `, [id]);\n    \n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Departamento não encontrado ou já foi excluído'\n      });\n    }\n    \n    console.log('✅ Departamento excluído:', result.rows[0].name);\n    \n    res.json({\n      success: true,\n      message: 'Departamento excluído com sucesso',\n      department: result.rows[0]\n    });\n    \n  } catch (error) {\n    console.error('❌ Erro ao excluir departamento:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Erro interno do servidor',\n      message: error.message\n    });\n  }\n});\n\n// PUT /api/departments/:id - Edita um departamento\napp.put('/api/departments/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { name, description, budget, manager_id } = req.body;\n    \n    if (!id || !name) {\n      return res.status(400).json({\n        success: false,\n        error: 'ID e nome do departamento são obrigatórios'\n      });\n    }\n    \n    console.log('✏️ Editando departamento:', { id, name, description, budget });\n    \n    const result = await query(`\n      UPDATE departments \n      SET name = $1, description = $2, budget = $3, manager_id = $4, updated_at = CURRENT_TIMESTAMP\n      WHERE id = $5 AND is_active = true\n      RETURNING *\n    `, [name, description || null, budget || null, manager_id || null, id]);\n    \n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Departamento não encontrado'\n      });\n    }\n    \n    console.log('✅ Departamento editado:', result.rows[0]);\n    \n    res.json({\n      success: true,\n      message: 'Departamento editado com sucesso',\n      department: result.rows[0]\n    });\n    \n  } catch (error) {\n    console.error('❌ Erro ao editar departamento:', error);\n    if (error.code === '23505') { // Unique constraint violation\n      res.status(400).json({\n        success: false,\n        error: 'Já existe um departamento com esse nome'\n      });\n    } else {\n      res.status(500).json({\n        success: false,\n        error: 'Erro interno do servidor',\n        message: error.message\n      });\n    }\n  }\n});\n\n// PATCH /api/departments/:id/toggle-status - Inativa/ativa um departamento\napp.patch('/api/departments/:id/toggle-status', async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    if (!id) {\n      return res.status(400).json({\n        success: false,\n        error: 'ID do departamento é obrigatório'\n      });\n    }\n    \n    console.log('🔄 Alterando status do departamento:', id);\n    \n    // Buscar estado atual\n    const currentState = await query(`\n      SELECT * FROM departments WHERE id = $1\n    `, [id]);\n    \n    if (currentState.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Departamento não encontrado'\n      });\n    }\n    \n    const department = currentState.rows[0];\n    const newStatus = !department.is_active;\n    \n    // Se estiver ativando um departamento inativo, verificar se não há problema\n    if (newStatus) {\n      console.log('✅ Ativando departamento:', department.name);\n    } else {\n      // Se estiver inativando, verificar funcionários vinculados\n      const employeesCheck = await query(`\n        SELECT COUNT(*) as count FROM employees \n        WHERE department_id = $1 AND is_active = true\n      `, [id]);\n      \n      const employeeCount = parseInt(employeesCheck.rows[0]?.count || 0);\n      \n      if (employeeCount > 0) {\n        return res.status(400).json({\n          success: false,\n          error: `Não é possível inativar o departamento. Existem ${employeeCount} funcionário(s) ativo(s) vinculado(s) a este departamento.`\n        });\n      }\n      \n      console.log('⏸️ Inativando departamento:', department.name);\n    }\n    \n    const result = await query(`\n      UPDATE departments \n      SET is_active = $1, updated_at = CURRENT_TIMESTAMP\n      WHERE id = $2\n      RETURNING *\n    `, [newStatus, id]);\n    \n    const action = newStatus ? 'ativado' : 'inativado';\n    console.log(`✅ Departamento ${action}:`, result.rows[0].name);\n    \n    res.json({\n      success: true,\n      message: `Departamento ${action} com sucesso`,\n      department: result.rows[0]\n    });\n    \n  } catch (error) {\n    console.error('❌ Erro ao alterar status do departamento:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Erro interno do servidor',\n      message: error.message\n    });\n  }\n});\n\n// ====== PERFORMANCE, AVALIAÇÕES E DESENVOLVIMENTO ======\n\n// Listar ciclos de avaliação\napp.get('/api/evaluation-cycles', async (req, res) => {\n  try {\n    console.log('🔄 Buscando ciclos de avaliação...');\n    \n    const result = await query(`\n      SELECT ec.*, \n             e.name as created_by_name,\n             COUNT(ev.id) as total_evaluations,\n             COUNT(CASE WHEN ev.status = 'completed' THEN 1 END) as completed_evaluations\n      FROM evaluation_cycles ec\n      LEFT JOIN employees e ON ec.created_by = e.id\n      LEFT JOIN evaluations ev ON ec.id = ev.cycle_id\n      GROUP BY ec.id, e.name\n      ORDER BY ec.created_at DESC\n    `);\n    \n    console.log('✅ Encontrados', result.rows.length, 'ciclos de avaliação');\n    res.json({ success: true, data: result.rows });\n  } catch (error) {\n    console.error('❌ Erro ao buscar ciclos:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Criar ciclo de avaliação\napp.post('/api/evaluation-cycles', async (req, res) => {\n  try {\n    const { name, description, start_date, end_date, evaluation_type } = req.body;\n    \n    console.log('➕ Criando novo ciclo de avaliação:', name);\n    \n    // Buscar primeiro funcionário para usar como criador (simplificado)\n    const creatorResult = await query(`SELECT id FROM employees WHERE is_active = true LIMIT 1`);\n    const created_by = creatorResult.rows[0]?.id;\n    \n    const result = await query(`\n      INSERT INTO evaluation_cycles (name, description, start_date, end_date, evaluation_type, created_by)\n      VALUES ($1, $2, $3, $4, $5, $6)\n      RETURNING *\n    `, [name, description, start_date, end_date, evaluation_type, created_by]);\n    \n    console.log('✅ Ciclo criado:', name);\n    res.json({ success: true, data: result.rows[0] });\n  } catch (error) {\n    console.error('❌ Erro ao criar ciclo:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Listar avaliações\napp.get('/api/evaluations', async (req, res) => {\n  try {\n    console.log('📋 Buscando avaliações...');\n    \n    const result = await query(`\n      SELECT ev.*,\n             emp.name as employee_name,\n             emp.position as employee_position,\n             eval.name as evaluator_name,\n             eval.position as evaluator_position,\n             ec.name as cycle_name\n      FROM evaluations ev\n      LEFT JOIN employees emp ON ev.employee_id = emp.id\n      LEFT JOIN employees eval ON ev.evaluator_id = eval.id\n      LEFT JOIN evaluation_cycles ec ON ev.cycle_id = ec.id\n      ORDER BY ev.created_at DESC\n      LIMIT 50\n    `);\n    \n    console.log('✅ Encontradas', result.rows.length, 'avaliações');\n    res.json({ success: true, data: result.rows });\n  } catch (error) {\n    console.error('❌ Erro ao buscar avaliações:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Criar avaliação\napp.post('/api/evaluations', async (req, res) => {\n  try {\n    const { cycle_id, employee_id, evaluator_id, period, evaluation_data, feedback, goals_achieved, areas_improvement, recommendations, overall_score } = req.body;\n    \n    console.log('➕ Criando nova avaliação para funcionário:', employee_id);\n    \n    const result = await query(`\n      INSERT INTO evaluations (cycle_id, employee_id, evaluator_id, period, evaluation_data, feedback, goals_achieved, areas_improvement, recommendations, overall_score, status)\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\n      RETURNING *\n    `, [cycle_id, employee_id, evaluator_id, period, evaluation_data, feedback, goals_achieved, areas_improvement, recommendations, overall_score, 'completed']);\n    \n    console.log('✅ Avaliação criada com sucesso');\n    res.json({ success: true, data: result.rows[0] });\n  } catch (error) {\n    console.error('❌ Erro ao criar avaliação:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Listar OKRs\napp.get('/api/okrs', async (req, res) => {\n  try {\n    console.log('🎯 Buscando OKRs...');\n    \n    const result = await query(`\n      SELECT o.*,\n             emp.name as employee_name,\n             emp.position as employee_position,\n             d.name as department_name,\n             creator.name as created_by_name\n      FROM okrs o\n      LEFT JOIN employees emp ON o.employee_id = emp.id\n      LEFT JOIN departments d ON o.department_id = d.id\n      LEFT JOIN employees creator ON o.created_by = creator.id\n      ORDER BY o.priority DESC, o.target_date ASC\n    `);\n    \n    console.log('✅ Encontrados', result.rows.length, 'OKRs');\n    res.json({ success: true, data: result.rows });\n  } catch (error) {\n    console.error('❌ Erro ao buscar OKRs:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Criar OKR\napp.post('/api/okrs', async (req, res) => {\n  try {\n    const { employee_id, department_id, title, description, objective, key_results, priority, start_date, target_date } = req.body;\n    \n    console.log('🎯 Criando novo OKR:', title);\n    \n    // Buscar primeiro funcionário para usar como criador (simplificado)\n    const creatorResult = await query(`SELECT id FROM employees WHERE is_active = true LIMIT 1`);\n    const created_by = creatorResult.rows[0]?.id;\n    \n    const result = await query(`\n      INSERT INTO okrs (employee_id, department_id, title, description, objective, key_results, priority, start_date, target_date, created_by)\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\n      RETURNING *\n    `, [employee_id, department_id, title, description, objective, key_results, priority, start_date, target_date, created_by]);\n    \n    console.log('✅ OKR criado:', title);\n    res.json({ success: true, data: result.rows[0] });\n  } catch (error) {\n    console.error('❌ Erro ao criar OKR:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Listar PDIs\napp.get('/api/development-plans', async (req, res) => {\n  try {\n    console.log('📚 Buscando Planos de Desenvolvimento...');\n    \n    const result = await query(`\n      SELECT dp.*,\n             emp.name as employee_name,\n             emp.position as employee_position,\n             mentor.name as mentor_name,\n             creator.name as created_by_name\n      FROM development_plans dp\n      LEFT JOIN employees emp ON dp.employee_id = emp.id\n      LEFT JOIN employees mentor ON dp.mentor_id = mentor.id\n      LEFT JOIN employees creator ON dp.created_by = creator.id\n      ORDER BY dp.created_at DESC\n    `);\n    \n    console.log('✅ Encontrados', result.rows.length, 'PDIs');\n    res.json({ success: true, data: result.rows });\n  } catch (error) {\n    console.error('❌ Erro ao buscar PDIs:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Criar PDI\napp.post('/api/development-plans', async (req, res) => {\n  try {\n    const { employee_id, title, description, development_areas, actions, timeline, budget_allocated, start_date, target_date, mentor_id } = req.body;\n    \n    console.log('📚 Criando novo PDI:', title);\n    \n    // Buscar primeiro funcionário para usar como criador (simplificado)\n    const creatorResult = await query(`SELECT id FROM employees WHERE is_active = true LIMIT 1`);\n    const created_by = creatorResult.rows[0]?.id;\n    \n    const result = await query(`\n      INSERT INTO development_plans (employee_id, title, description, development_areas, actions, timeline, budget_allocated, start_date, target_date, mentor_id, created_by)\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\n      RETURNING *\n    `, [employee_id, title, description, development_areas, actions, timeline, budget_allocated, start_date, target_date, mentor_id, created_by]);\n    \n    console.log('✅ PDI criado:', title);\n    res.json({ success: true, data: result.rows[0] });\n  } catch (error) {\n    console.error('❌ Erro ao criar PDI:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Listar competências\napp.get('/api/competencies', async (req, res) => {\n  try {\n    console.log('⭐ Buscando competências...');\n    \n    const result = await query(`\n      SELECT * FROM competencies \n      WHERE is_active = true\n      ORDER BY category, name\n    `);\n    \n    console.log('✅ Encontradas', result.rows.length, 'competências');\n    res.json({ success: true, data: result.rows });\n  } catch (error) {\n    console.error('❌ Erro ao buscar competências:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Atualizar progresso de OKR\napp.put('/api/okrs/:id/progress', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { progress_percentage, status } = req.body;\n    \n    console.log('🔄 Atualizando progresso do OKR:', id);\n    \n    const result = await query(`\n      UPDATE okrs \n      SET progress_percentage = $1, \n          status = $2,\n          completed_date = CASE WHEN $2 = 'completed' THEN CURRENT_DATE ELSE NULL END,\n          updated_at = CURRENT_TIMESTAMP\n      WHERE id = $3\n      RETURNING *\n    `, [progress_percentage, status, id]);\n    \n    if (result.rows.length === 0) {\n      return res.status(404).json({ success: false, error: 'OKR não encontrado' });\n    }\n    \n    console.log('✅ Progresso atualizado');\n    res.json({ success: true, data: result.rows[0] });\n  } catch (error) {\n    console.error('❌ Erro ao atualizar progresso:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Atualizar progresso de PDI\napp.put('/api/development-plans/:id/progress', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { progress_percentage, status, budget_used } = req.body;\n    \n    console.log('🔄 Atualizando progresso do PDI:', id);\n    \n    const result = await query(`\n      UPDATE development_plans \n      SET progress_percentage = $1, \n          status = $2,\n          budget_used = $3,\n          completed_date = CASE WHEN $2 = 'completed' THEN CURRENT_DATE ELSE NULL END,\n          updated_at = CURRENT_TIMESTAMP\n      WHERE id = $4\n      RETURNING *\n    `, [progress_percentage, status, budget_used, id]);\n    \n    if (result.rows.length === 0) {\n      return res.status(404).json({ success: false, error: 'PDI não encontrado' });\n    }\n    \n    console.log('✅ Progresso do PDI atualizado');\n    res.json({ success: true, data: result.rows[0] });\n  } catch (error) {\n    console.error('❌ Erro ao atualizar progresso do PDI:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// ====== SISTEMA DE PESQUISAS ======\n\n// Listar pesquisas\napp.get('/api/surveys', async (req, res) => {\n  try {\n    console.log('📋 Buscando pesquisas...');\n    \n    const result = await query(`\n      SELECT s.*, \n             e.name as created_by_name,\n             COUNT(sr.id) as total_responses,\n             COUNT(CASE WHEN sr.is_complete = true THEN 1 END) as completed_responses\n      FROM surveys s\n      LEFT JOIN employees e ON s.created_by = e.id\n      LEFT JOIN survey_responses sr ON s.id = sr.survey_id\n      GROUP BY s.id, e.name\n      ORDER BY s.created_at DESC\n    `);\n    \n    console.log('✅ Encontradas', result.rows.length, 'pesquisas');\n    res.json({ success: true, data: result.rows });\n  } catch (error) {\n    console.error('❌ Erro ao buscar pesquisas:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Criar nova pesquisa\napp.post('/api/surveys', async (req, res) => {\n  try {\n    const { title, description, survey_type, is_anonymous, instructions, thank_you_message, end_date, questions } = req.body;\n    \n    console.log('➕ Criando nova pesquisa:', title);\n    \n    // Buscar primeiro funcionário para usar como criador (simplificado)\n    const creatorResult = await query(`SELECT id FROM employees WHERE is_active = true LIMIT 1`);\n    const created_by = creatorResult.rows[0]?.id;\n    \n    // Criar pesquisa\n    const surveyResult = await query(`\n      INSERT INTO surveys (title, description, survey_type, is_anonymous, instructions, thank_you_message, end_date, created_by)\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n      RETURNING *\n    `, [title, description, survey_type, is_anonymous, instructions, thank_you_message, end_date, created_by]);\n    \n    const survey = surveyResult.rows[0];\n    \n    // Inserir perguntas se fornecidas\n    if (questions && questions.length > 0) {\n      for (let i = 0; i < questions.length; i++) {\n        const question = questions[i];\n        await query(`\n          INSERT INTO survey_questions \n          (survey_id, question_text, question_type, question_order, is_required, options, scale_min, scale_max, scale_labels)\n          VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\n        `, [\n          survey.id,\n          question.question_text,\n          question.question_type,\n          i + 1,\n          question.is_required || true,\n          question.options ? JSON.stringify(question.options) : null,\n          question.scale_min || null,\n          question.scale_max || null,\n          question.scale_labels ? JSON.stringify(question.scale_labels) : null\n        ]);\n      }\n    }\n    \n    console.log('✅ Pesquisa criada:', title);\n    res.json({ success: true, data: survey });\n  } catch (error) {\n    console.error('❌ Erro ao criar pesquisa:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Buscar pesquisa com perguntas\napp.get('/api/surveys/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    console.log('🔍 Buscando pesquisa:', id);\n    \n    // Buscar pesquisa\n    const surveyResult = await query(`\n      SELECT s.*, e.name as created_by_name\n      FROM surveys s\n      LEFT JOIN employees e ON s.created_by = e.id\n      WHERE s.id = $1\n    `, [id]);\n    \n    if (surveyResult.rows.length === 0) {\n      return res.status(404).json({ success: false, error: 'Pesquisa não encontrada' });\n    }\n    \n    // Buscar perguntas\n    const questionsResult = await query(`\n      SELECT * FROM survey_questions \n      WHERE survey_id = $1 \n      ORDER BY question_order\n    `, [id]);\n    \n    const survey = surveyResult.rows[0];\n    survey.questions = questionsResult.rows;\n    \n    console.log('✅ Pesquisa encontrada com', questionsResult.rows.length, 'perguntas');\n    res.json({ success: true, data: survey });\n  } catch (error) {\n    console.error('❌ Erro ao buscar pesquisa:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Gerar link público da pesquisa\napp.get('/api/surveys/:id/public-link', async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    console.log('🔗 Gerando link público para pesquisa:', id);\n    \n    // Verificar se pesquisa existe e está ativa\n    const surveyResult = await query(`\n      SELECT id, title, is_active FROM surveys WHERE id = $1\n    `, [id]);\n    \n    if (surveyResult.rows.length === 0) {\n      return res.status(404).json({ success: false, error: 'Pesquisa não encontrada' });\n    }\n    \n    const survey = surveyResult.rows[0];\n    if (!survey.is_active) {\n      return res.status(400).json({ success: false, error: 'Pesquisa não está ativa' });\n    }\n    \n    const baseUrl = req.protocol + '://' + req.get('host');\n    const publicLink = `${baseUrl}/survey/${id}`;\n    \n    // Gerar QR Code\n    const surveyUrl = publicLink;\n    const qrCodeSVG = generateSimpleQRCode(surveyUrl);\n    const base64SVG = Buffer.from(qrCodeSVG).toString('base64');\n    const qrCodeDataURI = `data:image/svg+xml;base64,${base64SVG}`;\n    \n    console.log('✅ Link público gerado:', publicLink);\n    res.json({ \n      success: true, \n      data: {\n        survey_id: id,\n        survey_title: survey.title,\n        public_link: publicLink,\n        qr_code_url: qrCodeDataURI\n      }\n    });\n  } catch (error) {\n    console.error('❌ Erro ao gerar link público:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Página pública da pesquisa\napp.get('/survey/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    console.log('📋 Acessando pesquisa pública:', id);\n    \n    // Buscar pesquisa com perguntas\n    const surveyResult = await query(`\n      SELECT s.*, e.name as created_by_name\n      FROM surveys s\n      LEFT JOIN employees e ON s.created_by = e.id\n      WHERE s.id = $1 AND s.is_active = true\n    `, [id]);\n    \n    if (surveyResult.rows.length === 0) {\n      return res.status(404).send(`\n        <!DOCTYPE html>\n        <html lang=\"pt-BR\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>Pesquisa não encontrada - Thermas RH Pro</title>\n            <style>\n                body { font-family: Arial, sans-serif; text-align: center; padding: 2rem; background: #f8f9fa; }\n                .container { max-width: 600px; margin: 0 auto; background: white; padding: 2rem; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n                h1 { color: #dc3545; }\n            </style>\n        </head>\n        <body>\n            <div class=\"container\">\n                <h1>❌ Pesquisa não encontrada</h1>\n                <p>A pesquisa que você está procurando não foi encontrada ou não está mais ativa.</p>\n                <p>Verifique o link e tente novamente.</p>\n            </div>\n        </body>\n        </html>\n      `);\n    }\n    \n    // Buscar perguntas\n    const questionsResult = await query(`\n      SELECT * FROM survey_questions \n      WHERE survey_id = $1 \n      ORDER BY question_order\n    `, [id]);\n    \n    const survey = surveyResult.rows[0];\n    const questions = questionsResult.rows;\n    \n    // Gerar HTML da pesquisa pública\n    const publicSurveyHTML = generatePublicSurveyHTML(survey, questions);\n    res.send(publicSurveyHTML);\n    \n  } catch (error) {\n    console.error('❌ Erro ao acessar pesquisa pública:', error);\n    res.status(500).send('Erro interno do servidor');\n  }\n});\n\n// Gerar QR Code da pesquisa\napp.get('/api/surveys/:id/qr-code', async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    console.log('📱 Gerando QR Code para pesquisa:', id);\n    \n    const baseUrl = req.protocol + '://' + req.get('host');\n    const surveyUrl = `${baseUrl}/survey/${id}`;\n    \n    // Gerar QR Code SVG simples\n    const qrCodeSVG = generateSimpleQRCode(surveyUrl);\n    \n    // Converter para base64 data URI para melhor compatibilidade\n    const base64SVG = Buffer.from(qrCodeSVG).toString('base64');\n    const dataURI = `data:image/svg+xml;base64,${base64SVG}`;\n    \n    // Retornar como JSON com data URI\n    res.json({\n      success: true,\n      data: {\n        qr_code_data_uri: dataURI,\n        qr_code_svg: qrCodeSVG\n      }\n    });\n    \n  } catch (error) {\n    console.error('❌ Erro ao gerar QR Code:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Submeter resposta da pesquisa\napp.post('/api/surveys/:id/responses', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { responses, employee_id, completion_time, session_id } = req.body;\n    \n    console.log('💬 Submetendo resposta para pesquisa:', id);\n    \n    // Verificar se a pesquisa existe e está ativa\n    const surveyCheck = await query(`\n      SELECT is_anonymous, end_date FROM surveys \n      WHERE id = $1 AND is_active = true\n    `, [id]);\n    \n    if (surveyCheck.rows.length === 0) {\n      return res.status(404).json({ success: false, error: 'Pesquisa não encontrada ou inativa' });\n    }\n    \n    const survey = surveyCheck.rows[0];\n    \n    // Verificar se a pesquisa ainda está no prazo\n    if (survey.end_date && new Date(survey.end_date) < new Date()) {\n      return res.status(400).json({ success: false, error: 'Pesquisa já foi encerrada' });\n    }\n    \n    // Para pesquisas não anônimas, verificar se o funcionário já respondeu\n    if (!survey.is_anonymous && employee_id) {\n      const existingResponse = await query(`\n        SELECT id FROM survey_responses \n        WHERE survey_id = $1 AND employee_id = $2\n      `, [id, employee_id]);\n      \n      if (existingResponse.rows.length > 0) {\n        return res.status(400).json({ success: false, error: 'Você já respondeu esta pesquisa' });\n      }\n    }\n    \n    // Inserir resposta\n    const responseResult = await query(`\n      INSERT INTO survey_responses \n      (survey_id, employee_id, response_data, completion_time, session_id, ip_address)\n      VALUES ($1, $2, $3, $4, $5, $6)\n      RETURNING *\n    `, [\n      id,\n      survey.is_anonymous ? null : employee_id,\n      JSON.stringify(responses),\n      completion_time,\n      session_id,\n      req.ip\n    ]);\n    \n    // Atualizar status do convite se existir\n    if (!survey.is_anonymous && employee_id) {\n      await query(`\n        UPDATE survey_invitations \n        SET status = 'completed', responded_at = CURRENT_TIMESTAMP\n        WHERE survey_id = $1 AND employee_id = $2\n      `, [id, employee_id]);\n    }\n    \n    console.log('✅ Resposta submetida com sucesso');\n    res.json({ \n      success: true, \n      message: 'Resposta submetida com sucesso',\n      data: responseResult.rows[0] \n    });\n  } catch (error) {\n    console.error('❌ Erro ao submeter resposta:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Buscar respostas de uma pesquisa (para relatórios)\napp.get('/api/surveys/:id/responses', async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    console.log('📊 Buscando respostas da pesquisa:', id);\n    \n    const result = await query(`\n      SELECT sr.*, \n             e.name as employee_name,\n             e.position as employee_position,\n             e.department_id\n      FROM survey_responses sr\n      LEFT JOIN employees e ON sr.employee_id = e.id\n      WHERE sr.survey_id = $1\n      ORDER BY sr.submitted_at DESC\n    `, [id]);\n    \n    console.log('✅ Encontradas', result.rows.length, 'respostas');\n    res.json({ success: true, data: result.rows });\n  } catch (error) {\n    console.error('❌ Erro ao buscar respostas:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Ativar/Desativar pesquisa\napp.put('/api/surveys/:id/toggle', async (req, res) => {\n  try {\n    const { id } = req.params;\n    \n    console.log('🔄 Alterando status da pesquisa:', id);\n    \n    const result = await query(`\n      UPDATE surveys \n      SET is_active = NOT is_active, updated_at = CURRENT_TIMESTAMP\n      WHERE id = $1\n      RETURNING *\n    `, [id]);\n    \n    if (result.rows.length === 0) {\n      return res.status(404).json({ success: false, error: 'Pesquisa não encontrada' });\n    }\n    \n    const action = result.rows[0].is_active ? 'ativada' : 'desativada';\n    console.log(`✅ Pesquisa ${action}:`, result.rows[0].title);\n    \n    res.json({ \n      success: true, \n      message: `Pesquisa ${action} com sucesso`,\n      data: result.rows[0] \n    });\n  } catch (error) {\n    console.error('❌ Erro ao alterar status da pesquisa:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Utility functions for surveys\nfunction generatePublicSurveyHTML(survey, questions) {\n  const questionsHTML = questions.map((question, index) => {\n    let inputHTML = '';\n    const name = `question_${question.id}`;\n    \n    switch (question.question_type) {\n      case 'text':\n        inputHTML = `<textarea name=\"${name}\" rows=\"3\" style=\"width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 4px; font-size: 1rem; resize: vertical;\" ${question.is_required ? 'required' : ''}></textarea>`;\n        break;\n        \n      case 'yes_no':\n        inputHTML = `\n          <div style=\"display: flex; gap: 1rem; flex-wrap: wrap;\">\n            <label style=\"display: flex; align-items: center; font-weight: normal;\">\n              <input type=\"radio\" name=\"${name}\" value=\"yes\" ${question.is_required ? 'required' : ''} style=\"margin-right: 0.5rem;\">\n              Sim\n            </label>\n            <label style=\"display: flex; align-items: center; font-weight: normal;\">\n              <input type=\"radio\" name=\"${name}\" value=\"no\" ${question.is_required ? 'required' : ''} style=\"margin-right: 0.5rem;\">\n              Não\n            </label>\n          </div>\n        `;\n        break;\n        \n      case 'single_choice':\n        if (question.options) {\n          const options = JSON.parse(question.options);\n          inputHTML = options.map(option => `\n            <label style=\"display: block; margin-bottom: 0.5rem; font-weight: normal;\">\n              <input type=\"radio\" name=\"${name}\" value=\"${option}\" ${question.is_required ? 'required' : ''} style=\"margin-right: 0.5rem;\">\n              ${option}\n            </label>\n          `).join('');\n        } else {\n          inputHTML = '<p style=\"color: #dc3545;\">Opções não configuradas para esta pergunta.</p>';\n        }\n        break;\n        \n      case 'scale':\n        const min = question.scale_min || 1;\n        const max = question.scale_max || 10;\n        const labels = question.scale_labels ? JSON.parse(question.scale_labels) : {};\n        \n        inputHTML = `\n          <div style=\"margin-bottom: 1rem;\">\n            <div style=\"display: flex; align-items: center; justify-content: space-between; margin-bottom: 1rem;\">\n              <span style=\"font-size: 0.9rem; color: #666;\">${labels[min] || min}</span>\n              <span style=\"font-size: 0.9rem; color: #666;\">${labels[max] || max}</span>\n            </div>\n            <div style=\"display: flex; justify-content: space-between; gap: 0.5rem; flex-wrap: wrap;\">\n        `;\n        \n        for (let i = min; i <= max; i++) {\n          inputHTML += `\n            <label style=\"text-align: center; font-weight: normal; flex: 1; min-width: 40px;\">\n              <input type=\"radio\" name=\"${name}\" value=\"${i}\" ${question.is_required ? 'required' : ''} style=\"display: block; margin: 0 auto 0.25rem;\">\n              <span style=\"font-size: 0.8rem;\">${i}</span>\n            </label>\n          `;\n        }\n        \n        inputHTML += '</div></div>';\n        break;\n        \n      default:\n        inputHTML = `<input type=\"text\" name=\"${name}\" style=\"width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 4px; font-size: 1rem;\" ${question.is_required ? 'required' : ''}>`;\n    }\n    \n    return `\n      <div style=\"margin-bottom: 2rem; padding: 1.5rem; border: 1px solid #e9ecef; border-radius: 6px; background: #f8f9fa;\">\n        <label style=\"display: block; margin-bottom: 1rem; font-weight: bold; color: #333; font-size: 1.1rem;\">\n          ${index + 1}. ${question.question_text}\n          ${question.is_required ? '<span style=\"color: #dc3545;\">*</span>' : ''}\n        </label>\n        ${inputHTML}\n      </div>\n    `;\n  }).join('');\n  \n  return `\n    <!DOCTYPE html>\n    <html lang=\"pt-BR\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>${survey.title} - Thermas RH Pro</title>\n        <style>\n            body {\n                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n                line-height: 1.6;\n                margin: 0;\n                padding: 1rem;\n                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n                min-height: 100vh;\n            }\n            .container {\n                max-width: 800px;\n                margin: 0 auto;\n                background: white;\n                padding: 2rem;\n                border-radius: 12px;\n                box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n            }\n            .header {\n                text-align: center;\n                margin-bottom: 2rem;\n                padding-bottom: 1rem;\n                border-bottom: 3px solid #007bff;\n            }\n            .header h1 {\n                color: #333;\n                margin: 0 0 0.5rem 0;\n                font-size: 1.8rem;\n            }\n            .header p {\n                color: #666;\n                margin: 0;\n                font-size: 1rem;\n            }\n            .instructions {\n                background: #e7f3ff;\n                padding: 1.5rem;\n                border-radius: 8px;\n                border-left: 4px solid #007bff;\n                margin-bottom: 2rem;\n            }\n            .anonymous-badge {\n                display: inline-block;\n                background: #17a2b8;\n                color: white;\n                padding: 0.25rem 0.75rem;\n                border-radius: 20px;\n                font-size: 0.8rem;\n                margin-top: 0.5rem;\n            }\n            .btn {\n                background: #007bff;\n                color: white;\n                padding: 1rem 2rem;\n                border: none;\n                border-radius: 6px;\n                cursor: pointer;\n                font-size: 1rem;\n                transition: all 0.3s ease;\n                margin-right: 0.5rem;\n            }\n            .btn:hover {\n                background: #0056b3;\n                transform: translateY(-2px);\n            }\n            .btn-secondary {\n                background: #6c757d;\n            }\n            .btn-secondary:hover {\n                background: #545b62;\n            }\n            .loading {\n                display: none;\n                text-align: center;\n                padding: 2rem;\n                color: #007bff;\n            }\n            .spinner {\n                border: 3px solid #f3f3f3;\n                border-top: 3px solid #007bff;\n                border-radius: 50%;\n                width: 30px;\n                height: 30px;\n                animation: spin 1s linear infinite;\n                margin: 0 auto 1rem;\n            }\n            @keyframes spin {\n                0% { transform: rotate(0deg); }\n                100% { transform: rotate(360deg); }\n            }\n            .success-message {\n                display: none;\n                text-align: center;\n                padding: 2rem;\n                background: #d4edda;\n                border: 1px solid #c3e6cb;\n                border-radius: 8px;\n                color: #155724;\n                margin-top: 2rem;\n            }\n            .error-message {\n                display: none;\n                text-align: center;\n                padding: 2rem;\n                background: #f8d7da;\n                border: 1px solid #f5c6cb;\n                border-radius: 8px;\n                color: #721c24;\n                margin-top: 2rem;\n            }\n            @media (max-width: 768px) {\n                .container { padding: 1rem; }\n                .header h1 { font-size: 1.5rem; }\n                body { padding: 0.5rem; }\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"header\">\n                <h1>${survey.title}</h1>\n                <p>${survey.description || ''}</p>\n                ${survey.is_anonymous ? '<div class=\"anonymous-badge\">📋 Pesquisa Anônima</div>' : ''}\n            </div>\n            \n            ${survey.instructions ? `\n            <div class=\"instructions\">\n                <strong>📋 Instruções:</strong>\n                <p style=\"margin: 0.5rem 0 0;\">${survey.instructions}</p>\n            </div>\n            ` : ''}\n            \n            <form id=\"surveyForm\">\n                ${questionsHTML}\n                \n                <div style=\"text-align: center; margin-top: 2rem; padding-top: 2rem; border-top: 2px solid #e9ecef;\">\n                    <button type=\"submit\" class=\"btn\">📤 Enviar Respostas</button>\n                </div>\n            </form>\n            \n            <div class=\"loading\" id=\"loading\">\n                <div class=\"spinner\"></div>\n                <p>Enviando suas respostas...</p>\n            </div>\n            \n            <div class=\"success-message\" id=\"successMessage\">\n                <h3>✅ Obrigado pela sua participação!</h3>\n                <p>${survey.thank_you_message || 'Suas respostas foram registradas com sucesso.'}</p>\n            </div>\n            \n            <div class=\"error-message\" id=\"errorMessage\">\n                <h3>❌ Erro ao enviar respostas</h3>\n                <p id=\"errorText\">Ocorreu um erro. Tente novamente em alguns instantes.</p>\n                <button type=\"button\" class=\"btn\" onclick=\"location.reload()\">🔄 Tentar Novamente</button>\n            </div>\n        </div>\n        \n        <script>\n            document.getElementById('surveyForm').addEventListener('submit', async function(e) {\n                e.preventDefault();\n                \n                const form = e.target;\n                const formData = new FormData(form);\n                const responses = {};\n                \n                // Collect form data\n                for (let [key, value] of formData.entries()) {\n                    responses[key] = value;\n                }\n                \n                // Show loading\n                form.style.display = 'none';\n                document.getElementById('loading').style.display = 'block';\n                \n                try {\n                    const response = await fetch('/api/surveys/${survey.id}/responses', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            responses: responses,\n                            employee_id: null,\n                            completion_time: Date.now(),\n                            session_id: Math.random().toString(36).substring(2, 15)\n                        })\n                    });\n                    \n                    const result = await response.json();\n                    \n                    document.getElementById('loading').style.display = 'none';\n                    \n                    if (result.success) {\n                        document.getElementById('successMessage').style.display = 'block';\n                    } else {\n                        document.getElementById('errorText').textContent = result.error || 'Erro desconhecido';\n                        document.getElementById('errorMessage').style.display = 'block';\n                    }\n                    \n                } catch (error) {\n                    console.error('Erro ao enviar:', error);\n                    document.getElementById('loading').style.display = 'none';\n                    document.getElementById('errorText').textContent = 'Erro de conexão. Verifique sua internet.';\n                    document.getElementById('errorMessage').style.display = 'block';\n                }\n            });\n        </script>\n    </body>\n    </html>\n  `;\n}\n\nfunction generateSimpleQRCode(url) {\n  // Gerar QR Code SVG simples para URL\n  const size = 200;\n  const modules = 25; // Grid 25x25 para QR code simples\n  const moduleSize = size / modules;\n  \n  // Dados fictícios do QR code (normalmente seria gerado por biblioteca específica)\n  // Aqui criamos um padrão visual que se parece com QR code\n  let qrPattern = [];\n  for (let i = 0; i < modules; i++) {\n    qrPattern[i] = [];\n    for (let j = 0; j < modules; j++) {\n      // Criar padrão que se parece com QR code\n      const hash = (i * modules + j + url.length) % 7;\n      qrPattern[i][j] = hash < 3;\n    }\n  }\n  \n  // Adicionar padrões de positioning (cantos)\n  const positionPatterns = [\n    [0, 0], [0, modules-7], [modules-7, 0]\n  ];\n  \n  positionPatterns.forEach(([startX, startY]) => {\n    for (let i = 0; i < 7; i++) {\n      for (let j = 0; j < 7; j++) {\n        if (startX + i < modules && startY + j < modules) {\n          const isOuter = i === 0 || i === 6 || j === 0 || j === 6;\n          const isInner = (i >= 2 && i <= 4) && (j >= 2 && j <= 4);\n          qrPattern[startX + i][startY + j] = isOuter || isInner;\n        }\n      }\n    }\n  });\n  \n  let svgContent = '';\n  for (let i = 0; i < modules; i++) {\n    for (let j = 0; j < modules; j++) {\n      if (qrPattern[i][j]) {\n        svgContent += `<rect x=\"${j * moduleSize}\" y=\"${i * moduleSize}\" width=\"${moduleSize}\" height=\"${moduleSize}\" fill=\"black\"/>`;\n      }\n    }\n  }\n  \n  return `\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${size}\" height=\"${size + 40}\" viewBox=\"0 0 ${size} ${size + 40}\">\n      <rect width=\"${size}\" height=\"${size + 40}\" fill=\"white\"/>\n      ${svgContent}\n      <text x=\"${size/2}\" y=\"${size + 20}\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"12\" fill=\"black\">\n        Acesse a pesquisa\n      </text>\n    </svg>\n  `;\n}\n\n// Add question to survey\napp.post('/api/surveys/:surveyId/questions', async (req, res) => {\n  try {\n    const { surveyId } = req.params;\n    const { question_text, question_type, is_required, options, scale_min, scale_max, scale_labels } = req.body;\n    \n    console.log('➕ Adicionando pergunta à pesquisa:', surveyId);\n    \n    // Get next question order\n    const orderResult = await query(\n      'SELECT COALESCE(MAX(question_order), 0) + 1 as next_order FROM survey_questions WHERE survey_id = $1',\n      [surveyId]\n    );\n    const nextOrder = orderResult.rows[0].next_order;\n    \n    // Prepare question data\n    let questionOptions = null;\n    let questionScaleLabels = null;\n    \n    if (question_type === 'single_choice' && options) {\n      questionOptions = JSON.stringify(options);\n    }\n    \n    if (question_type === 'scale' && scale_labels) {\n      questionScaleLabels = JSON.stringify(scale_labels);\n    }\n    \n    const result = await query(\n      `INSERT INTO survey_questions \n       (survey_id, question_text, question_type, question_order, is_required, options, scale_min, scale_max, scale_labels)\n       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\n       RETURNING *`,\n      [\n        surveyId,\n        question_text,\n        question_type,\n        nextOrder,\n        is_required || false,\n        questionOptions,\n        scale_min || null,\n        scale_max || null,\n        questionScaleLabels\n      ]\n    );\n    \n    console.log('✅ Pergunta adicionada:', result.rows[0].question_text);\n    \n    res.json({\n      success: true,\n      data: result.rows[0],\n      message: 'Pergunta adicionada com sucesso'\n    });\n    \n  } catch (error) {\n    console.error('❌ Erro ao adicionar pergunta:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Delete question from survey\napp.delete('/api/surveys/:surveyId/questions/:questionId', async (req, res) => {\n  try {\n    const { surveyId, questionId } = req.params;\n    \n    console.log('🗑️ Excluindo pergunta:', questionId, 'da pesquisa:', surveyId);\n    \n    // Check if question exists\n    const checkResult = await query(\n      'SELECT * FROM survey_questions WHERE id = $1 AND survey_id = $2',\n      [questionId, surveyId]\n    );\n    \n    if (checkResult.rows.length === 0) {\n      return res.status(404).json({ success: false, error: 'Pergunta não encontrada' });\n    }\n    \n    // Delete the question\n    await query(\n      'DELETE FROM survey_questions WHERE id = $1 AND survey_id = $2',\n      [questionId, surveyId]\n    );\n    \n    console.log('✅ Pergunta excluída com sucesso');\n    \n    res.json({\n      success: true,\n      message: 'Pergunta excluída com sucesso'\n    });\n    \n  } catch (error) {\n    console.error('❌ Erro ao excluir pergunta:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Delete entire survey\napp.delete('/api/surveys/:surveyId', async (req, res) => {\n  try {\n    const { surveyId } = req.params;\n    \n    console.log('🗑️ Excluindo pesquisa completa:', surveyId);\n    \n    // Check if survey exists\n    const checkResult = await query(\n      'SELECT title FROM surveys WHERE id = $1',\n      [surveyId]\n    );\n    \n    if (checkResult.rows.length === 0) {\n      return res.status(404).json({ success: false, error: 'Pesquisa não encontrada' });\n    }\n    \n    const surveyTitle = checkResult.rows[0].title;\n    \n    // Delete in order: responses, questions, then survey\n    await query('DELETE FROM survey_responses WHERE survey_id = $1', [surveyId]);\n    console.log('✅ Respostas da pesquisa excluídas');\n    \n    await query('DELETE FROM survey_questions WHERE survey_id = $1', [surveyId]);\n    console.log('✅ Perguntas da pesquisa excluídas');\n    \n    await query('DELETE FROM surveys WHERE id = $1', [surveyId]);\n    console.log('✅ Pesquisa excluída:', surveyTitle);\n    \n    res.json({\n      success: true,\n      message: 'Pesquisa excluída com sucesso'\n    });\n    \n  } catch (error) {\n    console.error('❌ Erro ao excluir pesquisa:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Get survey results\napp.get('/api/surveys/:surveyId/results', async (req, res) => {\n  try {\n    const { surveyId } = req.params;\n    \n    console.log('📊 Buscando resultados da pesquisa:', surveyId);\n    \n    // Get survey with questions\n    const surveyResult = await query(\n      `\n      SELECT s.*, e.name as created_by_name\n      FROM surveys s\n      LEFT JOIN employees e ON s.created_by = e.id\n      WHERE s.id = $1\n      `,\n      [surveyId]\n    );\n    \n    if (surveyResult.rows.length === 0) {\n      return res.status(404).json({ success: false, error: 'Pesquisa não encontrada' });\n    }\n    \n    const survey = surveyResult.rows[0];\n    \n    // Get questions\n    const questionsResult = await query(\n      `\n      SELECT * FROM survey_questions \n      WHERE survey_id = $1 \n      ORDER BY question_order\n      `,\n      [surveyId]\n    );\n    \n    survey.questions = questionsResult.rows;\n    \n    // Get responses\n    const responsesResult = await query(\n      `\n      SELECT sr.*, e.name as employee_name\n      FROM survey_responses sr\n      LEFT JOIN employees e ON sr.employee_id = e.id\n      WHERE sr.survey_id = $1\n      ORDER BY sr.created_at DESC\n      `,\n      [surveyId]\n    );\n    \n    // Get statistics\n    const statsResult = await query(\n      `\n      SELECT \n        COUNT(*) as total_responses,\n        COUNT(CASE WHEN is_complete = true THEN 1 END) as completed_responses\n      FROM survey_responses\n      WHERE survey_id = $1\n      `,\n      [surveyId]\n    );\n    \n    const statistics = statsResult.rows[0] || { total_responses: 0, completed_responses: 0 };\n    \n    console.log(`✅ Resultados encontrados: ${responsesResult.rows.length} respostas`);\n    \n    res.json({\n      success: true,\n      data: {\n        survey,\n        responses: responsesResult.rows,\n        statistics\n      }\n    });\n    \n  } catch (error) {\n    console.error('❌ Erro ao buscar resultados:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Get dashboard analytics data\napp.get('/api/dashboard/analytics', authenticateToken, async (req, res) => {\n  try {\n    console.log('📊 Buscando dados do dashboard...');\n    \n    // Get total active employees\n    const employeesResult = await query(`\n      SELECT COUNT(*) as total_employees\n      FROM employees\n      WHERE is_active = true\n    `);\n    \n    // Get new hires (last 30 days)\n    const newHiresResult = await query(`\n      SELECT COUNT(*) as new_hires\n      FROM employees\n      WHERE hire_date >= CURRENT_DATE - INTERVAL '30 days'\n        AND is_active = true\n    `);\n    \n    // Get pending approvals\n    const pendingApprovalsResult = await query(`\n      SELECT COUNT(*) as pending_approvals\n      FROM requests\n      WHERE status = 'pendente'\n    `);\n    \n    // Get average hiring time (days between created_at and hire_date for recent hires)\n    const avgHireTimeResult = await query(`\n      SELECT AVG(\n        EXTRACT(EPOCH FROM (hire_date - created_at)) / 86400\n      )::INTEGER as avg_hire_days\n      FROM employees\n      WHERE hire_date >= CURRENT_DATE - INTERVAL '90 days'\n        AND created_at IS NOT NULL\n        AND hire_date IS NOT NULL\n    `);\n    \n    // Get department distribution\n    const departmentStatsResult = await query(`\n      SELECT d.name, COUNT(e.id) as employee_count\n      FROM departments d\n      LEFT JOIN employees e ON d.id = e.department_id AND e.is_active = true\n      GROUP BY d.id, d.name\n      ORDER BY employee_count DESC\n    `);\n    \n    const analytics = {\n      totalEmployees: parseInt(employeesResult.rows[0]?.total_employees || 0),\n      newHires: parseInt(newHiresResult.rows[0]?.new_hires || 0),\n      pendingRequests: parseInt(pendingApprovalsResult.rows[0]?.pending_approvals || 0),\n      avgTimeHire: parseInt(avgHireTimeResult.rows[0]?.avg_hire_days || 0),\n      departmentStats: departmentStatsResult.rows\n    };\n    \n    console.log('✅ Analytics encontrados:', analytics);\n    res.json({ success: true, data: analytics });\n    \n  } catch (error) {\n    console.error('❌ Erro ao buscar analytics:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Serve the main application (Thermas layout)\napp.get('/', (req, res) => {\n  res.sendFile(path.join(__dirname, '..', 'index.html'));\n});\n\n// Static file serving for specific routes  \napp.get('/funcionarios.html', (req, res) => {\n  res.sendFile(path.join(__dirname, '..', 'client', 'funcionarios.html'));\n});\n\n// Serve static files from root directory\napp.use(express.static(path.join(__dirname, '..')));\n\napp.listen(PORT, '0.0.0.0', () => {\n  console.log(`🚀 Servidor básico rodando na porta ${PORT}`);\n  console.log(`📱 Acesse: http://localhost:${PORT}`);\n});","size_bytes":90308},"server/index.js":{"content":"const express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\nconst compression = require('compression');\nconst rateLimit = require('express-rate-limit');\nconst path = require('path');\nrequire('dotenv').config();\n\n// Import routes\nconst authRoutes = require('./routes/auth');\nconst employeeRoutes = require('./routes/employees');\nconst requestRoutes = require('./routes/requests');\nconst departmentRoutes = require('./routes/departments');\nconst reportRoutes = require('./routes/reports');\nconst dashboardRoutes = require('./routes/dashboard');\n\n// Import middleware\nconst { authenticateToken } = require('./middleware/auth');\nconst errorHandler = require('./middleware/errorHandler');\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Trust proxy for production environment  \napp.set('trust proxy', 1);\n\n// Security middleware - Disable CSP for production compatibility\napp.use(helmet({\n  contentSecurityPolicy: false, // Disable CSP entirely for login to work\n}));\napp.use(cors({\n  origin: process.env.CLIENT_URL || true, // Allow all origins in production\n  credentials: true\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: 'Muitas tentativas, tente novamente mais tarde.'\n});\napp.use(limiter);\n\n// Body parsing middleware\napp.use(compression());\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true }));\n\n// Logging\napp.use(morgan('combined'));\n\n// Serve static files (for production)\napp.use(express.static('client/dist'));\napp.use(express.static('public')); // Serve logo and other static assets\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({ \n    status: 'OK', \n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n});\n\n// API Routes\napp.use('/api/auth', authRoutes);\napp.use('/api/employees', authenticateToken, employeeRoutes);\napp.use('/api/requests', authenticateToken, requestRoutes);\napp.use('/api/departments', authenticateToken, departmentRoutes);\napp.use('/api/reports', authenticateToken, reportRoutes);\napp.use('/api/dashboard', authenticateToken, dashboardRoutes);\n\n// Serve index.html for root route\napp.get('/', (req, res) => {\n  res.sendFile(path.join(__dirname, '../index.html'));\n});\n\n// Basic error handling\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({ error: 'Something went wrong!' });\n});\n\n// Initialize database with complete data\nasync function ensureBootstrapData() {\n  try {\n    const { query } = require('./database/connection');\n    \n    // Check if we have any admin users (indicator of empty database)\n    const adminCount = await query('SELECT COUNT(*) as count FROM users WHERE role = $1', ['admin']);\n    \n    if (parseInt(adminCount.rows[0].count) === 0) {\n      console.log('🔧 Database appears empty - running complete seed...');\n      \n      // Import and run the complete seed function\n      const { seedDatabase } = require('./database/seed');\n      await seedDatabase();\n      \n      // Additionally create the specific user requested\n      const bcrypt = require('bcryptjs');\n      const hashedPasswordJean = await bcrypt.hash('jean123', 10);\n      \n      try {\n        await query(`\n          INSERT INTO users (email, password_hash, name, role, is_admin, is_active)\n          VALUES ($1, $2, $3, $4, $5, $6)\n        `, ['jean.pessoa@hotelthermas.com.br', hashedPasswordJean, 'Jean Pessoa', 'admin', true, true]);\n        console.log('✅ Additional user created: jean.pessoa@hotelthermas.com.br');\n      } catch (userError) {\n        // User might already exist from seed\n        console.log('ℹ️ jean.pessoa@hotelthermas.com.br user already exists or created in seed');\n      }\n      \n      console.log('✅ Complete database initialization completed!');\n      console.log('📧 Login: jean.pessoa@hotelthermas.com.br / jean123');\n    } else {\n      console.log('ℹ️ Database already initialized with users');\n    }\n  } catch (error) {\n    console.log('⚠️ Bootstrap warning:', error.message);\n  }\n}\n\n// Start server\napp.listen(PORT, '0.0.0.0', async () => {\n  console.log(`🚀 Servidor rodando na porta ${PORT}`);\n  console.log(`📊 Dashboard: http://localhost:${PORT}`);\n  console.log(`🔗 API: http://localhost:${PORT}/api`);\n  console.log(`💾 Database: ${process.env.DATABASE_URL ? 'Conectado' : 'Não configurado'}`);\n  \n  // Initialize complete database after server starts\n  setTimeout(ensureBootstrapData, 2000);\n});\n\n// Graceful shutdown\nprocess.on('SIGTERM', () => {\n  console.log('📴 Desligando servidor...');\n  process.exit(0);\n});","size_bytes":4740},"server/simple-server.js":{"content":"const express = require('express');\nconst cors = require('cors');\nconst { query } = require('./database/connection');\nrequire('dotenv').config();\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Middleware\napp.use(cors());\napp.use(express.json());\napp.use(express.static('../'));\n\n// Health check\napp.get('/health', (req, res) => {\n  res.json({ status: 'OK', timestamp: new Date().toISOString() });\n});\n\n// API Routes\napp.get('/api/dashboard', async (req, res) => {\n  try {\n    // General stats\n    const activeEmployees = await query('SELECT COUNT(*) as count FROM employees WHERE is_active = true');\n    const activeDepartments = await query('SELECT COUNT(*) as count FROM departments WHERE is_active = true');\n    const pendingRequests = await query(\"SELECT COUNT(*) as count FROM requests WHERE status = 'pending'\");\n    const recentRequests = await query(\"SELECT COUNT(*) as count FROM requests WHERE created_at >= CURRENT_DATE - INTERVAL '30 days'\");\n\n    // Recent hires\n    const recentHires = await query(`\n      SELECT e.name, d.name as department_name, e.hire_date \n      FROM employees e \n      LEFT JOIN departments d ON e.department_id = d.id \n      WHERE e.hire_date >= CURRENT_DATE - INTERVAL '30 days' \n      ORDER BY e.hire_date DESC \n      LIMIT 5\n    `);\n\n    // Urgent requests\n    const urgentRequests = await query(`\n      SELECT r.title, e.name as employee_name, r.priority \n      FROM requests r \n      JOIN employees e ON r.employee_id = e.id \n      WHERE r.status = 'pending' AND r.priority IN ('urgent', 'high') \n      ORDER BY r.created_at DESC \n      LIMIT 5\n    `);\n\n    // Department stats\n    const departmentStats = await query(`\n      SELECT \n        d.name, \n        COUNT(e.id) as employee_count,\n        d.budget,\n        CASE \n          WHEN d.budget > 0 THEN (COUNT(e.id) * 5000.0 / d.budget * 100)::int\n          ELSE 0 \n        END as budget_usage\n      FROM departments d \n      LEFT JOIN employees e ON d.id = e.department_id AND e.is_active = true \n      WHERE d.is_active = true \n      GROUP BY d.id, d.name, d.budget \n      ORDER BY employee_count DESC\n    `);\n\n    const data = {\n      generalStats: {\n        active_employees: parseInt(activeEmployees.rows[0].count),\n        active_departments: parseInt(activeDepartments.rows[0].count),\n        pending_requests: parseInt(pendingRequests.rows[0].count),\n        recent_requests: parseInt(recentRequests.rows[0].count)\n      },\n      recentHires: recentHires.rows,\n      urgentRequests: urgentRequests.rows,\n      departmentStats: departmentStats.rows\n    };\n\n    res.json({ success: true, data });\n  } catch (error) {\n    console.error('Dashboard error:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Login endpoint (simplified)\napp.post('/api/auth/login', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    \n    // Simple auth check (in production, use proper bcrypt)\n    const user = await query('SELECT * FROM users WHERE email = $1 AND is_active = true', [email]);\n    \n    if (user.rows.length === 0) {\n      return res.status(401).json({ success: false, error: 'Credenciais inválidas' });\n    }\n\n    // In production: bcrypt.compare(password, user.rows[0].password_hash)\n    if ((email === 'admin@rhpro.com' && password === 'admin123') ||\n        (email === 'hr@rhpro.com' && password === 'hr123') ||\n        (email === 'manager@rhpro.com' && password === 'manager123')) {\n      \n      res.json({ \n        success: true, \n        user: {\n          id: user.rows[0].id,\n          email: user.rows[0].email,\n          name: user.rows[0].name,\n          role: user.rows[0].role\n        },\n        token: 'fake-jwt-token-for-demo'\n      });\n    } else {\n      res.status(401).json({ success: false, error: 'Senha incorreta' });\n    }\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Employees endpoint\napp.get('/api/employees', async (req, res) => {\n  try {\n    const employees = await query(`\n      SELECT \n        e.*, \n        d.name as department_name \n      FROM employees e \n      LEFT JOIN departments d ON e.department_id = d.id \n      WHERE e.is_active = true \n      ORDER BY e.name\n    `);\n    \n    res.json({ success: true, data: employees.rows });\n  } catch (error) {\n    console.error('Employees error:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Departments endpoint\napp.get('/api/departments', async (req, res) => {\n  try {\n    const departments = await query(`\n      SELECT \n        d.*,\n        COUNT(e.id) as employee_count\n      FROM departments d \n      LEFT JOIN employees e ON d.id = e.department_id AND e.is_active = true \n      WHERE d.is_active = true \n      GROUP BY d.id \n      ORDER BY d.name\n    `);\n    \n    res.json({ success: true, data: departments.rows });\n  } catch (error) {\n    console.error('Departments error:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Requests endpoint\napp.get('/api/requests', async (req, res) => {\n  try {\n    const requests = await query(`\n      SELECT \n        r.*,\n        e.name as employee_name,\n        rt.name as request_type_name,\n        u.name as approver_name\n      FROM requests r\n      JOIN employees e ON r.employee_id = e.id\n      JOIN request_types rt ON r.request_type_id = rt.id\n      LEFT JOIN users u ON r.approver_id = u.id\n      ORDER BY r.created_at DESC\n    `);\n    \n    res.json({ success: true, data: requests.rows });\n  } catch (error) {\n    console.error('Requests error:', error);\n    res.status(500).json({ success: false, error: 'Erro interno do servidor' });\n  }\n});\n\n// Catch all (serve main page)\napp.get('*', (req, res) => {\n  res.sendFile('index.html', { root: '../' });\n});\n\n// Start server\napp.listen(PORT, '0.0.0.0', () => {\n  console.log(`🚀 Servidor API rodando na porta ${PORT}`);\n  console.log(`📊 Dashboard: http://localhost:${PORT}`);\n  console.log(`🔗 API: http://localhost:${PORT}/api`);\n});\n\n// Graceful shutdown\nprocess.on('SIGTERM', () => {\n  console.log('📴 Desligando servidor...');\n  process.exit(0);\n});","size_bytes":6252},"client/src/App.jsx":{"content":"// import { Routes, Route } from 'react-router-dom'\n// import { useState, useEffect } from 'react'\n\nfunction App() {\n  return (\n    <div>\n      <div style={{backgroundColor: 'blue', color: 'white', padding: '20px', textAlign: 'center'}}>\n        <h1>🔥 TESTE BÁSICO - FUNCIONANDO!</h1>\n        <p>Se você vê isso, o React está funcionando</p>\n      </div>\n      <div style={{padding: '20px'}}>\n        <h2>Sistema RH Pro</h2>\n        <p>Teste de conectividade realizado com sucesso!</p>\n        <button onClick={() => alert('Clique funcionando!')}>Testar JavaScript</button>\n      </div>\n    </div>\n  )\n}\n\nexport default App","size_bytes":630},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  body {\n    @apply bg-gray-50 text-gray-900;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n}\n\n@layer components {\n  .btn {\n    @apply inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none;\n  }\n  \n  .btn-primary {\n    @apply bg-thermas-600 text-white hover:bg-thermas-700 focus:ring-thermas-500;\n  }\n  \n  .btn-secondary {\n    @apply bg-gray-100 text-gray-900 hover:bg-gray-200 focus:ring-gray-500;\n  }\n  \n  .btn-ghost {\n    @apply hover:bg-gray-100 hover:text-gray-900 focus:ring-gray-500;\n  }\n  \n  .input {\n    @apply flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-500 focus:outline-none focus:ring-2 focus:ring-thermas-500 focus:border-thermas-500 disabled:cursor-not-allowed disabled:opacity-50;\n  }\n  \n  .card {\n    @apply rounded-lg border border-gray-200 bg-white shadow-sm;\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  @apply bg-gray-100;\n}\n\n::-webkit-scrollbar-thumb {\n  @apply bg-gray-400 rounded-full;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  @apply bg-gray-500;\n}","size_bytes":1294},"client/src/main.jsx":{"content":"import React from 'react'\nimport ReactDOM from 'react-dom/client'\n// import { BrowserRouter } from 'react-router-dom'\n// import { Toaster } from 'react-hot-toast'\nimport App from './App.jsx'\n// import './index.css'\n\nconsole.log('🚀 main.jsx carregado!');\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)","size_bytes":376},"server/database/connection.js":{"content":"const { Pool } = require('pg');\nrequire('dotenv').config();\n\n// Database configuration\nconst dbConfig = {\n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,\n  max: 20, // Maximum number of connections\n  idleTimeoutMillis: 30000, // How long a client is allowed to remain idle\n  connectionTimeoutMillis: 10000, // Return an error after failing to connect for this long\n  statement_timeout: 30000, // Statement timeout in milliseconds\n  query_timeout: 30000, // Query timeout in milliseconds\n};\n\n// Create connection pool\nconst pool = new Pool(dbConfig);\n\n// Test connection on startup\npool.on('connect', () => {\n  console.log('✅ Nova conexão estabelecida com PostgreSQL');\n});\n\npool.on('error', (err) => {\n  console.error('❌ Erro inesperado no cliente PostgreSQL:', err);\n  process.exit(-1);\n});\n\n// Helper function to execute queries\nconst query = async (text, params) => {\n  const start = Date.now();\n  try {\n    const result = await pool.query(text, params);\n    const duration = Date.now() - start;\n    console.log('📊 Query executada:', { text, duration, rows: result.rowCount });\n    return result;\n  } catch (error) {\n    console.error('❌ Erro na query:', { text, error: error.message });\n    throw error;\n  }\n};\n\n// Helper function to get a client from the pool\nconst getClient = async () => {\n  return await pool.connect();\n};\n\n// Transaction helper\nconst transaction = async (callback) => {\n  const client = await pool.connect();\n  try {\n    await client.query('BEGIN');\n    const result = await callback(client);\n    await client.query('COMMIT');\n    return result;\n  } catch (error) {\n    await client.query('ROLLBACK');\n    throw error;\n  } finally {\n    client.release();\n  }\n};\n\n// Graceful shutdown\nprocess.on('SIGINT', async () => {\n  console.log('🔒 Fechando pool de conexões...');\n  await pool.end();\n  console.log('✅ Pool de conexões fechado');\n  process.exit(0);\n});\n\nmodule.exports = {\n  pool,\n  query,\n  getClient,\n  transaction\n};","size_bytes":2049},"server/database/init-db.js":{"content":"const { Pool } = require('pg');\nrequire('dotenv').config();\n\nasync function initializeDatabase() {\n  const pool = new Pool({\n    connectionString: process.env.DATABASE_URL\n  });\n\n  try {\n    console.log('🔧 Inicializando banco de dados...');\n\n    // Testar conexão\n    await pool.query('SELECT NOW()');\n    console.log('✅ Conexão com PostgreSQL estabelecida');\n\n    // Ler e executar script de inicialização\n    const fs = require('fs');\n    const path = require('path');\n    \n    const initScript = fs.readFileSync(path.join(__dirname, 'init.sql'), 'utf8');\n    \n    // Executar script em transação\n    const client = await pool.connect();\n    \n    try {\n      await client.query('BEGIN');\n      \n      // Dividir script em comandos individuais\n      const commands = initScript\n        .split(';')\n        .map(cmd => cmd.trim())\n        .filter(cmd => cmd.length > 0);\n      \n      for (const command of commands) {\n        if (command.trim()) {\n          await client.query(command);\n        }\n      }\n      \n      await client.query('COMMIT');\n      console.log('✅ Schema do banco criado com sucesso');\n      \n    } catch (error) {\n      await client.query('ROLLBACK');\n      throw error;\n    } finally {\n      client.release();\n    }\n\n  } catch (error) {\n    console.error('❌ Erro na inicialização do banco:', error);\n    process.exit(1);\n  } finally {\n    await pool.end();\n  }\n}\n\nif (require.main === module) {\n  initializeDatabase()\n    .then(() => {\n      console.log('🎉 Inicialização do banco concluída!');\n      process.exit(0);\n    })\n    .catch(error => {\n      console.error('❌ Falha na inicialização:', error);\n      process.exit(1);\n    });\n}\n\nmodule.exports = { initializeDatabase };","size_bytes":1727},"server/database/migrate.js":{"content":"const fs = require('fs');\nconst path = require('path');\nconst { query } = require('./connection');\n\nasync function runMigrations() {\n  try {\n    console.log('🔄 Iniciando migrations...');\n    \n    // Comandos essenciais para executar em ordem\n    const essentialCommands = [\n      // Extensões\n      `CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`,\n      `CREATE EXTENSION IF NOT EXISTS \"pgcrypto\"`,\n      \n      // Função de trigger para updated_at\n      `CREATE OR REPLACE FUNCTION update_updated_at_column()\n       RETURNS TRIGGER AS $$\n       BEGIN\n           NEW.updated_at = CURRENT_TIMESTAMP;\n           RETURN NEW;\n       END;\n       $$ language 'plpgsql'`,\n      \n      // Tabela de usuários\n      `CREATE TABLE IF NOT EXISTS users (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           email VARCHAR(255) UNIQUE NOT NULL,\n           password_hash VARCHAR(255) NOT NULL,\n           name VARCHAR(255) NOT NULL,\n           role VARCHAR(50) DEFAULT 'admin',\n           is_active BOOLEAN DEFAULT true,\n           last_login TIMESTAMP,\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n      \n      // Tabela de grupos de usuários\n      `CREATE TABLE IF NOT EXISTS user_groups (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           name VARCHAR(100) UNIQUE NOT NULL,\n           description TEXT,\n           permissions JSONB DEFAULT '{}',\n           is_active BOOLEAN DEFAULT true,\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n      \n      // Tabela de associação usuários-grupos\n      `CREATE TABLE IF NOT EXISTS user_group_memberships (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           user_id UUID REFERENCES users(id) ON DELETE CASCADE,\n           group_id UUID REFERENCES user_groups(id) ON DELETE CASCADE,\n           assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           assigned_by UUID REFERENCES users(id),\n           UNIQUE(user_id, group_id)\n       )`,\n      \n      // Tabela de configuração AD\n      `CREATE TABLE IF NOT EXISTS ad_configuration (\n           id SERIAL PRIMARY KEY,\n           server VARCHAR(255) NOT NULL,\n           domain VARCHAR(100) NOT NULL,\n           base_dn VARCHAR(255) NOT NULL,\n           admin_dn VARCHAR(255) NOT NULL,\n           admin_password VARCHAR(255) NOT NULL,\n           user_search_base VARCHAR(255),\n           is_active BOOLEAN DEFAULT true,\n           last_sync TIMESTAMP,\n           configured_by UUID REFERENCES users(id),\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n      \n      // Tabela de logs AD\n      `CREATE TABLE IF NOT EXISTS ad_sync_logs (\n           id SERIAL PRIMARY KEY,\n           sync_type VARCHAR(50) NOT NULL,\n           status VARCHAR(20) NOT NULL,\n           users_imported INTEGER DEFAULT 0,\n           users_updated INTEGER DEFAULT 0,\n           groups_imported INTEGER DEFAULT 0,\n           groups_updated INTEGER DEFAULT 0,\n           error_message TEXT,\n           synced_by UUID REFERENCES users(id),\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n      \n      // Outros índices essenciais\n      `CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)`,\n      `CREATE INDEX IF NOT EXISTS idx_users_active ON users(is_active)`,\n      `CREATE INDEX IF NOT EXISTS idx_ad_config_active ON ad_configuration(is_active, created_at)`,\n      `CREATE INDEX IF NOT EXISTS idx_ad_sync_logs_date ON ad_sync_logs(created_at DESC)`\n    ];\n    \n    console.log(`📋 Executando ${essentialCommands.length} comandos essenciais...`);\n    \n    for (let i = 0; i < essentialCommands.length; i++) {\n      const command = essentialCommands[i];\n      try {\n        await query(command);\n        console.log(`✅ Comando ${i + 1}/${essentialCommands.length} executado`);\n      } catch (error) {\n        // Ignora erros de objetos que já existem\n        if (error.code === '42710' || // trigger already exists\n            error.code === '42P07' || // table already exists\n            error.code === '42723' || // function already exists\n            error.code === '42P06' || // schema already exists\n            error.code === '42P16') { // index already exists\n          console.log(`⚠️ Comando ${i + 1}/${essentialCommands.length} já existe, ignorando...`);\n        } else {\n          console.error(`❌ Erro no comando ${i + 1}:`, error.message);\n          throw error;\n        }\n      }\n    }\n    \n    console.log('✅ Schema criado com sucesso!');\n    \n    // Verifica se já existe usuário admin padrão\n    const adminExists = await query(\n      'SELECT id FROM users WHERE email = $1',\n      ['admin@rhpro.com']\n    );\n    \n    if (adminExists.rows.length === 0) {\n      // Cria usuário admin padrão\n      const bcrypt = require('bcryptjs');\n      const hashedPassword = await bcrypt.hash('admin123', 10);\n      \n      await query(\n        `INSERT INTO users (email, password_hash, name, role) \n         VALUES ($1, $2, $3, $4)`,\n        ['admin@rhpro.com', hashedPassword, 'Administrador', 'admin']\n      );\n      \n      console.log('👤 Usuário admin criado: admin@rhpro.com / admin123');\n    }\n    \n    console.log('🎉 Migrations concluídas com sucesso!');\n    process.exit(0);\n    \n  } catch (error) {\n    console.error('❌ Erro nas migrations:', error);\n    process.exit(1);\n  }\n}\n\n// Executa se chamado diretamente\nif (require.main === module) {\n  runMigrations();\n}\n\nmodule.exports = { runMigrations };","size_bytes":5633},"server/database/quick-seed.js":{"content":"const bcrypt = require('bcryptjs');\nconst { query } = require('./connection');\n\nasync function quickSeed() {\n  try {\n    console.log('🌱 Executando seed rápido...');\n\n    // Insere dados básicos na tabela request_types existente\n    const requestTypes = [\n      {\n        name: 'Férias',\n        description: 'Solicitação de férias',\n        category: 'ferias',\n        form_fields: { start_date: 'required', end_date: 'required' }\n      },\n      {\n        name: 'Reembolso',\n        description: 'Solicitação de reembolso',\n        category: 'reembolso',\n        form_fields: { amount: 'required', receipt: 'required' }\n      }\n    ];\n\n    for (const reqType of requestTypes) {\n      const existing = await query('SELECT id FROM request_types WHERE name = $1', [reqType.name]);\n      \n      if (existing.rows.length === 0) {\n        await query(`\n          INSERT INTO request_types (name, description, category, form_fields, approval_levels)\n          VALUES ($1, $2, $3, $4, $5)\n        `, [\n          reqType.name, \n          reqType.description, \n          reqType.category, \n          JSON.stringify(reqType.form_fields),\n          JSON.stringify([{ level: 1, role: 'manager' }])\n        ]);\n        console.log(`✅ Tipo de requisição criado: ${reqType.name}`);\n      }\n    }\n\n    console.log('🎉 Seed rápido concluído!');\n    \n  } catch (error) {\n    console.error('❌ Erro no seed:', error);\n  }\n}\n\nif (require.main === module) {\n  quickSeed()\n    .then(() => process.exit(0))\n    .catch(() => process.exit(1));\n}\n\nmodule.exports = { quickSeed };","size_bytes":1572},"server/database/seed.js":{"content":"const bcrypt = require('bcryptjs');\nconst { query } = require('./connection');\n\nasync function seedDatabase() {\n  try {\n    console.log('🌱 Iniciando seed do banco de dados...');\n\n    // Usuários padrão\n    const users = [\n      {\n        email: 'admin@rhpro.com',\n        password: 'admin123',\n        name: 'Administrador',\n        role: 'admin'\n      },\n      {\n        email: 'hr@rhpro.com',\n        password: 'hr123',\n        name: 'RH Manager',\n        role: 'hr'\n      },\n      {\n        email: 'manager@rhpro.com',\n        password: 'manager123',\n        name: 'Gerente',\n        role: 'manager'\n      }\n    ];\n\n    for (const user of users) {\n      const existingUser = await query('SELECT id FROM users WHERE email = $1', [user.email]);\n      \n      if (existingUser.rows.length === 0) {\n        const hashedPassword = await bcrypt.hash(user.password, 10);\n        await query(\n          'INSERT INTO users (email, password_hash, name, role) VALUES ($1, $2, $3, $4)',\n          [user.email, hashedPassword, user.name, user.role]\n        );\n        console.log(`✅ Usuário criado: ${user.email}`);\n      }\n    }\n\n    // Departamentos\n    const departments = [\n      { name: 'Recursos Humanos', description: 'Gestão de pessoas e talentos', budget: 50000 },\n      { name: 'Tecnologia da Informação', description: 'Desenvolvimento e infraestrutura', budget: 80000 },\n      { name: 'Financeiro', description: 'Controladoria e finanças corporativas', budget: 60000 },\n      { name: 'Marketing', description: 'Marketing digital e comunicação', budget: 40000 },\n      { name: 'Vendas', description: 'Equipe comercial e relacionamento', budget: 70000 },\n      { name: 'Operações', description: 'Processos operacionais e logística', budget: 90000 }\n    ];\n\n    const departmentIds = {};\n    for (const dept of departments) {\n      const existing = await query('SELECT id FROM departments WHERE name = $1', [dept.name]);\n      \n      if (existing.rows.length === 0) {\n        const result = await query(\n          'INSERT INTO departments (name, description, budget) VALUES ($1, $2, $3) RETURNING id',\n          [dept.name, dept.description, dept.budget]\n        );\n        departmentIds[dept.name] = result.rows[0].id;\n        console.log(`✅ Departamento criado: ${dept.name}`);\n      } else {\n        departmentIds[dept.name] = existing.rows[0].id;\n      }\n    }\n\n    // Funcionários exemplo\n    const employees = [\n      {\n        employee_code: 'EMP001',\n        name: 'Maria Silva Santos',\n        email: 'maria.santos@thermas.com',\n        phone: '(11) 99999-1001',\n        cpf: '123.456.789-01',\n        birth_date: '1985-03-15',\n        hire_date: '2020-01-10',\n        department: 'Recursos Humanos',\n        position: 'Analista de RH',\n        cbo_code: '2524-05',\n        salary: 5500.00\n      },\n      {\n        employee_code: 'EMP002',\n        name: 'João Pedro Oliveira',\n        email: 'joao.oliveira@thermas.com',\n        phone: '(11) 99999-1002',\n        cpf: '234.567.890-12',\n        birth_date: '1990-07-22',\n        hire_date: '2021-03-01',\n        department: 'Tecnologia da Informação',\n        position: 'Desenvolvedor Full Stack',\n        cbo_code: '2124-05',\n        salary: 8500.00\n      },\n      {\n        employee_code: 'EMP003',\n        name: 'Ana Carolina Ferreira',\n        email: 'ana.ferreira@thermas.com',\n        phone: '(11) 99999-1003',\n        cpf: '345.678.901-23',\n        birth_date: '1988-11-05',\n        hire_date: '2019-08-15',\n        department: 'Financeiro',\n        position: 'Analista Financeiro',\n        cbo_code: '2522-10',\n        salary: 6200.00\n      },\n      {\n        employee_code: 'EMP004',\n        name: 'Carlos Eduardo Lima',\n        email: 'carlos.lima@thermas.com',\n        phone: '(11) 99999-1004',\n        cpf: '456.789.012-34',\n        birth_date: '1987-04-30',\n        hire_date: '2018-05-20',\n        department: 'Marketing',\n        position: 'Coordenador de Marketing',\n        cbo_code: '1414-25',\n        salary: 7800.00\n      },\n      {\n        employee_code: 'EMP005',\n        name: 'Fernanda Costa Almeida',\n        email: 'fernanda.almeida@thermas.com',\n        phone: '(11) 99999-1005',\n        cpf: '567.890.123-45',\n        birth_date: '1992-09-12',\n        hire_date: '2022-01-10',\n        department: 'Vendas',\n        position: 'Consultor de Vendas',\n        cbo_code: '3541-10',\n        salary: 4800.00\n      }\n    ];\n\n    for (const emp of employees) {\n      const existing = await query('SELECT id FROM employees WHERE employee_code = $1', [emp.employee_code]);\n      \n      if (existing.rows.length === 0) {\n        await query(`\n          INSERT INTO employees (\n            employee_code, name, email, phone, cpf, birth_date, hire_date,\n            department_id, position, cbo_code, salary\n          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\n        `, [\n          emp.employee_code, emp.name, emp.email, emp.phone, emp.cpf,\n          emp.birth_date, emp.hire_date, departmentIds[emp.department],\n          emp.position, emp.cbo_code, emp.salary\n        ]);\n        console.log(`✅ Funcionário criado: ${emp.name}`);\n      }\n    }\n\n    // Tipos de requisições\n    const requestTypes = [\n      {\n        name: 'Férias',\n        description: 'Solicitação de férias anuais',\n        category: 'ferias',\n        requires_approval: true,\n        approver_role: 'manager',\n        fields_config: {\n          required_fields: ['start_date', 'end_date', 'emergency_contact'],\n          optional_fields: ['destination', 'observations']\n        }\n      },\n      {\n        name: 'Reembolso',\n        description: 'Solicitação de reembolso de despesas',\n        category: 'reembolso',\n        requires_approval: true,\n        approver_role: 'manager',\n        fields_config: {\n          required_fields: ['amount', 'description', 'category', 'receipt'],\n          optional_fields: ['project', 'client']\n        }\n      },\n      {\n        name: 'Material de Escritório',\n        description: 'Solicitação de materiais e suprimentos',\n        category: 'material',\n        requires_approval: false,\n        approver_role: 'hr',\n        fields_config: {\n          required_fields: ['items', 'justification'],\n          optional_fields: ['urgency_level']\n        }\n      },\n      {\n        name: 'Treinamento',\n        description: 'Solicitação de cursos e treinamentos',\n        category: 'treinamento',\n        requires_approval: true,\n        approver_role: 'manager',\n        fields_config: {\n          required_fields: ['course_name', 'institution', 'cost', 'duration'],\n          optional_fields: ['certification', 'business_justification']\n        }\n      },\n      {\n        name: 'Atestado Médico',\n        description: 'Envio de atestado médico',\n        category: 'saude',\n        requires_approval: false,\n        approver_role: 'hr',\n        fields_config: {\n          required_fields: ['medical_certificate', 'period'],\n          optional_fields: ['doctor_info']\n        }\n      }\n    ];\n\n    for (const reqType of requestTypes) {\n      const existing = await query('SELECT id FROM request_types WHERE name = $1', [reqType.name]);\n      \n      if (existing.rows.length === 0) {\n        await query(`\n          INSERT INTO request_types (\n            name, description, category, requires_approval, \n            approver_role, fields_config\n          ) VALUES ($1, $2, $3, $4, $5, $6)\n        `, [\n          reqType.name, reqType.description, reqType.category,\n          reqType.requires_approval, reqType.approver_role,\n          JSON.stringify(reqType.fields_config)\n        ]);\n        console.log(`✅ Tipo de requisição criado: ${reqType.name}`);\n      }\n    }\n\n    // Configurações do sistema\n    const systemSettings = [\n      {\n        key: 'company_name',\n        value: 'Thermas RH Pro',\n        description: 'Nome da empresa',\n        category: 'general'\n      },\n      {\n        key: 'max_vacation_days',\n        value: '30',\n        description: 'Máximo de dias de férias por ano',\n        category: 'hr_policies'\n      },\n      {\n        key: 'approval_timeout_hours',\n        value: '72',\n        description: 'Tempo limite para aprovação (em horas)',\n        category: 'workflow'\n      },\n      {\n        key: 'notification_email',\n        value: 'noreply@thermas.com',\n        description: 'Email para envio de notificações',\n        category: 'notifications'\n      },\n      {\n        key: 'working_hours_start',\n        value: '08:00',\n        description: 'Horário de início do expediente',\n        category: 'general'\n      },\n      {\n        key: 'working_hours_end',\n        value: '18:00',\n        description: 'Horário de fim do expediente',\n        category: 'general'\n      }\n    ];\n\n    for (const setting of systemSettings) {\n      const existing = await query('SELECT id FROM system_settings WHERE key = $1', [setting.key]);\n      \n      if (existing.rows.length === 0) {\n        await query(`\n          INSERT INTO system_settings (key, value, description, category)\n          VALUES ($1, $2, $3, $4)\n        `, [setting.key, setting.value, setting.description, setting.category]);\n        console.log(`✅ Configuração criada: ${setting.key}`);\n      }\n    }\n\n    console.log('🎉 Seed do banco de dados concluído com sucesso!');\n    console.log('\\n📋 Credenciais de acesso:');\n    console.log('👑 Admin: admin@rhpro.com / admin123');\n    console.log('🧑‍💼 RH: hr@rhpro.com / hr123');\n    console.log('👨‍💼 Gerente: manager@rhpro.com / manager123');\n\n  } catch (error) {\n    console.error('❌ Erro no seed:', error);\n    throw error;\n  }\n}\n\n// Executa se chamado diretamente\nif (require.main === module) {\n  seedDatabase()\n    .then(() => process.exit(0))\n    .catch(error => {\n      console.error(error);\n      process.exit(1);\n    });\n}\n\nmodule.exports = { seedDatabase };","size_bytes":9878},"server/middleware/auth.js":{"content":"const jwt = require('jsonwebtoken');\nconst { query } = require('../database/connection');\n\nconst authenticateToken = async (req, res, next) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n\n  if (!token) {\n    return res.status(401).json({ \n      error: 'Token de acesso requerido',\n      code: 'NO_TOKEN'\n    });\n  }\n\n  try {\n    // Verifica o token JWT\n    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'rh-pro-secret-key-2025');\n    \n    // Busca o usuário no banco\n    const result = await query(\n      'SELECT id, email, name, role, is_active FROM users WHERE id = $1',\n      [decoded.userId]\n    );\n    \n    if (result.rows.length === 0) {\n      return res.status(401).json({ \n        error: 'Usuário não encontrado',\n        code: 'USER_NOT_FOUND'\n      });\n    }\n    \n    const user = result.rows[0];\n    \n    if (!user.is_active) {\n      return res.status(401).json({ \n        error: 'Usuário inativo',\n        code: 'USER_INACTIVE'\n      });\n    }\n    \n    // Adiciona o usuário ao request\n    req.user = user;\n    next();\n    \n  } catch (error) {\n    console.error('Erro na autenticação:', error);\n    \n    if (error.name === 'TokenExpiredError') {\n      return res.status(401).json({ \n        error: 'Token expirado',\n        code: 'TOKEN_EXPIRED'\n      });\n    }\n    \n    if (error.name === 'JsonWebTokenError') {\n      return res.status(401).json({ \n        error: 'Token inválido',\n        code: 'INVALID_TOKEN'\n      });\n    }\n    \n    return res.status(500).json({ \n      error: 'Erro interno do servidor',\n      code: 'INTERNAL_ERROR'\n    });\n  }\n};\n\n// Middleware para verificar permissões específicas\nconst requireRole = (roles) => {\n  return (req, res, next) => {\n    if (!req.user) {\n      return res.status(401).json({ \n        error: 'Usuário não autenticado',\n        code: 'NOT_AUTHENTICATED'\n      });\n    }\n    \n    const userRole = req.user.role;\n    const allowedRoles = Array.isArray(roles) ? roles : [roles];\n    \n    if (!allowedRoles.includes(userRole)) {\n      return res.status(403).json({ \n        error: 'Permissão insuficiente',\n        code: 'INSUFFICIENT_PERMISSION',\n        required: allowedRoles,\n        current: userRole\n      });\n    }\n    \n    next();\n  };\n};\n\n// Middleware para log de auditoria\nconst auditLog = (action) => {\n  return async (req, res, next) => {\n    // Log da ação será implementado depois da resposta\n    const originalSend = res.send;\n    \n    res.send = function(data) {\n      // Log da auditoria de forma assíncrona\n      setImmediate(async () => {\n        try {\n          await query(\n            `INSERT INTO audit_logs (user_id, action, ip_address, user_agent, new_values)\n             VALUES ($1, $2, $3, $4, $5)`,\n            [\n              req.user?.id,\n              action,\n              req.ip,\n              req.get('User-Agent'),\n              JSON.stringify({ \n                method: req.method,\n                path: req.path,\n                query: req.query,\n                body: req.method !== 'GET' ? req.body : undefined\n              })\n            ]\n          );\n        } catch (error) {\n          console.error('Erro no log de auditoria:', error);\n        }\n      });\n      \n      originalSend.call(this, data);\n    };\n    \n    next();\n  };\n};\n\nmodule.exports = {\n  authenticateToken,\n  requireRole,\n  auditLog\n};","size_bytes":3419},"server/middleware/errorHandler.js":{"content":"const errorHandler = (err, req, res, next) => {\n  console.error('❌ Erro capturado pelo middleware:', {\n    message: err.message,\n    stack: err.stack,\n    path: req.path,\n    method: req.method,\n    timestamp: new Date().toISOString()\n  });\n\n  // Erro de validação do express-validator\n  if (err.type === 'validation') {\n    return res.status(400).json({\n      error: 'Dados inválidos',\n      code: 'VALIDATION_ERROR',\n      details: err.errors\n    });\n  }\n\n  // Erro de banco de dados PostgreSQL\n  if (err.code && err.code.startsWith('23')) {\n    let message = 'Erro no banco de dados';\n    let code = 'DATABASE_ERROR';\n\n    // Violação de chave única\n    if (err.code === '23505') {\n      message = 'Registro já existe';\n      code = 'DUPLICATE_ENTRY';\n    }\n    \n    // Violação de chave estrangeira\n    if (err.code === '23503') {\n      message = 'Referência inválida';\n      code = 'FOREIGN_KEY_ERROR';\n    }\n    \n    // Violação de not null\n    if (err.code === '23502') {\n      message = 'Campo obrigatório não preenchido';\n      code = 'NOT_NULL_ERROR';\n    }\n\n    return res.status(400).json({\n      error: message,\n      code,\n      field: err.column || err.constraint\n    });\n  }\n\n  // Erro de sintaxe JSON\n  if (err instanceof SyntaxError && err.status === 400 && 'body' in err) {\n    return res.status(400).json({\n      error: 'JSON inválido',\n      code: 'INVALID_JSON'\n    });\n  }\n\n  // Erro de limite de payload\n  if (err.type === 'entity.too.large') {\n    return res.status(413).json({\n      error: 'Arquivo muito grande',\n      code: 'PAYLOAD_TOO_LARGE'\n    });\n  }\n\n  // Rate limit\n  if (err.statusCode === 429) {\n    return res.status(429).json({\n      error: 'Muitas tentativas, tente novamente mais tarde',\n      code: 'RATE_LIMIT_EXCEEDED'\n    });\n  }\n\n  // JWT Errors\n  if (err.name === 'JsonWebTokenError') {\n    return res.status(401).json({\n      error: 'Token inválido',\n      code: 'INVALID_TOKEN'\n    });\n  }\n\n  if (err.name === 'TokenExpiredError') {\n    return res.status(401).json({\n      error: 'Token expirado',\n      code: 'TOKEN_EXPIRED'\n    });\n  }\n\n  // Erro customizado da aplicação\n  if (err.statusCode && err.message) {\n    return res.status(err.statusCode).json({\n      error: err.message,\n      code: err.code || 'APPLICATION_ERROR'\n    });\n  }\n\n  // Erro interno do servidor (fallback)\n  res.status(500).json({\n    error: process.env.NODE_ENV === 'production' \n      ? 'Erro interno do servidor' \n      : err.message,\n    code: 'INTERNAL_SERVER_ERROR',\n    ...(process.env.NODE_ENV !== 'production' && { stack: err.stack })\n  });\n};\n\n// Middleware para capturar 404\nconst notFoundHandler = (req, res, next) => {\n  res.status(404).json({\n    error: 'Endpoint não encontrado',\n    code: 'NOT_FOUND',\n    path: req.path,\n    method: req.method\n  });\n};\n\nmodule.exports = {\n  errorHandler,\n  notFoundHandler\n};","size_bytes":2873},"server/routes/auth.js":{"content":"const express = require('express');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst { body, validationResult } = require('express-validator');\nconst { query } = require('../database/connection');\nconst router = express.Router();\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'rh-pro-secret-key-2025';\nconst JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '24h';\n\n// POST /api/auth/login\nrouter.post('/login', [\n  body('email').isEmail().normalizeEmail().withMessage('Email inválido'),\n  body('password').isLength({ min: 6 }).withMessage('Senha deve ter no mínimo 6 caracteres')\n], async (req, res) => {\n  try {\n    // Verifica erros de validação\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        error: 'Dados inválidos',\n        details: errors.array()\n      });\n    }\n\n    const { email, password } = req.body;\n\n    // Busca usuário no banco\n    const result = await query(\n      'SELECT id, email, password_hash, name, role, is_active FROM users WHERE email = $1',\n      [email]\n    );\n\n    if (result.rows.length === 0) {\n      return res.status(401).json({\n        error: 'Credenciais inválidas'\n      });\n    }\n\n    const user = result.rows[0];\n\n    // Verifica se usuário está ativo\n    if (!user.is_active) {\n      return res.status(401).json({\n        error: 'Usuário inativo'\n      });\n    }\n\n    // Verifica senha\n    const isValidPassword = await bcrypt.compare(password, user.password_hash);\n    if (!isValidPassword) {\n      return res.status(401).json({\n        error: 'Credenciais inválidas'\n      });\n    }\n\n    // Atualiza último login\n    await query(\n      'UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = $1',\n      [user.id]\n    );\n\n    // Gera token JWT\n    const token = jwt.sign(\n      { \n        userId: user.id, \n        email: user.email, \n        role: user.role \n      },\n      JWT_SECRET,\n      { expiresIn: JWT_EXPIRES_IN }\n    );\n\n    res.json({\n      success: true,\n      message: 'Login realizado com sucesso',\n      token,\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        role: user.role\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro no login:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// POST /api/auth/register\nrouter.post('/register', [\n  body('email').isEmail().normalizeEmail().withMessage('Email inválido'),\n  body('password').isLength({ min: 6 }).withMessage('Senha deve ter no mínimo 6 caracteres'),\n  body('name').isLength({ min: 2 }).withMessage('Nome deve ter no mínimo 2 caracteres'),\n  body('role').optional().isIn(['admin', 'hr', 'manager']).withMessage('Papel inválido')\n], async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        error: 'Dados inválidos',\n        details: errors.array()\n      });\n    }\n\n    const { email, password, name, role = 'hr' } = req.body;\n\n    // Verifica se usuário já existe\n    const existingUser = await query(\n      'SELECT id FROM users WHERE email = $1',\n      [email]\n    );\n\n    if (existingUser.rows.length > 0) {\n      return res.status(409).json({\n        error: 'Email já cadastrado'\n      });\n    }\n\n    // Criptografa senha\n    const passwordHash = await bcrypt.hash(password, 12);\n\n    // Insere novo usuário\n    const result = await query(\n      'INSERT INTO users (email, password_hash, name, role) VALUES ($1, $2, $3, $4) RETURNING id, email, name, role',\n      [email, passwordHash, name, role]\n    );\n\n    const newUser = result.rows[0];\n\n    res.status(201).json({\n      success: true,\n      message: 'Usuário criado com sucesso',\n      user: newUser\n    });\n\n  } catch (error) {\n    console.error('Erro no registro:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// POST /api/auth/refresh\nrouter.post('/refresh', async (req, res) => {\n  try {\n    const { token } = req.body;\n\n    if (!token) {\n      return res.status(401).json({\n        error: 'Token requerido'\n      });\n    }\n\n    // Verifica token (mesmo que expirado)\n    let decoded;\n    try {\n      decoded = jwt.verify(token, JWT_SECRET);\n    } catch (error) {\n      if (error.name === 'TokenExpiredError') {\n        // Permite refresh de tokens expirados até 7 dias\n        decoded = jwt.decode(token);\n        const expiredDate = new Date(decoded.exp * 1000);\n        const now = new Date();\n        const daysDiff = (now - expiredDate) / (1000 * 60 * 60 * 24);\n        \n        if (daysDiff > 7) {\n          return res.status(401).json({\n            error: 'Token expirado há muito tempo'\n          });\n        }\n      } else {\n        return res.status(401).json({\n          error: 'Token inválido'\n        });\n      }\n    }\n\n    // Busca usuário atualizado\n    const result = await query(\n      'SELECT id, email, name, role, is_active FROM users WHERE id = $1',\n      [decoded.userId]\n    );\n\n    if (result.rows.length === 0 || !result.rows[0].is_active) {\n      return res.status(401).json({\n        error: 'Usuário não encontrado ou inativo'\n      });\n    }\n\n    const user = result.rows[0];\n\n    // Gera novo token\n    const newToken = jwt.sign(\n      { \n        userId: user.id, \n        email: user.email, \n        role: user.role \n      },\n      JWT_SECRET,\n      { expiresIn: JWT_EXPIRES_IN }\n    );\n\n    res.json({\n      success: true,\n      token: newToken,\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        role: user.role\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro no refresh:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// GET /api/auth/me - Retorna dados do usuário logado\nrouter.get('/me', async (req, res) => {\n  try {\n    const authHeader = req.headers['authorization'];\n    const token = authHeader && authHeader.split(' ')[1];\n\n    if (!token) {\n      return res.status(401).json({\n        error: 'Token requerido'\n      });\n    }\n\n    const decoded = jwt.verify(token, JWT_SECRET);\n    \n    const result = await query(\n      'SELECT id, email, name, role, is_active, last_login, created_at FROM users WHERE id = $1',\n      [decoded.userId]\n    );\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        error: 'Usuário não encontrado'\n      });\n    }\n\n    const user = result.rows[0];\n\n    if (!user.is_active) {\n      return res.status(401).json({\n        error: 'Usuário inativo'\n      });\n    }\n\n    res.json({\n      success: true,\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        role: user.role,\n        lastLogin: user.last_login,\n        createdAt: user.created_at\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar usuário:', error);\n    \n    if (error.name === 'JsonWebTokenError') {\n      return res.status(401).json({\n        error: 'Token inválido'\n      });\n    }\n    \n    if (error.name === 'TokenExpiredError') {\n      return res.status(401).json({\n        error: 'Token expirado'\n      });\n    }\n\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\nmodule.exports = router;","size_bytes":7299},"server/routes/dashboard.js":{"content":"const express = require('express');\nconst { query } = require('../database/connection');\nconst router = express.Router();\n\n// GET /api/dashboard - Dashboard principal\nrouter.get('/', async (req, res) => {\n  try {\n    // Estatísticas gerais\n    const generalStats = await query(`\n      SELECT \n        (SELECT COUNT(*) FROM employees WHERE is_active = true) as active_employees,\n        (SELECT COUNT(*) FROM departments WHERE is_active = true) as active_departments,\n        (SELECT COUNT(*) FROM requests WHERE status = 'pending') as pending_requests,\n        (SELECT COUNT(*) FROM requests WHERE created_at >= CURRENT_DATE - INTERVAL '30 days') as recent_requests\n    `);\n\n    // Requisições por status\n    const requestsByStatus = await query(`\n      SELECT \n        status,\n        COUNT(*) as count\n      FROM requests\n      GROUP BY status\n      ORDER BY count DESC\n    `);\n\n    // Funcionários admitidos recentemente\n    const recentHires = await query(`\n      SELECT \n        e.name,\n        e.employee_code,\n        e.hire_date,\n        d.name as department_name\n      FROM employees e\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE e.hire_date >= CURRENT_DATE - INTERVAL '30 days'\n      AND e.is_active = true\n      ORDER BY e.hire_date DESC\n      LIMIT 5\n    `);\n\n    // Requisições urgentes\n    const urgentRequests = await query(`\n      SELECT \n        r.title,\n        r.created_at,\n        r.priority,\n        e.name as employee_name,\n        rt.name as request_type\n      FROM requests r\n      LEFT JOIN employees e ON r.employee_id = e.id\n      LEFT JOIN request_types rt ON r.request_type_id = rt.id\n      WHERE r.status = 'pending' \n      AND r.priority IN ('urgent', 'high')\n      ORDER BY \n        CASE r.priority \n          WHEN 'urgent' THEN 1 \n          WHEN 'high' THEN 2 \n        END,\n        r.created_at ASC\n      LIMIT 10\n    `);\n\n    // Departamentos com mais funcionários\n    const departmentStats = await query(`\n      SELECT \n        d.name,\n        COUNT(e.id) as employee_count,\n        d.budget,\n        CASE \n          WHEN d.budget > 0 THEN ROUND((SUM(e.salary) / d.budget * 100)::numeric, 2)\n          ELSE 0\n        END as budget_usage\n      FROM departments d\n      LEFT JOIN employees e ON d.id = e.department_id AND e.is_active = true\n      WHERE d.is_active = true\n      GROUP BY d.id, d.name, d.budget\n      ORDER BY employee_count DESC\n      LIMIT 5\n    `);\n\n    // Atividade recente (últimos 10 dias)\n    const activityData = await query(`\n      SELECT \n        DATE(created_at) as date,\n        COUNT(*) as requests_created\n      FROM requests\n      WHERE created_at >= CURRENT_DATE - INTERVAL '10 days'\n      GROUP BY DATE(created_at)\n      ORDER BY date DESC\n    `);\n\n    res.json({\n      success: true,\n      data: {\n        generalStats: generalStats.rows[0],\n        requestsByStatus: requestsByStatus.rows,\n        recentHires: recentHires.rows,\n        urgentRequests: urgentRequests.rows,\n        departmentStats: departmentStats.rows,\n        activityData: activityData.rows\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar dados do dashboard:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// GET /api/dashboard/analytics - Analytics avançados\nrouter.get('/analytics', async (req, res) => {\n  try {\n    const { period = '30' } = req.query; // dias\n\n    // Tendências de requisições\n    const requestTrends = await query(`\n      SELECT \n        DATE_TRUNC('week', created_at) as week,\n        COUNT(*) as total_requests,\n        COUNT(*) FILTER (WHERE status = 'approved') as approved,\n        COUNT(*) FILTER (WHERE status = 'rejected') as rejected,\n        COUNT(*) FILTER (WHERE status = 'pending') as pending\n      FROM requests\n      WHERE created_at >= CURRENT_DATE - ($1::int * INTERVAL '1 day')\n      GROUP BY DATE_TRUNC('week', created_at)\n      ORDER BY week DESC\n    `, [parseInt(period)]);\n\n    // Tempo médio de aprovação\n    const approvalTimes = await query(`\n      SELECT \n        rt.name as request_type,\n        AVG(EXTRACT(EPOCH FROM (r.updated_at - r.created_at))/3600) as avg_hours_to_approval\n      FROM requests r\n      LEFT JOIN request_types rt ON r.request_type_id = rt.id\n      WHERE r.status IN ('approved', 'rejected')\n      AND r.created_at >= CURRENT_DATE - ($1::int * INTERVAL '1 day')\n      GROUP BY rt.name\n      ORDER BY avg_hours_to_approval DESC\n    `, [parseInt(period)]);\n\n    // Funcionários mais ativos (que fazem mais requisições)\n    const activeEmployees = await query(`\n      SELECT \n        e.name,\n        e.employee_code,\n        d.name as department,\n        COUNT(r.id) as request_count\n      FROM employees e\n      LEFT JOIN requests r ON e.id = r.employee_id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE r.created_at >= CURRENT_DATE - ($1::int * INTERVAL '1 day')\n      GROUP BY e.id, e.name, e.employee_code, d.name\n      HAVING COUNT(r.id) > 0\n      ORDER BY request_count DESC\n      LIMIT 10\n    `, [parseInt(period)]);\n\n    // Padrões por tipo de requisição\n    const requestPatterns = await query(`\n      SELECT \n        rt.name,\n        rt.category,\n        COUNT(r.id) as total_requests,\n        ROUND(AVG(CASE WHEN r.status = 'approved' THEN 100.0 ELSE 0.0 END), 2) as approval_rate\n      FROM request_types rt\n      LEFT JOIN requests r ON rt.id = r.request_type_id\n      WHERE r.created_at >= CURRENT_DATE - ($1::int * INTERVAL '1 day')\n      GROUP BY rt.id, rt.name, rt.category\n      HAVING COUNT(r.id) > 0\n      ORDER BY total_requests DESC\n    `, [parseInt(period)]);\n\n    res.json({\n      success: true,\n      data: {\n        requestTrends: requestTrends.rows,\n        approvalTimes: approvalTimes.rows,\n        activeEmployees: activeEmployees.rows,\n        requestPatterns: requestPatterns.rows\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar analytics:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// GET /api/dashboard/kpis - KPIs principais\nrouter.get('/kpis', async (req, res) => {\n  try {\n    const kpis = await query(`\n      SELECT \n        -- Employee KPIs\n        (SELECT COUNT(*) FROM employees WHERE is_active = true) as total_employees,\n        (SELECT COUNT(*) FROM employees WHERE hire_date >= CURRENT_DATE - INTERVAL '90 days') as new_hires_3m,\n        (SELECT COUNT(*) FROM employees WHERE termination_date >= CURRENT_DATE - INTERVAL '90 days') as terminations_3m,\n        \n        -- Request KPIs\n        (SELECT COUNT(*) FROM requests WHERE created_at >= CURRENT_DATE - INTERVAL '30 days') as requests_this_month,\n        (SELECT COUNT(*) FROM requests WHERE status = 'pending') as pending_requests,\n        (SELECT ROUND(AVG(EXTRACT(EPOCH FROM (approved_at - created_at))/3600), 2) \n         FROM requests WHERE status = 'approved' AND created_at >= CURRENT_DATE - INTERVAL '30 days') as avg_approval_hours,\n        \n        -- Financial KPIs\n        (SELECT AVG(salary) FROM employees WHERE is_active = true AND salary > 0) as avg_salary,\n        (SELECT SUM(budget) FROM departments WHERE is_active = true) as total_budget,\n        (SELECT SUM(amount) FROM requests WHERE status = 'approved' AND created_at >= CURRENT_DATE - INTERVAL '30 days') as approved_expenses_month\n    `);\n\n    // Cálculo de turnover\n    const turnoverData = await query(`\n      SELECT \n        (SELECT COUNT(*) FROM employees WHERE termination_date >= CURRENT_DATE - INTERVAL '12 months') as terminations_12m,\n        (SELECT AVG(employee_count) FROM (\n          SELECT COUNT(*) as employee_count \n          FROM employees \n          WHERE is_active = true OR termination_date >= CURRENT_DATE - INTERVAL '12 months'\n          GROUP BY DATE_TRUNC('month', COALESCE(termination_date, CURRENT_DATE))\n        ) avg_counts) as avg_employees_12m\n    `);\n\n    const baseKpis = kpis.rows[0];\n    const turnover = turnoverData.rows[0];\n    \n    // Calcula taxa de turnover anual\n    const turnoverRate = turnover.avg_employees_12m > 0 \n      ? Math.round((turnover.terminations_12m / turnover.avg_employees_12m) * 100 * 100) / 100 \n      : 0;\n\n    res.json({\n      success: true,\n      data: {\n        ...baseKpis,\n        turnover_rate_12m: turnoverRate,\n        retention_rate_12m: Math.round((100 - turnoverRate) * 100) / 100\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar KPIs:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\nmodule.exports = router;","size_bytes":8543},"server/routes/departments.js":{"content":"const express = require('express');\nconst { body, validationResult } = require('express-validator');\nconst { query } = require('../database/connection');\nconst { auditLog } = require('../middleware/auth');\nconst router = express.Router();\n\n// GET /api/departments - Lista todos os departamentos\nrouter.get('/', async (req, res) => {\n  try {\n    const { active = 'true' } = req.query;\n\n    let whereClause = '';\n    let params = [];\n\n    if (active !== 'all') {\n      whereClause = 'WHERE d.is_active = $1';\n      params.push(active === 'true');\n    }\n\n    const result = await query(`\n      SELECT \n        d.*,\n        e.name as manager_name,\n        COUNT(emp.id) as employee_count\n      FROM departments d\n      LEFT JOIN employees e ON d.manager_id = e.id\n      LEFT JOIN employees emp ON d.id = emp.department_id AND emp.is_active = true\n      ${whereClause}\n      GROUP BY d.id, e.name\n      ORDER BY d.name ASC\n    `, params);\n\n    res.json({\n      success: true,\n      data: result.rows\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar departamentos:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// GET /api/departments/:id - Busca departamento por ID\nrouter.get('/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await query(`\n      SELECT \n        d.*,\n        e.name as manager_name,\n        e.email as manager_email\n      FROM departments d\n      LEFT JOIN employees e ON d.manager_id = e.id\n      WHERE d.id = $1\n    `, [id]);\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        error: 'Departamento não encontrado'\n      });\n    }\n\n    // Busca funcionários do departamento\n    const employeesResult = await query(`\n      SELECT id, name, email, position, hire_date\n      FROM employees \n      WHERE department_id = $1 AND is_active = true\n      ORDER BY name ASC\n    `, [id]);\n\n    res.json({\n      success: true,\n      data: {\n        ...result.rows[0],\n        employees: employeesResult.rows\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar departamento:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// POST /api/departments - Cria novo departamento\nrouter.post('/', [\n  body('name').isLength({ min: 2 }).withMessage('Nome deve ter no mínimo 2 caracteres'),\n  body('budget').optional().isFloat({ min: 0 }).withMessage('Orçamento deve ser um valor positivo'),\n  body('manager_id').optional().isUUID().withMessage('ID do gerente inválido')\n], auditLog('CREATE_DEPARTMENT'), async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        error: 'Dados inválidos',\n        details: errors.array()\n      });\n    }\n\n    const { name, description, budget, manager_id } = req.body;\n\n    // Verifica se nome já existe\n    const existingDept = await query(\n      'SELECT id FROM departments WHERE name = $1',\n      [name]\n    );\n\n    if (existingDept.rows.length > 0) {\n      return res.status(409).json({\n        error: 'Nome do departamento já existe'\n      });\n    }\n\n    // Verifica se gerente existe (se fornecido)\n    if (manager_id) {\n      const managerExists = await query(\n        'SELECT id FROM employees WHERE id = $1 AND is_active = true',\n        [manager_id]\n      );\n\n      if (managerExists.rows.length === 0) {\n        return res.status(400).json({\n          error: 'Gerente não encontrado ou inativo'\n        });\n      }\n    }\n\n    const result = await query(`\n      INSERT INTO departments (name, description, budget, manager_id)\n      VALUES ($1, $2, $3, $4)\n      RETURNING *\n    `, [name, description, budget, manager_id]);\n\n    res.status(201).json({\n      success: true,\n      message: 'Departamento criado com sucesso',\n      data: result.rows[0]\n    });\n\n  } catch (error) {\n    console.error('Erro ao criar departamento:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// PUT /api/departments/:id - Atualiza departamento\nrouter.put('/:id', [\n  body('name').optional().isLength({ min: 2 }).withMessage('Nome deve ter no mínimo 2 caracteres'),\n  body('budget').optional().isFloat({ min: 0 }).withMessage('Orçamento deve ser um valor positivo'),\n  body('manager_id').optional().isUUID().withMessage('ID do gerente inválido')\n], auditLog('UPDATE_DEPARTMENT'), async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        error: 'Dados inválidos',\n        details: errors.array()\n      });\n    }\n\n    const { id } = req.params;\n\n    // Verifica se departamento existe\n    const existingDept = await query('SELECT * FROM departments WHERE id = $1', [id]);\n    if (existingDept.rows.length === 0) {\n      return res.status(404).json({\n        error: 'Departamento não encontrado'\n      });\n    }\n\n    const updateFields = [];\n    const updateValues = [];\n    let paramCount = 0;\n\n    Object.keys(req.body).forEach(key => {\n      if (req.body[key] !== undefined && key !== 'id') {\n        paramCount++;\n        updateFields.push(`${key} = $${paramCount}`);\n        updateValues.push(req.body[key]);\n      }\n    });\n\n    if (updateFields.length === 0) {\n      return res.status(400).json({\n        error: 'Nenhum campo para atualizar'\n      });\n    }\n\n    // Verifica se gerente existe (se sendo atualizado)\n    if (req.body.manager_id) {\n      const managerExists = await query(\n        'SELECT id FROM employees WHERE id = $1 AND is_active = true',\n        [req.body.manager_id]\n      );\n\n      if (managerExists.rows.length === 0) {\n        return res.status(400).json({\n          error: 'Gerente não encontrado ou inativo'\n        });\n      }\n    }\n\n    paramCount++;\n    updateValues.push(id);\n\n    const updateQuery = `\n      UPDATE departments \n      SET ${updateFields.join(', ')}, updated_at = CURRENT_TIMESTAMP\n      WHERE id = $${paramCount}\n      RETURNING *\n    `;\n\n    const result = await query(updateQuery, updateValues);\n\n    res.json({\n      success: true,\n      message: 'Departamento atualizado com sucesso',\n      data: result.rows[0]\n    });\n\n  } catch (error) {\n    console.error('Erro ao atualizar departamento:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// DELETE /api/departments/:id - Remove departamento (soft delete)\nrouter.delete('/:id', auditLog('DELETE_DEPARTMENT'), async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    // Verifica se há funcionários no departamento\n    const employeesCount = await query(\n      'SELECT COUNT(*) FROM employees WHERE department_id = $1 AND is_active = true',\n      [id]\n    );\n\n    if (parseInt(employeesCount.rows[0].count) > 0) {\n      return res.status(400).json({\n        error: 'Não é possível excluir departamento com funcionários ativos'\n      });\n    }\n\n    const result = await query(\n      'UPDATE departments SET is_active = false WHERE id = $1 RETURNING *',\n      [id]\n    );\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        error: 'Departamento não encontrado'\n      });\n    }\n\n    res.json({\n      success: true,\n      message: 'Departamento desativado com sucesso',\n      data: result.rows[0]\n    });\n\n  } catch (error) {\n    console.error('Erro ao desativar departamento:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// GET /api/departments/:id/employees - Lista funcionários de um departamento\nrouter.get('/:id/employees', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { active = 'true' } = req.query;\n\n    let whereClause = 'WHERE department_id = $1';\n    let params = [id];\n\n    if (active !== 'all') {\n      whereClause += ' AND is_active = $2';\n      params.push(active === 'true');\n    }\n\n    const result = await query(`\n      SELECT \n        id, employee_code, name, email, phone, position, \n        hire_date, termination_date, salary, is_active\n      FROM employees \n      ${whereClause}\n      ORDER BY name ASC\n    `, params);\n\n    res.json({\n      success: true,\n      data: result.rows\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar funcionários do departamento:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// GET /api/departments/stats/budget - Estatísticas de orçamento\nrouter.get('/stats/budget', async (req, res) => {\n  try {\n    const result = await query(`\n      SELECT \n        d.name,\n        d.budget,\n        COUNT(e.id) as employee_count,\n        AVG(e.salary) as avg_salary,\n        SUM(e.salary) as total_salaries,\n        CASE \n          WHEN d.budget > 0 THEN (SUM(e.salary) / d.budget * 100)\n          ELSE 0\n        END as budget_usage_percent\n      FROM departments d\n      LEFT JOIN employees e ON d.id = e.department_id AND e.is_active = true\n      WHERE d.is_active = true\n      GROUP BY d.id, d.name, d.budget\n      ORDER BY budget_usage_percent DESC\n    `);\n\n    res.json({\n      success: true,\n      data: result.rows\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar estatísticas de orçamento:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\nmodule.exports = router;","size_bytes":9350},"server/routes/employees.js":{"content":"const express = require('express');\nconst { body, validationResult, query: expressQuery } = require('express-validator');\nconst { query } = require('../database/connection');\nconst { auditLog } = require('../middleware/auth');\nconst router = express.Router();\n\n// GET /api/employees - Lista todos os funcionários\nrouter.get('/', async (req, res) => {\n  try {\n    const { page = 1, limit = 50, search = '', department = '', active = 'true' } = req.query;\n    const offset = (page - 1) * limit;\n\n    let whereConditions = [];\n    let params = [];\n    let paramCount = 0;\n\n    // Filtro de busca\n    if (search) {\n      paramCount++;\n      whereConditions.push(`(name ILIKE $${paramCount} OR email ILIKE $${paramCount} OR employee_code ILIKE $${paramCount})`);\n      params.push(`%${search}%`);\n    }\n\n    // Filtro de departamento\n    if (department) {\n      paramCount++;\n      whereConditions.push(`department_id = $${paramCount}`);\n      params.push(department);\n    }\n\n    // Filtro de ativo/inativo\n    if (active !== 'all') {\n      paramCount++;\n      whereConditions.push(`is_active = $${paramCount}`);\n      params.push(active === 'true');\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    // Query principal\n    const employeesQuery = `\n      SELECT \n        e.*,\n        d.name as department_name\n      FROM employees e\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n      ORDER BY e.name ASC\n      LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}\n    `;\n\n    params.push(limit, offset);\n\n    // Query de contagem total\n    const countQuery = `\n      SELECT COUNT(*) \n      FROM employees e \n      LEFT JOIN departments d ON e.department_id = d.id \n      ${whereClause}\n    `;\n\n    const [employeesResult, countResult] = await Promise.all([\n      query(employeesQuery, params),\n      query(countQuery, params.slice(0, -2)) // Remove limit e offset\n    ]);\n\n    const total = parseInt(countResult.rows[0].count);\n    const totalPages = Math.ceil(total / limit);\n\n    res.json({\n      success: true,\n      data: employeesResult.rows,\n      pagination: {\n        page: parseInt(page),\n        limit: parseInt(limit),\n        total,\n        totalPages,\n        hasNext: page < totalPages,\n        hasPrev: page > 1\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar funcionários:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// GET /api/employees/:id - Busca funcionário por ID\nrouter.get('/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await query(`\n      SELECT \n        e.*,\n        d.name as department_name\n      FROM employees e\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE e.id = $1\n    `, [id]);\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        error: 'Funcionário não encontrado'\n      });\n    }\n\n    res.json({\n      success: true,\n      data: result.rows[0]\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar funcionário:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// POST /api/employees - Cria novo funcionário\nrouter.post('/', [\n  body('name').isLength({ min: 2 }).withMessage('Nome deve ter no mínimo 2 caracteres'),\n  body('email').optional().isEmail().normalizeEmail().withMessage('Email inválido'),\n  body('employee_code').isLength({ min: 1 }).withMessage('Código do funcionário é obrigatório'),\n  body('cpf').optional().isLength({ min: 11, max: 14 }).withMessage('CPF inválido'),\n  body('hire_date').isISO8601().withMessage('Data de admissão inválida'),\n  body('department_id').optional().isUUID().withMessage('ID do departamento inválido'),\n  body('salary').optional().isFloat({ min: 0 }).withMessage('Salário deve ser um valor positivo')\n], auditLog('CREATE_EMPLOYEE'), async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        error: 'Dados inválidos',\n        details: errors.array()\n      });\n    }\n\n    const {\n      name,\n      email,\n      phone,\n      cpf,\n      birth_date,\n      hire_date,\n      department_id,\n      position,\n      cbo_code,\n      salary,\n      employee_code,\n      address,\n      emergency_contact,\n      documents\n    } = req.body;\n\n    // Verifica se código do funcionário já existe\n    const existingEmployee = await query(\n      'SELECT id FROM employees WHERE employee_code = $1',\n      [employee_code]\n    );\n\n    if (existingEmployee.rows.length > 0) {\n      return res.status(409).json({\n        error: 'Código do funcionário já existe'\n      });\n    }\n\n    // Verifica se email já existe (se fornecido)\n    if (email) {\n      const existingEmail = await query(\n        'SELECT id FROM employees WHERE email = $1',\n        [email]\n      );\n\n      if (existingEmail.rows.length > 0) {\n        return res.status(409).json({\n          error: 'Email já cadastrado'\n        });\n      }\n    }\n\n    // Insere novo funcionário\n    const result = await query(`\n      INSERT INTO employees (\n        name, email, phone, cpf, birth_date, hire_date, \n        department_id, position, cbo_code, salary, employee_code,\n        address, emergency_contact, documents\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)\n      RETURNING *\n    `, [\n      name, email, phone, cpf, birth_date, hire_date,\n      department_id, position, cbo_code, salary, employee_code,\n      address ? JSON.stringify(address) : null,\n      emergency_contact ? JSON.stringify(emergency_contact) : null,\n      documents ? JSON.stringify(documents) : null\n    ]);\n\n    res.status(201).json({\n      success: true,\n      message: 'Funcionário criado com sucesso',\n      data: result.rows[0]\n    });\n\n  } catch (error) {\n    console.error('Erro ao criar funcionário:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// PUT /api/employees/:id - Atualiza funcionário\nrouter.put('/:id', [\n  body('name').optional().isLength({ min: 2 }).withMessage('Nome deve ter no mínimo 2 caracteres'),\n  body('email').optional().isEmail().normalizeEmail().withMessage('Email inválido'),\n  body('cpf').optional().isLength({ min: 11, max: 14 }).withMessage('CPF inválido'),\n  body('salary').optional().isFloat({ min: 0 }).withMessage('Salário deve ser um valor positivo')\n], auditLog('UPDATE_EMPLOYEE'), async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        error: 'Dados inválidos',\n        details: errors.array()\n      });\n    }\n\n    const { id } = req.params;\n\n    // Verifica se funcionário existe\n    const existingEmployee = await query('SELECT * FROM employees WHERE id = $1', [id]);\n    if (existingEmployee.rows.length === 0) {\n      return res.status(404).json({\n        error: 'Funcionário não encontrado'\n      });\n    }\n\n    const updateFields = [];\n    const updateValues = [];\n    let paramCount = 0;\n\n    // Constrói query dinamicamente apenas com campos fornecidos\n    Object.keys(req.body).forEach(key => {\n      if (req.body[key] !== undefined && key !== 'id') {\n        paramCount++;\n        updateFields.push(`${key} = $${paramCount}`);\n        \n        // Serializa objetos JSON se necessário\n        if (['address', 'emergency_contact', 'documents'].includes(key) && typeof req.body[key] === 'object') {\n          updateValues.push(JSON.stringify(req.body[key]));\n        } else {\n          updateValues.push(req.body[key]);\n        }\n      }\n    });\n\n    if (updateFields.length === 0) {\n      return res.status(400).json({\n        error: 'Nenhum campo para atualizar'\n      });\n    }\n\n    paramCount++;\n    updateValues.push(id);\n\n    const updateQuery = `\n      UPDATE employees \n      SET ${updateFields.join(', ')}, updated_at = CURRENT_TIMESTAMP\n      WHERE id = $${paramCount}\n      RETURNING *\n    `;\n\n    const result = await query(updateQuery, updateValues);\n\n    res.json({\n      success: true,\n      message: 'Funcionário atualizado com sucesso',\n      data: result.rows[0]\n    });\n\n  } catch (error) {\n    console.error('Erro ao atualizar funcionário:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// DELETE /api/employees/:id - Remove funcionário (soft delete)\nrouter.delete('/:id', auditLog('DELETE_EMPLOYEE'), async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await query(\n      'UPDATE employees SET is_active = false, termination_date = CURRENT_DATE WHERE id = $1 RETURNING *',\n      [id]\n    );\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        error: 'Funcionário não encontrado'\n      });\n    }\n\n    res.json({\n      success: true,\n      message: 'Funcionário desativado com sucesso',\n      data: result.rows[0]\n    });\n\n  } catch (error) {\n    console.error('Erro ao desativar funcionário:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// GET /api/employees/stats/summary - Estatísticas resumidas\nrouter.get('/stats/summary', async (req, res) => {\n  try {\n    const stats = await query(`\n      SELECT \n        COUNT(*) as total,\n        COUNT(*) FILTER (WHERE is_active = true) as active,\n        COUNT(*) FILTER (WHERE is_active = false) as inactive,\n        COUNT(*) FILTER (WHERE hire_date >= CURRENT_DATE - INTERVAL '30 days') as recent_hires,\n        AVG(salary) FILTER (WHERE salary > 0 AND is_active = true) as average_salary\n      FROM employees\n    `);\n\n    const departmentStats = await query(`\n      SELECT \n        d.name,\n        COUNT(e.id) as employee_count\n      FROM departments d\n      LEFT JOIN employees e ON d.id = e.department_id AND e.is_active = true\n      GROUP BY d.id, d.name\n      ORDER BY employee_count DESC\n    `);\n\n    res.json({\n      success: true,\n      data: {\n        general: stats.rows[0],\n        byDepartment: departmentStats.rows\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar estatísticas:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\nmodule.exports = router;","size_bytes":10297},"server/routes/reports.js":{"content":"const express = require('express');\nconst { query } = require('../database/connection');\nconst router = express.Router();\n\n// GET /api/reports/employees - Relatório de funcionários\nrouter.get('/employees', async (req, res) => {\n  try {\n    const { \n      department = '', \n      status = 'active',\n      hire_date_from = '',\n      hire_date_to = '',\n      export_format = 'json'\n    } = req.query;\n\n    let whereConditions = [];\n    let params = [];\n    let paramCount = 0;\n\n    // Filtros\n    if (department) {\n      paramCount++;\n      whereConditions.push(`e.department_id = $${paramCount}`);\n      params.push(department);\n    }\n\n    if (status === 'active') {\n      paramCount++;\n      whereConditions.push(`e.is_active = $${paramCount}`);\n      params.push(true);\n    } else if (status === 'inactive') {\n      paramCount++;\n      whereConditions.push(`e.is_active = $${paramCount}`);\n      params.push(false);\n    }\n\n    if (hire_date_from) {\n      paramCount++;\n      whereConditions.push(`e.hire_date >= $${paramCount}`);\n      params.push(hire_date_from);\n    }\n\n    if (hire_date_to) {\n      paramCount++;\n      whereConditions.push(`e.hire_date <= $${paramCount}`);\n      params.push(hire_date_to);\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    const result = await query(`\n      SELECT \n        e.employee_code,\n        e.name,\n        e.email,\n        e.phone,\n        e.position,\n        e.hire_date,\n        e.termination_date,\n        e.salary,\n        e.is_active,\n        d.name as department_name,\n        EXTRACT(YEAR FROM AGE(CURRENT_DATE, e.hire_date)) as years_of_service\n      FROM employees e\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n      ORDER BY e.name ASC\n    `, params);\n\n    // Estatísticas resumidas\n    const summary = await query(`\n      SELECT \n        COUNT(*) as total_count,\n        AVG(salary) FILTER (WHERE salary > 0) as avg_salary,\n        AVG(EXTRACT(YEAR FROM AGE(CURRENT_DATE, hire_date))) as avg_years_service,\n        COUNT(*) FILTER (WHERE is_active = true) as active_count,\n        COUNT(*) FILTER (WHERE is_active = false) as inactive_count\n      FROM employees e\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n    `, params);\n\n    res.json({\n      success: true,\n      data: {\n        employees: result.rows,\n        summary: summary.rows[0],\n        filters_applied: {\n          department: department || 'todos',\n          status,\n          hire_date_from: hire_date_from || 'início',\n          hire_date_to: hire_date_to || 'hoje'\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro no relatório de funcionários:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// GET /api/reports/requests - Relatório de requisições\nrouter.get('/requests', async (req, res) => {\n  try {\n    const {\n      start_date = '',\n      end_date = '',\n      status = '',\n      department = '',\n      request_type = '',\n      employee = ''\n    } = req.query;\n\n    let whereConditions = [];\n    let params = [];\n    let paramCount = 0;\n\n    // Filtros de data\n    if (start_date) {\n      paramCount++;\n      whereConditions.push(`r.created_at >= $${paramCount}`);\n      params.push(start_date);\n    }\n\n    if (end_date) {\n      paramCount++;\n      whereConditions.push(`r.created_at <= $${paramCount}`);\n      params.push(end_date + ' 23:59:59');\n    }\n\n    // Outros filtros\n    if (status) {\n      paramCount++;\n      whereConditions.push(`r.status = $${paramCount}`);\n      params.push(status);\n    }\n\n    if (department) {\n      paramCount++;\n      whereConditions.push(`e.department_id = $${paramCount}`);\n      params.push(department);\n    }\n\n    if (request_type) {\n      paramCount++;\n      whereConditions.push(`r.request_type_id = $${paramCount}`);\n      params.push(request_type);\n    }\n\n    if (employee) {\n      paramCount++;\n      whereConditions.push(`r.employee_id = $${paramCount}`);\n      params.push(employee);\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    // Dados principais\n    const requestsData = await query(`\n      SELECT \n        r.title,\n        r.status,\n        r.priority,\n        r.created_at,\n        r.approved_at,\n        r.amount,\n        e.name as employee_name,\n        e.employee_code,\n        d.name as department_name,\n        rt.name as request_type_name,\n        rt.category,\n        u.name as approver_name,\n        CASE \n          WHEN r.approved_at IS NOT NULL THEN \n            EXTRACT(EPOCH FROM (r.approved_at - r.created_at))/3600\n          ELSE NULL\n        END as approval_time_hours\n      FROM requests r\n      LEFT JOIN employees e ON r.employee_id = e.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      LEFT JOIN request_types rt ON r.request_type_id = rt.id\n      LEFT JOIN users u ON r.approver_id = u.id\n      ${whereClause}\n      ORDER BY r.created_at DESC\n    `, params);\n\n    // Estatísticas\n    const statistics = await query(`\n      SELECT \n        COUNT(*) as total_requests,\n        COUNT(*) FILTER (WHERE r.status = 'pending') as pending,\n        COUNT(*) FILTER (WHERE r.status = 'approved') as approved,\n        COUNT(*) FILTER (WHERE r.status = 'rejected') as rejected,\n        ROUND(AVG(r.amount) FILTER (WHERE r.amount > 0), 2) as avg_amount,\n        SUM(r.amount) FILTER (WHERE r.status = 'approved') as total_approved_amount,\n        ROUND(AVG(EXTRACT(EPOCH FROM (r.approved_at - r.created_at))/3600) FILTER (WHERE r.approved_at IS NOT NULL), 2) as avg_approval_hours\n      FROM requests r\n      LEFT JOIN employees e ON r.employee_id = e.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      LEFT JOIN request_types rt ON r.request_type_id = rt.id\n      ${whereClause}\n    `, params);\n\n    // Por tipo de requisição\n    const byType = await query(`\n      SELECT \n        rt.name,\n        rt.category,\n        COUNT(r.id) as count,\n        ROUND(AVG(CASE WHEN r.status = 'approved' THEN 100.0 ELSE 0.0 END), 2) as approval_rate\n      FROM request_types rt\n      LEFT JOIN requests r ON rt.id = r.request_type_id\n      LEFT JOIN employees e ON r.employee_id = e.id\n      ${whereClause.replace('WHERE', 'WHERE rt.is_active = true AND')}\n      GROUP BY rt.id, rt.name, rt.category\n      ORDER BY count DESC\n    `, params);\n\n    res.json({\n      success: true,\n      data: {\n        requests: requestsData.rows,\n        statistics: statistics.rows[0],\n        byType: byType.rows,\n        period: {\n          start_date: start_date || 'início',\n          end_date: end_date || 'hoje',\n          total_days: start_date && end_date \n            ? Math.ceil((new Date(end_date) - new Date(start_date)) / (1000 * 60 * 60 * 24))\n            : 'indefinido'\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro no relatório de requisições:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// GET /api/reports/departments - Relatório de departamentos\nrouter.get('/departments', async (req, res) => {\n  try {\n    const result = await query(`\n      SELECT \n        d.name as department_name,\n        d.description,\n        d.budget,\n        COUNT(e.id) as employee_count,\n        COUNT(e.id) FILTER (WHERE e.is_active = true) as active_employees,\n        AVG(e.salary) FILTER (WHERE e.is_active = true AND e.salary > 0) as avg_salary,\n        SUM(e.salary) FILTER (WHERE e.is_active = true) as total_salary_cost,\n        CASE \n          WHEN d.budget > 0 THEN ROUND((SUM(e.salary) FILTER (WHERE e.is_active = true) / d.budget * 100)::numeric, 2)\n          ELSE 0\n        END as budget_utilization_percent,\n        manager.name as manager_name,\n        COUNT(r.id) FILTER (WHERE r.created_at >= CURRENT_DATE - INTERVAL '30 days') as requests_last_30_days\n      FROM departments d\n      LEFT JOIN employees e ON d.id = e.department_id\n      LEFT JOIN employees manager ON d.manager_id = manager.id\n      LEFT JOIN requests r ON e.id = r.employee_id\n      WHERE d.is_active = true\n      GROUP BY d.id, d.name, d.description, d.budget, manager.name\n      ORDER BY employee_count DESC\n    `);\n\n    // Estatísticas gerais\n    const summary = await query(`\n      SELECT \n        COUNT(*) as total_departments,\n        SUM(budget) as total_budget,\n        AVG(employee_count) as avg_employees_per_dept,\n        SUM(total_salary_cost) as total_salary_costs\n      FROM (\n        SELECT \n          d.budget,\n          COUNT(e.id) as employee_count,\n          SUM(e.salary) FILTER (WHERE e.is_active = true) as total_salary_cost\n        FROM departments d\n        LEFT JOIN employees e ON d.id = e.department_id\n        WHERE d.is_active = true\n        GROUP BY d.id, d.budget\n      ) dept_stats\n    `);\n\n    res.json({\n      success: true,\n      data: {\n        departments: result.rows,\n        summary: summary.rows[0]\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro no relatório de departamentos:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// GET /api/reports/payroll - Relatório de folha de pagamento\nrouter.get('/payroll', async (req, res) => {\n  try {\n    const { department = '', month = '', year = new Date().getFullYear() } = req.query;\n\n    let whereConditions = ['e.is_active = true', 'e.salary > 0'];\n    let params = [];\n    let paramCount = 0;\n\n    if (department) {\n      paramCount++;\n      whereConditions.push(`e.department_id = $${paramCount}`);\n      params.push(department);\n    }\n\n    const whereClause = `WHERE ${whereConditions.join(' AND ')}`;\n\n    const payrollData = await query(`\n      SELECT \n        e.employee_code,\n        e.name,\n        e.salary,\n        e.position,\n        d.name as department_name,\n        e.hire_date,\n        EXTRACT(YEAR FROM AGE(CURRENT_DATE, e.hire_date)) as years_of_service,\n        -- Simulação de cálculos básicos de folha\n        ROUND(e.salary * 0.08, 2) as inss_employee,\n        ROUND(e.salary * 0.11, 2) as inss_employer,\n        ROUND(e.salary * 0.08, 2) as fgts,\n        ROUND(e.salary * 0.075, 2) as income_tax_estimate,\n        ROUND(e.salary - (e.salary * 0.08) - (e.salary * 0.075), 2) as net_salary_estimate\n      FROM employees e\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n      ORDER BY d.name, e.name\n    `, params);\n\n    // Totais por departamento\n    const departmentTotals = await query(`\n      SELECT \n        d.name as department_name,\n        COUNT(e.id) as employee_count,\n        SUM(e.salary) as total_gross_salary,\n        SUM(e.salary * 0.08) as total_inss_employee,\n        SUM(e.salary * 0.11) as total_inss_employer,\n        SUM(e.salary * 0.08) as total_fgts,\n        SUM(e.salary - (e.salary * 0.08) - (e.salary * 0.075)) as total_net_salary,\n        AVG(e.salary) as avg_salary\n      FROM employees e\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n      GROUP BY d.id, d.name\n      ORDER BY total_gross_salary DESC\n    `, params);\n\n    // Totais gerais\n    const generalTotals = await query(`\n      SELECT \n        COUNT(e.id) as total_employees,\n        SUM(e.salary) as total_gross_payroll,\n        SUM(e.salary * 0.08) as total_inss_employee,\n        SUM(e.salary * 0.11) as total_inss_employer,\n        SUM(e.salary * 0.08) as total_fgts,\n        SUM(e.salary * 0.075) as total_income_tax,\n        SUM(e.salary - (e.salary * 0.08) - (e.salary * 0.075)) as total_net_payroll,\n        AVG(e.salary) as avg_salary,\n        MIN(e.salary) as min_salary,\n        MAX(e.salary) as max_salary\n      FROM employees e\n      LEFT JOIN departments d ON e.department_id = d.id\n      ${whereClause}\n    `, params);\n\n    res.json({\n      success: true,\n      data: {\n        employees: payrollData.rows,\n        departmentTotals: departmentTotals.rows,\n        generalTotals: generalTotals.rows[0],\n        parameters: {\n          department: department || 'todos',\n          year: parseInt(year),\n          generated_at: new Date().toISOString()\n        },\n        disclaimer: 'Este relatório contém estimativas básicas. Consulte um contador para cálculos oficiais.'\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro no relatório de folha:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// GET /api/reports/audit - Relatório de auditoria\nrouter.get('/audit', async (req, res) => {\n  try {\n    const { \n      start_date = '', \n      end_date = '', \n      user_id = '', \n      action = '' \n    } = req.query;\n\n    let whereConditions = [];\n    let params = [];\n    let paramCount = 0;\n\n    if (start_date) {\n      paramCount++;\n      whereConditions.push(`a.created_at >= $${paramCount}`);\n      params.push(start_date);\n    }\n\n    if (end_date) {\n      paramCount++;\n      whereConditions.push(`a.created_at <= $${paramCount}`);\n      params.push(end_date + ' 23:59:59');\n    }\n\n    if (user_id) {\n      paramCount++;\n      whereConditions.push(`a.user_id = $${paramCount}`);\n      params.push(user_id);\n    }\n\n    if (action) {\n      paramCount++;\n      whereConditions.push(`a.action ILIKE $${paramCount}`);\n      params.push(`%${action}%`);\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    const auditLogs = await query(`\n      SELECT \n        a.action,\n        a.table_name,\n        a.record_id,\n        a.ip_address,\n        a.created_at,\n        u.name as user_name,\n        u.email as user_email,\n        e.name as employee_name\n      FROM audit_logs a\n      LEFT JOIN users u ON a.user_id = u.id\n      LEFT JOIN employees e ON a.employee_id = e.id\n      ${whereClause}\n      ORDER BY a.created_at DESC\n      LIMIT 1000\n    `, params);\n\n    // Estatísticas de auditoria\n    const auditStats = await query(`\n      SELECT \n        COUNT(*) as total_actions,\n        COUNT(DISTINCT user_id) as unique_users,\n        COUNT(*) FILTER (WHERE action LIKE 'CREATE%') as creates,\n        COUNT(*) FILTER (WHERE action LIKE 'UPDATE%') as updates,\n        COUNT(*) FILTER (WHERE action LIKE 'DELETE%') as deletes,\n        COUNT(*) FILTER (WHERE created_at >= CURRENT_DATE) as today_actions\n      FROM audit_logs a\n      ${whereClause}\n    `, params);\n\n    res.json({\n      success: true,\n      data: {\n        logs: auditLogs.rows,\n        statistics: auditStats.rows[0],\n        period: {\n          start_date: start_date || 'início',\n          end_date: end_date || 'hoje'\n        }\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro no relatório de auditoria:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\nmodule.exports = router;","size_bytes":14779},"server/routes/requests.js":{"content":"const express = require('express');\nconst { body, validationResult } = require('express-validator');\nconst { query } = require('../database/connection');\nconst { auditLog } = require('../middleware/auth');\nconst router = express.Router();\n\n// GET /api/request-types - Lista todos os tipos de requisição disponíveis\nrouter.get('/types', async (req, res) => {\n  try {\n    console.log('📋 Buscando tipos de requisição...');\n    const db = require('../database/connection');\n    \n    const result = await db.query(`\n      SELECT \n        id,\n        name,\n        description,\n        category,\n        form_fields,\n        approval_levels,\n        active,\n        created_at,\n        updated_at\n      FROM request_types \n      WHERE active = true\n      ORDER BY name ASC\n    `);\n    \n    console.log(`✅ Encontrados ${result.rows.length} tipos de requisição`);\n    \n    res.json({\n      success: true,\n      data: result.rows,\n      count: result.rows.length,\n      message: `${result.rows.length} tipos de requisição disponíveis`\n    });\n    \n  } catch (error) {\n    console.error('❌ Erro ao buscar tipos de requisição:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Erro interno do servidor',\n      message: error.message\n    });\n  }\n});\n\n// GET /api/requests/pending - Lista apenas requisições pendentes de aprovação\nrouter.get('/pending', async (req, res) => {\n  try {\n    console.log('⏳ Buscando requisições pendentes para aprovação...');\n    const db = require('../database/connection');\n    \n    const pendingRequestsQuery = {\n      text: `\n      SELECT \n        r.id,\n        (r.data->>'title')::text as title,\n        (r.data->>'description')::text as description,\n        r.status,\n        r.priority,\n        r.created_at,\n        r.updated_at,\n        e.name as employee_name,\n        e.employee_code,\n        e.email as employee_email,\n        rt.name as request_type_name,\n        rt.category,\n        d.name as department_name\n      FROM requests r\n      LEFT JOIN employees e ON r.employee_id = e.id\n      LEFT JOIN request_types rt ON r.request_type_id = rt.id\n      LEFT JOIN departments d ON e.department_id = d.id\n      WHERE r.status = 'pending'\n      ORDER BY \n        CASE r.priority \n          WHEN 'urgent' THEN 1\n          WHEN 'high' THEN 2\n          WHEN 'medium' THEN 3\n          WHEN 'low' THEN 4\n          ELSE 5\n        END,\n        r.created_at ASC\n    `\n    };\n\n    const result = await db.query(pendingRequestsQuery);\n    console.log(`📊 Query executada: ${JSON.stringify(pendingRequestsQuery, null, 2)}`);\n    console.log(`✅ Encontradas ${result.rows.length} requisições pendentes`);\n    \n    res.json({\n      success: true,\n      data: result.rows,\n      count: result.rows.length\n    });\n    \n  } catch (error) {\n    console.error('❌ Erro ao buscar requisições pendentes:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// GET /api/requests - Lista todas as requisições\nrouter.get('/', async (req, res) => {\n  try {\n    console.log('⏳ Buscando todas as requisições...');\n    const db = require('../database/connection');\n    \n    const { \n      status = '', \n      employee_id = '', \n      priority = ''\n    } = req.query;\n\n    let whereConditions = [];\n    let params = [];\n    let paramCount = 0;\n\n    // Filtros\n    if (status) {\n      paramCount++;\n      whereConditions.push(`r.status = $${paramCount}`);\n      params.push(status);\n    }\n\n    if (employee_id) {\n      paramCount++;\n      whereConditions.push(`r.employee_id = $${paramCount}`);\n      params.push(employee_id);\n    }\n\n    if (priority) {\n      paramCount++;\n      whereConditions.push(`r.priority = $${paramCount}`);\n      params.push(priority);\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    // Query principal\n    const requestsQuery = {\n      text: `\n        SELECT \n          r.id,\n          (r.data->>'title')::text as title,\n          (r.data->>'description')::text as description,\n          r.status,\n          r.priority,\n          r.created_at,\n          r.updated_at,\n          e.name as employee_name,\n          e.employee_code,\n          e.email as employee_email,\n          rt.name as request_type_name,\n          rt.category,\n          d.name as department_name\n        FROM requests r\n        LEFT JOIN employees e ON r.employee_id = e.id\n        LEFT JOIN request_types rt ON r.request_type_id = rt.id\n        LEFT JOIN departments d ON e.department_id = d.id\n        ${whereClause}\n        ORDER BY r.created_at DESC\n      `,\n      values: params\n    };\n\n    const result = await db.query(requestsQuery);\n    console.log(`📊 Query executada: ${JSON.stringify(requestsQuery, null, 2)}`);\n    console.log(`✅ Encontradas ${result.rows.length} requisições`);\n\n    res.json({\n      success: true,\n      requests: result.rows,\n      count: result.rows.length,\n      message: result.rows.length === 0 ? 'Nenhuma requisição encontrada' : `${result.rows.length} requisições encontradas`\n    });\n\n  } catch (error) {\n    console.error('❌ Erro ao buscar requisições:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Erro interno do servidor',\n      message: error.message\n    });\n  }\n});\n\n// GET /api/requests/:id - Busca requisição por ID\nrouter.get('/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const result = await query(`\n      SELECT \n        r.*,\n        e.name as employee_name,\n        e.email as employee_email,\n        e.employee_code,\n        rt.name as request_type_name,\n        rt.category,\n        rt.fields_config,\n        u.name as approver_name\n      FROM requests r\n      LEFT JOIN employees e ON r.employee_id = e.id\n      LEFT JOIN request_types rt ON r.request_type_id = rt.id\n      LEFT JOIN users u ON r.approver_id = u.id\n      WHERE r.id = $1\n    `, [id]);\n\n    if (result.rows.length === 0) {\n      return res.status(404).json({\n        error: 'Requisição não encontrada'\n      });\n    }\n\n    // Busca histórico de aprovações\n    const approvalsResult = await query(`\n      SELECT \n        a.*,\n        u.name as approver_name\n      FROM approvals a\n      LEFT JOIN users u ON a.approver_id = u.id\n      WHERE a.request_id = $1\n      ORDER BY a.approved_at DESC\n    `, [id]);\n\n    res.json({\n      success: true,\n      data: {\n        ...result.rows[0],\n        approvals_history: approvalsResult.rows\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar requisição:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// POST /api/requests - Cria nova requisição\nrouter.post('/', [\n  body('employee_id').isUUID().withMessage('ID do funcionário inválido'),\n  body('request_type_id').isUUID().withMessage('ID do tipo de requisição inválido'),\n  body('title').isLength({ min: 5 }).withMessage('Título deve ter no mínimo 5 caracteres'),\n  body('priority').optional().isIn(['low', 'normal', 'high', 'urgent']).withMessage('Prioridade inválida')\n], auditLog('CREATE_REQUEST'), async (req, res) => {\n  try {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({\n        error: 'Dados inválidos',\n        details: errors.array()\n      });\n    }\n\n    const {\n      employee_id,\n      request_type_id,\n      title,\n      description,\n      priority = 'normal',\n      requested_date,\n      start_date,\n      end_date,\n      amount,\n      form_data,\n      attachments\n    } = req.body;\n\n    // Verifica se funcionário existe\n    const employeeExists = await query(\n      'SELECT id FROM employees WHERE id = $1 AND is_active = true',\n      [employee_id]\n    );\n\n    if (employeeExists.rows.length === 0) {\n      return res.status(400).json({\n        error: 'Funcionário não encontrado ou inativo'\n      });\n    }\n\n    // Verifica se tipo de requisição existe\n    const requestTypeExists = await query(\n      'SELECT id, requires_approval FROM request_types WHERE id = $1 AND is_active = true',\n      [request_type_id]\n    );\n\n    if (requestTypeExists.rows.length === 0) {\n      return res.status(400).json({\n        error: 'Tipo de requisição não encontrado ou inativo'\n      });\n    }\n\n    const result = await query(`\n      INSERT INTO requests (\n        employee_id, request_type_id, title, description, priority,\n        requested_date, start_date, end_date, amount, form_data, attachments\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\n      RETURNING *\n    `, [\n      employee_id, request_type_id, title, description, priority,\n      requested_date, start_date, end_date, amount,\n      form_data ? JSON.stringify(form_data) : null,\n      attachments ? JSON.stringify(attachments) : null\n    ]);\n\n    res.status(201).json({\n      success: true,\n      message: 'Requisição criada com sucesso',\n      data: result.rows[0]\n    });\n\n  } catch (error) {\n    console.error('Erro ao criar requisição:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\n// PUT /api/requests/:id/approve - Aprova requisição\nrouter.put('/:id/approve', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { comments = '' } = req.body;\n    \n    console.log(`✅ Aprovando requisição ID: ${id}`);\n    const db = require('../database/connection');\n\n    // Verifica se requisição existe e está pendente\n    const requestResult = await db.query({\n      text: 'SELECT * FROM requests WHERE id = $1 AND status = $2',\n      values: [id, 'pending']\n    });\n\n    if (requestResult.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Requisição não encontrada ou já processada'\n      });\n    }\n\n    // Atualiza requisição\n    const updateResult = await db.query({\n      text: `\n      UPDATE requests \n      SET status = 'approved', updated_at = CURRENT_TIMESTAMP\n      WHERE id = $1\n      RETURNING *\n    `,\n      values: [id]\n    });\n\n    console.log(`✅ Requisição ${id} aprovada com sucesso`);\n\n    res.json({\n      success: true,\n      message: 'Requisição aprovada com sucesso',\n      data: updateResult.rows[0]\n    });\n\n  } catch (error) {\n    console.error('❌ Erro ao aprovar requisição:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Erro interno do servidor',\n      message: error.message\n    });\n  }\n});\n\n// PUT /api/requests/:id/reject - Rejeita requisição\nrouter.put('/:id/reject', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { rejection_reason = 'Não especificado' } = req.body;\n    \n    console.log(`❌ Rejeitando requisição ID: ${id}`);\n    const db = require('../database/connection');\n\n    // Verifica se requisição existe e está pendente\n    const requestResult = await db.query({\n      text: 'SELECT * FROM requests WHERE id = $1 AND status = $2',\n      values: [id, 'pending']\n    });\n\n    if (requestResult.rows.length === 0) {\n      return res.status(404).json({\n        success: false,\n        error: 'Requisição não encontrada ou já processada'\n      });\n    }\n\n    // Atualiza requisição\n    const updateResult = await db.query({\n      text: `\n      UPDATE requests \n      SET status = 'rejected', updated_at = CURRENT_TIMESTAMP\n      WHERE id = $1\n      RETURNING *\n    `,\n      values: [id]\n    });\n\n    console.log(`❌ Requisição ${id} rejeitada: ${rejection_reason}`);\n\n    res.json({\n      success: true,\n      message: 'Requisição rejeitada com sucesso',\n      data: updateResult.rows[0],\n      rejection_reason\n    });\n\n  } catch (error) {\n    console.error('❌ Erro ao rejeitar requisição:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Erro interno do servidor',\n      message: error.message\n    });\n  }\n});\n\n// GET /api/requests/stats/summary - Estatísticas das requisições\nrouter.get('/stats/summary', async (req, res) => {\n  try {\n    const stats = await query(`\n      SELECT \n        COUNT(*) as total,\n        COUNT(*) FILTER (WHERE status = 'pending') as pending,\n        COUNT(*) FILTER (WHERE status = 'approved') as approved,\n        COUNT(*) FILTER (WHERE status = 'rejected') as rejected,\n        COUNT(*) FILTER (WHERE created_at >= CURRENT_DATE - INTERVAL '30 days') as recent\n      FROM requests\n    `);\n\n    const byType = await query(`\n      SELECT \n        rt.name,\n        rt.category,\n        COUNT(r.id) as request_count\n      FROM request_types rt\n      LEFT JOIN requests r ON rt.id = r.request_type_id\n      GROUP BY rt.id, rt.name, rt.category\n      ORDER BY request_count DESC\n    `);\n\n    const byPriority = await query(`\n      SELECT \n        priority,\n        COUNT(*) as count\n      FROM requests\n      WHERE status = 'pending'\n      GROUP BY priority\n      ORDER BY \n        CASE priority \n          WHEN 'urgent' THEN 1\n          WHEN 'high' THEN 2\n          WHEN 'normal' THEN 3\n          WHEN 'low' THEN 4\n        END\n    `);\n\n    res.json({\n      success: true,\n      data: {\n        general: stats.rows[0],\n        byType: byType.rows,\n        byPriority: byPriority.rows\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar estatísticas:', error);\n    res.status(500).json({\n      error: 'Erro interno do servidor'\n    });\n  }\n});\n\nmodule.exports = router;","size_bytes":13402},"client/src/components/Header.jsx":{"content":"import { Fragment } from 'react'\nimport { Menu, Transition } from '@headlessui/react'\nimport { BellIcon, UserCircleIcon } from '@heroicons/react/24/outline'\n// import { useAuth } from '../contexts/AuthContext'\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ')\n}\n\nexport default function Header() {\n  // const { user, logout } = useAuth()\n  const user = { name: 'Usuário Teste', email: 'teste@empresa.com' }\n  const logout = () => console.log('logout')\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200\">\n      <div className=\"px-6 py-4 flex items-center justify-between\">\n        {/* Page title will be dynamic based on route */}\n        <div>\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Dashboard</h1>\n          <p className=\"text-sm text-gray-500\">Bem-vindo ao Sistema RH Pro</p>\n        </div>\n\n        {/* Right side */}\n        <div className=\"flex items-center space-x-4\">\n          {/* Notifications */}\n          <button\n            type=\"button\"\n            className=\"p-2 text-gray-400 hover:text-gray-500 rounded-md hover:bg-gray-100\"\n          >\n            <span className=\"sr-only\">Ver notificações</span>\n            <BellIcon className=\"h-6 w-6\" aria-hidden=\"true\" />\n          </button>\n\n          {/* Profile dropdown */}\n          <Menu as=\"div\" className=\"relative\">\n            <div>\n              <Menu.Button className=\"flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-thermas-500\">\n                <span className=\"sr-only\">Abrir menu do usuário</span>\n                <UserCircleIcon className=\"h-8 w-8 text-gray-400\" />\n                <div className=\"ml-3 text-left\">\n                  <p className=\"text-sm font-medium text-gray-900\">{user?.name}</p>\n                  <p className=\"text-xs text-gray-500\">{user?.email}</p>\n                </div>\n              </Menu.Button>\n            </div>\n            <Transition\n              as={Fragment}\n              enter=\"transition ease-out duration-100\"\n              enterFrom=\"transform opacity-0 scale-95\"\n              enterTo=\"transform opacity-100 scale-100\"\n              leave=\"transition ease-in duration-75\"\n              leaveFrom=\"transform opacity-100 scale-100\"\n              leaveTo=\"transform opacity-0 scale-95\"\n            >\n              <Menu.Items className=\"absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\n                <Menu.Item>\n                  {({ active }) => (\n                    <a\n                      href=\"#\"\n                      className={classNames(\n                        active ? 'bg-gray-100' : '',\n                        'block px-4 py-2 text-sm text-gray-700'\n                      )}\n                    >\n                      Seu Perfil\n                    </a>\n                  )}\n                </Menu.Item>\n                <Menu.Item>\n                  {({ active }) => (\n                    <a\n                      href=\"#\"\n                      className={classNames(\n                        active ? 'bg-gray-100' : '',\n                        'block px-4 py-2 text-sm text-gray-700'\n                      )}\n                    >\n                      Configurações\n                    </a>\n                  )}\n                </Menu.Item>\n                <Menu.Item>\n                  {({ active }) => (\n                    <button\n                      onClick={logout}\n                      className={classNames(\n                        active ? 'bg-gray-100' : '',\n                        'block w-full text-left px-4 py-2 text-sm text-gray-700'\n                      )}\n                    >\n                      Sair\n                    </button>\n                  )}\n                </Menu.Item>\n              </Menu.Items>\n            </Transition>\n          </Menu>\n        </div>\n      </div>\n    </header>\n  )\n}","size_bytes":3988},"client/src/components/Layout.jsx":{"content":"import { Outlet } from 'react-router-dom'\nimport Sidebar from './Sidebar'\nimport Header from './Header'\n\nexport default function Layout() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col\">\n        <Header />\n        <main className=\"flex-1 p-6\">\n          <Outlet />\n        </main>\n      </div>\n    </div>\n  )\n}","size_bytes":388},"client/src/components/Loading.jsx":{"content":"export default function Loading({ text = 'Carregando...' }) {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center\">\n      <div className=\"text-center\">\n        <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-thermas-600\"></div>\n        <p className=\"mt-4 text-gray-600\">{text}</p>\n      </div>\n    </div>\n  )\n}","size_bytes":368},"client/src/components/ProtectedRoute.jsx":{"content":"import { Navigate } from 'react-router-dom'\nimport { useAuth } from '../contexts/AuthContext'\nimport Loading from './Loading'\n\nexport default function ProtectedRoute({ children }) {\n  const { user, loading } = useAuth()\n\n  if (loading) {\n    return <Loading />\n  }\n\n  if (!user) {\n    return <Navigate to=\"/login\" replace />\n  }\n\n  return children\n}","size_bytes":349},"client/src/components/Sidebar.jsx":{"content":"import { NavLink, useLocation } from 'react-router-dom'\nimport { \n  HomeIcon, \n  UsersIcon, \n  BuildingOfficeIcon,\n  DocumentTextIcon,\n  ChartBarIcon,\n  Cog6ToothIcon\n} from '@heroicons/react/24/outline'\n\nconst navigation = [\n  { name: 'Dashboard', href: '/', icon: HomeIcon },\n  { name: 'Funcionários', href: '/employees', icon: UsersIcon },\n  { name: 'Departamentos', href: '/departments', icon: BuildingOfficeIcon },\n  { name: 'Requisições', href: '/requests', icon: DocumentTextIcon },\n  { name: 'Relatórios', href: '/reports', icon: ChartBarIcon },\n  { name: 'Configurações', href: '/settings', icon: Cog6ToothIcon },\n]\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ')\n}\n\nexport default function Sidebar() {\n  const location = useLocation()\n\n  return (\n    <div className=\"flex flex-col w-64 bg-white shadow-sm border-r border-gray-200\">\n      {/* Logo */}\n      <div className=\"flex items-center px-6 py-4 border-b border-gray-200\">\n        <img \n          className=\"h-8 w-auto\" \n          src=\"/logo-thermas.png\" \n          alt=\"Thermas\" \n        />\n        <div className=\"ml-3\">\n          <h1 className=\"text-lg font-semibold text-gray-900\">RH Pro</h1>\n          <p className=\"text-sm text-gray-500\">Sistema de Gestão</p>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 px-4 py-6 space-y-1\">\n        {navigation.map((item) => {\n          const isActive = location.pathname === item.href\n          return (\n            <NavLink\n              key={item.name}\n              to={item.href}\n              className={classNames(\n                isActive\n                  ? 'bg-thermas-50 border-r-2 border-thermas-600 text-thermas-700'\n                  : 'text-gray-700 hover:bg-gray-50',\n                'group flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors'\n              )}\n            >\n              <item.icon\n                className={classNames(\n                  isActive ? 'text-thermas-500' : 'text-gray-400 group-hover:text-gray-500',\n                  'mr-3 h-5 w-5'\n                )}\n                aria-hidden=\"true\"\n              />\n              {item.name}\n            </NavLink>\n          )\n        })}\n      </nav>\n\n      {/* Footer */}\n      <div className=\"px-4 py-4 border-t border-gray-200\">\n        <p className=\"text-xs text-gray-500 text-center\">\n          Sistema RH Pro v1.0\n        </p>\n      </div>\n    </div>\n  )\n}","size_bytes":2456},"client/src/contexts/AuthContext.jsx":{"content":"import { createContext, useContext, useState, useEffect } from 'react'\nimport axios from 'axios'\nimport toast from 'react-hot-toast'\n\nconst AuthContext = createContext()\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider')\n  }\n  return context\n}\n\n// Configure axios defaults\naxios.defaults.baseURL = '/api'\naxios.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token')\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`\n  }\n  return config\n})\n\naxios.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token')\n      localStorage.removeItem('user')\n      window.location.href = '/login'\n    }\n    return Promise.reject(error)\n  }\n)\n\nexport default function AuthProvider({ children }) {\n  const [user, setUser] = useState(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    // Por enquanto, vamos pular a autenticação para testar\n    // Simular usuário logado\n    const mockUser = {\n      id: 1,\n      name: 'Usuário Teste',\n      email: 'teste@empresa.com'\n    }\n    setUser(mockUser)\n    setLoading(false)\n  }, [])\n\n  const checkTokenValidity = async () => {\n    try {\n      const response = await axios.get('/auth/me')\n      setUser(response.data.user)\n    } catch (error) {\n      console.error('Token inválido:', error)\n      logout()\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post('/auth/login', { email, password })\n      \n      const { token, user: userData } = response.data\n      \n      localStorage.setItem('token', token)\n      localStorage.setItem('user', JSON.stringify(userData))\n      setUser(userData)\n      \n      toast.success(`Bem-vindo, ${userData.name}!`)\n      return { success: true }\n      \n    } catch (error) {\n      const message = error.response?.data?.error || 'Erro no login'\n      toast.error(message)\n      return { success: false, error: message }\n    }\n  }\n\n  const logout = () => {\n    localStorage.removeItem('token')\n    localStorage.removeItem('user')\n    setUser(null)\n    toast.success('Logout realizado com sucesso')\n  }\n\n  const register = async (userData) => {\n    try {\n      const response = await axios.post('/auth/register', userData)\n      toast.success('Usuário criado com sucesso!')\n      return { success: true, data: response.data }\n    } catch (error) {\n      const message = error.response?.data?.error || 'Erro no registro'\n      toast.error(message)\n      return { success: false, error: message }\n    }\n  }\n\n  const refreshToken = async () => {\n    try {\n      const token = localStorage.getItem('token')\n      if (!token) return false\n\n      const response = await axios.post('/auth/refresh', { token })\n      const { token: newToken, user: userData } = response.data\n      \n      localStorage.setItem('token', newToken)\n      localStorage.setItem('user', JSON.stringify(userData))\n      setUser(userData)\n      \n      return true\n    } catch (error) {\n      console.error('Erro ao renovar token:', error)\n      logout()\n      return false\n    }\n  }\n\n  const value = {\n    user,\n    login,\n    logout,\n    register,\n    refreshToken,\n    loading,\n    isAuthenticated: !!user\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}","size_bytes":3493},"client/src/pages/Dashboard.jsx":{"content":"import { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { \n  UserGroupIcon, \n  BuildingOfficeIcon, \n  DocumentTextIcon,\n  ExclamationTriangleIcon \n} from '@heroicons/react/24/outline'\n\nfunction StatCard({ title, value, icon: Icon, color = 'bg-blue-600', textColor = 'text-blue-600' }) {\n  return (\n    <div className=\"bg-white overflow-hidden shadow rounded-lg\">\n      <div className=\"p-5\">\n        <div className=\"flex items-center\">\n          <div className=\"flex-shrink-0\">\n            <Icon className={`h-6 w-6 ${textColor}`} aria-hidden=\"true\" />\n          </div>\n          <div className=\"ml-5 w-0 flex-1\">\n            <dl>\n              <dt className=\"text-sm font-medium text-gray-500 truncate\">{title}</dt>\n              <dd className=\"text-lg font-medium text-gray-900\">{value || 0}</dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default function Dashboard() {\n  const [stats, setStats] = useState(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchDashboardData()\n  }, [])\n\n  const fetchDashboardData = async () => {\n    try {\n      const response = await axios.get('/api/dashboard')\n      setStats(response.data.data)\n    } catch (error) {\n      console.error('Erro ao buscar dados do dashboard:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-thermas-600\"></div>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">Dashboard</h1>\n        <p className=\"text-gray-600\">Visão geral do sistema RH</p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <StatCard\n          title=\"Funcionários Ativos\"\n          value={stats?.generalStats?.active_employees}\n          icon={UserGroupIcon}\n          color=\"bg-green-600\"\n          textColor=\"text-green-600\"\n        />\n        <StatCard\n          title=\"Departamentos\"\n          value={stats?.generalStats?.active_departments}\n          icon={BuildingOfficeIcon}\n          color=\"bg-blue-600\"\n          textColor=\"text-blue-600\"\n        />\n        <StatCard\n          title=\"Requisições Pendentes\"\n          value={stats?.generalStats?.pending_requests}\n          icon={DocumentTextIcon}\n          color=\"bg-yellow-600\"\n          textColor=\"text-yellow-600\"\n        />\n        <StatCard\n          title=\"Requisições Este Mês\"\n          value={stats?.generalStats?.recent_requests}\n          icon={ExclamationTriangleIcon}\n          color=\"bg-purple-600\"\n          textColor=\"text-purple-600\"\n        />\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Recent Hires */}\n        <div className=\"bg-white shadow rounded-lg\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Contratações Recentes</h3>\n          </div>\n          <div className=\"px-6 py-4\">\n            {stats?.recentHires?.length > 0 ? (\n              <div className=\"space-y-3\">\n                {stats.recentHires.map((hire, index) => (\n                  <div key={index} className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">{hire.name}</p>\n                      <p className=\"text-xs text-gray-500\">{hire.department_name}</p>\n                    </div>\n                    <p className=\"text-xs text-gray-500\">\n                      {new Date(hire.hire_date).toLocaleDateString('pt-BR')}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-sm text-gray-500\">Nenhuma contratação recente</p>\n            )}\n          </div>\n        </div>\n\n        {/* Urgent Requests */}\n        <div className=\"bg-white shadow rounded-lg\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Requisições Urgentes</h3>\n          </div>\n          <div className=\"px-6 py-4\">\n            {stats?.urgentRequests?.length > 0 ? (\n              <div className=\"space-y-3\">\n                {stats.urgentRequests.map((request, index) => (\n                  <div key={index} className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">{request.title}</p>\n                      <p className=\"text-xs text-gray-500\">{request.employee_name}</p>\n                    </div>\n                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                      request.priority === 'urgent' \n                        ? 'bg-red-100 text-red-800' \n                        : 'bg-yellow-100 text-yellow-800'\n                    }`}>\n                      {request.priority === 'urgent' ? 'Urgente' : 'Alta'}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-sm text-gray-500\">Nenhuma requisição urgente</p>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Department Stats */}\n      {stats?.departmentStats?.length > 0 && (\n        <div className=\"mt-8\">\n          <div className=\"bg-white shadow rounded-lg\">\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Departamentos por Tamanho</h3>\n            </div>\n            <div className=\"px-6 py-4\">\n              <div className=\"space-y-4\">\n                {stats.departmentStats.map((dept, index) => (\n                  <div key={index} className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between\">\n                        <p className=\"text-sm font-medium text-gray-900\">{dept.name}</p>\n                        <p className=\"text-sm text-gray-500\">{dept.employee_count} funcionários</p>\n                      </div>\n                      {dept.budget > 0 && (\n                        <div className=\"mt-1\">\n                          <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                            <span>Uso do orçamento</span>\n                            <span>{dept.budget_usage}%</span>\n                          </div>\n                          <div className=\"mt-1 w-full bg-gray-200 rounded-full h-1.5\">\n                            <div \n                              className=\"bg-thermas-600 h-1.5 rounded-full\" \n                              style={{ width: `${Math.min(dept.budget_usage, 100)}%` }}\n                            ></div>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}","size_bytes":7259},"client/src/pages/Departments.jsx":{"content":"export default function Departments() {\n  return (\n    <div>\n      <div className=\"sm:flex sm:items-center\">\n        <div className=\"sm:flex-auto\">\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Departamentos</h1>\n          <p className=\"mt-2 text-sm text-gray-700\">\n            Gerenciar departamentos da empresa.\n          </p>\n        </div>\n        <div className=\"mt-4 sm:mt-0 sm:ml-16 sm:flex-none\">\n          <button\n            type=\"button\"\n            className=\"inline-flex items-center justify-center rounded-md border border-transparent bg-thermas-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-thermas-700 focus:outline-none focus:ring-2 focus:ring-thermas-500 focus:ring-offset-2 sm:w-auto\"\n          >\n            Criar departamento\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"mt-8 bg-white shadow rounded-lg\">\n        <div className=\"px-6 py-4\">\n          <p className=\"text-sm text-gray-500\">\n            Funcionalidade em desenvolvimento. O backend está pronto e pode ser testado via API.\n          </p>\n          <div className=\"mt-4\">\n            <h4 className=\"text-sm font-medium text-gray-900\">Endpoints disponíveis:</h4>\n            <ul className=\"mt-2 text-xs text-gray-600 space-y-1\">\n              <li>• GET /api/departments - Listar departamentos</li>\n              <li>• POST /api/departments - Criar departamento</li>\n              <li>• PUT /api/departments/:id - Atualizar departamento</li>\n              <li>• DELETE /api/departments/:id - Desativar departamento</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":1657},"client/src/pages/Employees.jsx":{"content":"import { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport toast from 'react-hot-toast'\nimport { \n  PlusIcon, \n  PencilIcon, \n  TrashIcon,\n  MagnifyingGlassIcon,\n  UserIcon,\n  EnvelopeIcon,\n  PhoneIcon,\n  BuildingOfficeIcon,\n  CalendarIcon\n} from '@heroicons/react/24/outline'\n\nfunction EmployeeCard({ employee, onEdit, onDelete }) {\n  return (\n    <div className=\"bg-white shadow rounded-lg p-6 hover:shadow-md transition-shadow\">\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex-shrink-0\">\n            <UserIcon className=\"h-10 w-10 text-gray-400\" />\n          </div>\n          <div className=\"min-w-0 flex-1\">\n            <h3 className=\"text-lg font-medium text-gray-900 truncate\">\n              {employee.name}\n            </h3>\n            <p className=\"text-sm text-gray-500\">\n              Código: {employee.employee_code}\n            </p>\n            {employee.position && (\n              <p className=\"text-sm text-thermas-600 font-medium\">\n                {employee.position}\n              </p>\n            )}\n          </div>\n        </div>\n        <div className=\"flex space-x-2\">\n          <button\n            onClick={() => onEdit(employee)}\n            className=\"text-thermas-600 hover:text-thermas-800 transition-colors\"\n          >\n            <PencilIcon className=\"h-5 w-5\" />\n          </button>\n          <button\n            onClick={() => onDelete(employee)}\n            className=\"text-red-600 hover:text-red-800 transition-colors\"\n          >\n            <TrashIcon className=\"h-5 w-5\" />\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"mt-4 grid grid-cols-1 sm:grid-cols-2 gap-3 text-sm text-gray-600\">\n        {employee.email && (\n          <div className=\"flex items-center space-x-2\">\n            <EnvelopeIcon className=\"h-4 w-4 text-gray-400\" />\n            <span className=\"truncate\">{employee.email}</span>\n          </div>\n        )}\n        {employee.phone && (\n          <div className=\"flex items-center space-x-2\">\n            <PhoneIcon className=\"h-4 w-4 text-gray-400\" />\n            <span>{employee.phone}</span>\n          </div>\n        )}\n        {employee.department_name && (\n          <div className=\"flex items-center space-x-2\">\n            <BuildingOfficeIcon className=\"h-4 w-4 text-gray-400\" />\n            <span>{employee.department_name}</span>\n          </div>\n        )}\n        <div className=\"flex items-center space-x-2\">\n          <CalendarIcon className=\"h-4 w-4 text-gray-400\" />\n          <span>\n            Admitido em {new Date(employee.hire_date).toLocaleDateString('pt-BR')}\n          </span>\n        </div>\n      </div>\n      \n      {employee.salary && (\n        <div className=\"mt-3 pt-3 border-t border-gray-200\">\n          <p className=\"text-sm text-gray-900 font-medium\">\n            Salário: R$ {parseFloat(employee.salary).toLocaleString('pt-BR', {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2\n            })}\n          </p>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default function Employees() {\n  const [employees, setEmployees] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [filteredEmployees, setFilteredEmployees] = useState([])\n\n  useEffect(() => {\n    fetchEmployees()\n  }, [])\n\n  useEffect(() => {\n    // Filtrar funcionários baseado no termo de busca\n    const filtered = employees.filter(employee =>\n      employee.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.employee_code?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.department_name?.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n    setFilteredEmployees(filtered)\n  }, [employees, searchTerm])\n\n  const fetchEmployees = async () => {\n    try {\n      setLoading(true)\n      const response = await axios.get('/api/employees')\n      setEmployees(response.data.data || [])\n    } catch (error) {\n      console.error('Erro ao buscar funcionários:', error)\n      toast.error('Erro ao carregar funcionários')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleEdit = (employee) => {\n    // Implementar modal de edição ou navegação para página de edição\n    toast.info(`Editar funcionário: ${employee.name}`)\n  }\n\n  const handleDelete = async (employee) => {\n    if (window.confirm(`Tem certeza que deseja inativar o funcionário ${employee.name}?`)) {\n      try {\n        await axios.delete(`/api/employees/${employee.id}`)\n        toast.success('Funcionário inativado com sucesso')\n        fetchEmployees() // Recarregar lista\n      } catch (error) {\n        console.error('Erro ao inativar funcionário:', error)\n        toast.error('Erro ao inativar funcionário')\n      }\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-thermas-600\"></div>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <div className=\"sm:flex sm:items-center\">\n        <div className=\"sm:flex-auto\">\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Funcionários</h1>\n          <p className=\"mt-2 text-sm text-gray-700\">\n            Lista de todos os funcionários da empresa ({employees.length} funcionários).\n          </p>\n        </div>\n        <div className=\"mt-4 sm:mt-0 sm:ml-16 sm:flex-none\">\n          <button\n            type=\"button\"\n            className=\"inline-flex items-center justify-center rounded-md border border-transparent bg-thermas-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-thermas-700 focus:outline-none focus:ring-2 focus:ring-thermas-500 focus:ring-offset-2 sm:w-auto\"\n            onClick={() => toast.info('Funcionalidade de adicionar funcionário em desenvolvimento')}\n          >\n            <PlusIcon className=\"h-4 w-4 mr-2\" />\n            Adicionar funcionário\n          </button>\n        </div>\n      </div>\n\n      {/* Search Bar */}\n      <div className=\"mt-6\">\n        <div className=\"relative\">\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n            <MagnifyingGlassIcon className=\"h-5 w-5 text-gray-400\" />\n          </div>\n          <input\n            type=\"text\"\n            className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-thermas-500 focus:border-thermas-500 sm:text-sm\"\n            placeholder=\"Buscar por nome, email, código ou departamento...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </div>\n      </div>\n      \n      {/* Employee Grid */}\n      <div className=\"mt-6\">\n        {filteredEmployees.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <UserIcon className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">\n              {searchTerm ? 'Nenhum funcionário encontrado' : 'Nenhum funcionário cadastrado'}\n            </h3>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              {searchTerm \n                ? 'Tente ajustar sua busca ou limpar o filtro.'\n                : 'Comece adicionando um novo funcionário.'}\n            </p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredEmployees.map((employee) => (\n              <EmployeeCard\n                key={employee.id}\n                employee={employee}\n                onEdit={handleEdit}\n                onDelete={handleDelete}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {searchTerm && filteredEmployees.length > 0 && (\n        <div className=\"mt-4 text-sm text-gray-500 text-center\">\n          Mostrando {filteredEmployees.length} de {employees.length} funcionários\n        </div>\n      )}\n    </div>\n  )\n}","size_bytes":8191},"client/src/pages/Login.jsx":{"content":"import { useState, useEffect } from 'react'\nimport { Navigate } from 'react-router-dom'\nimport { useAuth } from '../contexts/AuthContext'\nimport { EyeIcon, EyeSlashIcon } from '@heroicons/react/24/outline'\n\nexport default function Login() {\n  const [email, setEmail] = useState('admin@rhpro.com')\n  const [password, setPassword] = useState('admin123')\n  const [showPassword, setShowPassword] = useState(false)\n  const [loading, setLoading] = useState(false)\n  \n  const { login, isAuthenticated } = useAuth()\n\n  if (isAuthenticated) {\n    return <Navigate to=\"/\" replace />\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    setLoading(true)\n    \n    const result = await login(email, password)\n    \n    setLoading(false)\n    \n    if (result.success) {\n      // Redirect will be handled by AuthContext\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <img\n            className=\"mx-auto h-16 w-auto\"\n            src=\"/logo-thermas.png\"\n            alt=\"Thermas\"\n          />\n          <h2 className=\"mt-6 text-3xl font-bold text-gray-900\">\n            Sistema RH Pro\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-600\">\n            Faça login para acessar o sistema\n          </p>\n        </div>\n\n        {/* Form */}\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          <div className=\"rounded-md shadow-sm space-y-4\">\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n                Email\n              </label>\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                required\n                className=\"mt-1 appearance-none relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-thermas-500 focus:border-thermas-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Digite seu email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n                Senha\n              </label>\n              <div className=\"mt-1 relative\">\n                <input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  autoComplete=\"current-password\"\n                  required\n                  className=\"appearance-none relative block w-full px-3 py-3 pr-10 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-thermas-500 focus:border-thermas-500 focus:z-10 sm:text-sm\"\n                  placeholder=\"Digite sua senha\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeSlashIcon className=\"h-5 w-5 text-gray-400\" />\n                  ) : (\n                    <EyeIcon className=\"h-5 w-5 text-gray-400\" />\n                  )}\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-thermas-600 hover:bg-thermas-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-thermas-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {loading ? (\n                <div className=\"flex items-center\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Entrando...\n                </div>\n              ) : (\n                'Entrar'\n              )}\n            </button>\n          </div>\n\n          {/* Demo credentials */}\n          <div className=\"mt-6 p-4 bg-blue-50 rounded-md\">\n            <h4 className=\"text-sm font-medium text-blue-800 mb-2\">Credenciais de Demonstração:</h4>\n            <div className=\"text-xs text-blue-600 space-y-1\">\n              <p><strong>Admin:</strong> admin@rhpro.com / admin123</p>\n              <p><strong>RH:</strong> hr@rhpro.com / hr123</p>\n              <p><strong>Gerente:</strong> manager@rhpro.com / manager123</p>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}","size_bytes":4976},"client/src/pages/Reports.jsx":{"content":"export default function Reports() {\n  return (\n    <div>\n      <div className=\"sm:flex sm:items-center\">\n        <div className=\"sm:flex-auto\">\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Relatórios</h1>\n          <p className=\"mt-2 text-sm text-gray-700\">\n            Gerar relatórios detalhados do sistema.\n          </p>\n        </div>\n      </div>\n      \n      <div className=\"mt-8 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {[\n          {\n            title: 'Relatório de Funcionários',\n            description: 'Lista completa de funcionários com filtros',\n            endpoint: 'GET /api/reports/employees'\n          },\n          {\n            title: 'Relatório de Requisições',\n            description: 'Análise detalhada das requisições',\n            endpoint: 'GET /api/reports/requests'\n          },\n          {\n            title: 'Relatório de Departamentos',\n            description: 'Performance e estatísticas dos departamentos',\n            endpoint: 'GET /api/reports/departments'\n          },\n          {\n            title: 'Relatório de Folha',\n            description: 'Cálculos de folha de pagamento',\n            endpoint: 'GET /api/reports/payroll'\n          },\n          {\n            title: 'Relatório de Auditoria',\n            description: 'Log de atividades do sistema',\n            endpoint: 'GET /api/reports/audit'\n          }\n        ].map((report, index) => (\n          <div key={index} className=\"bg-white shadow rounded-lg p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">{report.title}</h3>\n            <p className=\"text-sm text-gray-600 mb-4\">{report.description}</p>\n            <p className=\"text-xs text-gray-500 font-mono bg-gray-100 px-2 py-1 rounded\">\n              {report.endpoint}\n            </p>\n            <button className=\"mt-4 w-full bg-thermas-600 text-white py-2 px-4 rounded-md hover:bg-thermas-700 text-sm\">\n              Gerar Relatório\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}","size_bytes":2056},"client/src/pages/Requests.jsx":{"content":"export default function Requests() {\n  return (\n    <div>\n      <div className=\"sm:flex sm:items-center\">\n        <div className=\"sm:flex-auto\">\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Requisições</h1>\n          <p className=\"mt-2 text-sm text-gray-700\">\n            Gerenciar todas as requisições dos funcionários.\n          </p>\n        </div>\n        <div className=\"mt-4 sm:mt-0 sm:ml-16 sm:flex-none\">\n          <button\n            type=\"button\"\n            className=\"inline-flex items-center justify-center rounded-md border border-transparent bg-thermas-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-thermas-700 focus:outline-none focus:ring-2 focus:ring-thermas-500 focus:ring-offset-2 sm:w-auto\"\n          >\n            Nova requisição\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"mt-8 bg-white shadow rounded-lg\">\n        <div className=\"px-6 py-4\">\n          <p className=\"text-sm text-gray-500\">\n            Funcionalidade em desenvolvimento. O backend está pronto e pode ser testado via API.\n          </p>\n          <div className=\"mt-4\">\n            <h4 className=\"text-sm font-medium text-gray-900\">Endpoints disponíveis:</h4>\n            <ul className=\"mt-2 text-xs text-gray-600 space-y-1\">\n              <li>• GET /api/requests - Listar requisições</li>\n              <li>• POST /api/requests - Criar requisição</li>\n              <li>• PUT /api/requests/:id/approve - Aprovar requisição</li>\n              <li>• PUT /api/requests/:id/reject - Rejeitar requisição</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":1666},"server/db.ts":{"content":"import { Pool } from 'pg';\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,\n  max: 20, // Maximum number of connections\n  idleTimeoutMillis: 30000, // How long a client is allowed to remain idle\n  connectionTimeoutMillis: 10000, // Return an error after failing to connect for this long\n});\n\n// Helper function to execute queries\nexport const query = async (text, params) => {\n  const start = Date.now();\n  try {\n    const result = await pool.query(text, params);\n    const duration = Date.now() - start;\n    console.log('📊 Query executada:', { text: text.substring(0, 50), duration, rows: result.rowCount });\n    return result;\n  } catch (error) {\n    console.error('❌ Erro na query:', { text: text.substring(0, 50), error: error.message });\n    throw error;\n  }\n};\n","size_bytes":1021},"client/force-reload.js":{"content":"document.addEventListener('DOMContentLoaded', function() { setTimeout(() => window.location.reload(), 100); });\n","size_bytes":112},"server/update-database.js":{"content":"#!/usr/bin/env node\n\n/**\n * Script para atualizar completamente o banco de dados\n * Execute: node server/update-database.js\n */\n\nconst { runFullMigration } = require('./database/full-migration');\n\nconsole.log('🔄 Iniciando atualização completa do banco de dados...');\nconsole.log('');\n\nrunFullMigration();","size_bytes":309},"client/src.bak/App-basic.jsx":{"content":"function App() {\n  return <h1 style={{color: 'red', fontSize: '50px'}}>TESTE REACT BÁSICO</h1>\n}\n\nexport default App","size_bytes":117},"client/src.bak/App-simple.jsx":{"content":"function App() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"bg-blue-600 text-white p-8 text-center\">\n        <h1 className=\"text-3xl font-bold\">🏢 Sistema RH Pro</h1>\n        <p className=\"mt-2\">Sistema funcionando com Tailwind CSS</p>\n      </div>\n      \n      <div className=\"max-w-4xl mx-auto p-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <div className=\"bg-white rounded-lg shadow p-6 text-center\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Funcionários</h3>\n            <p className=\"text-3xl font-bold text-blue-600\">6</p>\n          </div>\n          <div className=\"bg-white rounded-lg shadow p-6 text-center\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Departamentos</h3>\n            <p className=\"text-3xl font-bold text-green-600\">5</p>\n          </div>\n          <div className=\"bg-white rounded-lg shadow p-6 text-center\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Requisições</h3>\n            <p className=\"text-3xl font-bold text-yellow-600\">12</p>\n          </div>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow\">\n          <div className=\"p-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">Menu de Navegação</h2>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <button className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\">\n                Dashboard\n              </button>\n              <button className=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600\">\n                Funcionários\n              </button>\n              <button className=\"bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600\">\n                Departamentos\n              </button>\n              <button className=\"bg-orange-500 text-white px-4 py-2 rounded hover:bg-orange-600\">\n                Relatórios\n              </button>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"mt-8 text-center text-gray-600\">\n          <p>✅ React funcionando</p>\n          <p>✅ Tailwind CSS aplicado</p>\n          <p>✅ Sistema RH Pro ativo</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App","size_bytes":2276},"client/src.bak/App.jsx":{"content":"import { Routes, Route, Navigate } from 'react-router-dom'\nimport AuthProvider from './contexts/AuthContext'\nimport Layout from './components/Layout'\nimport ProtectedRoute from './components/ProtectedRoute'\nimport Login from './pages/Login'\nimport Dashboard from './pages/Dashboard-Advanced'\nimport Employees from './pages/Employees'\nimport Departments from './pages/Departments'\nimport Requests from './pages/Requests'\nimport Reports from './pages/Reports'\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Routes>\n        <Route path=\"/login\" element={<Login />} />\n        <Route path=\"/\" element={\n          <ProtectedRoute>\n            <Layout />\n          </ProtectedRoute>\n        }>\n          <Route index element={<Dashboard />} />\n          <Route path=\"employees\" element={<Employees />} />\n          <Route path=\"departments\" element={<Departments />} />\n          <Route path=\"requests\" element={<Requests />} />\n          <Route path=\"reports\" element={<Reports />} />\n          <Route path=\"settings\" element={<div className=\"p-4\"><h2>Configurações em desenvolvimento</h2></div>} />\n        </Route>\n        <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n      </Routes>\n    </AuthProvider>\n  )\n}\n\nexport default App","size_bytes":1248},"client/src.bak/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  body {\n    @apply bg-gray-50 text-gray-900;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n}\n\n@layer components {\n  .btn {\n    @apply inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none;\n  }\n  \n  .btn-primary {\n    @apply bg-thermas-600 text-white hover:bg-thermas-700 focus:ring-thermas-500;\n  }\n  \n  .btn-secondary {\n    @apply bg-gray-100 text-gray-900 hover:bg-gray-200 focus:ring-gray-500;\n  }\n  \n  .btn-ghost {\n    @apply hover:bg-gray-100 hover:text-gray-900 focus:ring-gray-500;\n  }\n  \n  .input {\n    @apply flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-500 focus:outline-none focus:ring-2 focus:ring-thermas-500 focus:border-thermas-500 disabled:cursor-not-allowed disabled:opacity-50;\n  }\n  \n  .card {\n    @apply rounded-lg border border-gray-200 bg-white shadow-sm;\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  @apply bg-gray-100;\n}\n\n::-webkit-scrollbar-thumb {\n  @apply bg-gray-400 rounded-full;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  @apply bg-gray-500;\n}","size_bytes":1294},"client/src.bak/main.jsx":{"content":"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { BrowserRouter } from 'react-router-dom'\nimport { Toaster } from 'react-hot-toast'\nimport App from './App.jsx'\nimport './index.css'\n\nconsole.log('🚀 Sistema RH Pro iniciando...');\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n      <Toaster \n        position=\"top-right\"\n        toastOptions={{\n          duration: 3000,\n          style: {\n            background: '#363636',\n            color: '#fff',\n          },\n        }}\n      />\n    </BrowserRouter>\n  </React.StrictMode>,\n)","size_bytes":627},"server/database/full-migration.js":{"content":"const fs = require('fs');\nconst path = require('path');\nconst { query } = require('./connection');\n\nasync function runFullMigration() {\n  try {\n    console.log('🔄 Iniciando migração completa do banco de dados...');\n    \n    // Lista completa de comandos para criar todas as tabelas do sistema\n    const migrationCommands = [\n      // Extensões necessárias\n      `CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"`,\n      `CREATE EXTENSION IF NOT EXISTS \"pgcrypto\"`,\n      \n      // Função de trigger para updated_at\n      `CREATE OR REPLACE FUNCTION update_updated_at_column()\n       RETURNS TRIGGER AS $$\n       BEGIN\n           NEW.updated_at = CURRENT_TIMESTAMP;\n           RETURN NEW;\n       END;\n       $$ language 'plpgsql'`,\n\n      // 1. TABELA DE USUÁRIOS\n      `CREATE TABLE IF NOT EXISTS users (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           email VARCHAR(255) UNIQUE NOT NULL,\n           password_hash VARCHAR(255) NOT NULL,\n           name VARCHAR(255) NOT NULL,\n           role VARCHAR(50) DEFAULT 'user',\n           is_active BOOLEAN DEFAULT true,\n           last_login TIMESTAMP,\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n\n      // 2. TABELA DE GRUPOS DE USUÁRIOS\n      `CREATE TABLE IF NOT EXISTS user_groups (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           name VARCHAR(100) UNIQUE NOT NULL,\n           description TEXT,\n           permissions JSONB DEFAULT '{}',\n           is_active BOOLEAN DEFAULT true,\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n\n      // 3. TABELA DE ASSOCIAÇÃO USUÁRIOS-GRUPOS\n      `CREATE TABLE IF NOT EXISTS user_group_memberships (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           user_id UUID REFERENCES users(id) ON DELETE CASCADE,\n           group_id UUID REFERENCES user_groups(id) ON DELETE CASCADE,\n           assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           assigned_by UUID REFERENCES users(id),\n           UNIQUE(user_id, group_id)\n       )`,\n\n      // 4. TABELA DE DEPARTAMENTOS\n      `CREATE TABLE IF NOT EXISTS departments (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           name VARCHAR(255) NOT NULL,\n           description TEXT,\n           code VARCHAR(50) UNIQUE,\n           manager_id UUID REFERENCES users(id),\n           budget DECIMAL(15,2),\n           cost_center VARCHAR(100),\n           phone VARCHAR(20),\n           email VARCHAR(255),\n           location TEXT,\n           is_active BOOLEAN DEFAULT true,\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n\n      // 5. TABELA DE FUNCIONÁRIOS\n      `CREATE TABLE IF NOT EXISTS employees (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           employee_code VARCHAR(50) UNIQUE NOT NULL,\n           name VARCHAR(255) NOT NULL,\n           email VARCHAR(255) UNIQUE,\n           phone VARCHAR(20),\n           cpf VARCHAR(14) UNIQUE,\n           rg VARCHAR(20),\n           birth_date DATE,\n           hire_date DATE NOT NULL,\n           termination_date DATE,\n           department_id UUID REFERENCES departments(id),\n           position VARCHAR(255),\n           cbo_code VARCHAR(10),\n           salary DECIMAL(12,2),\n           status VARCHAR(50) DEFAULT 'active',\n           address JSONB,\n           emergency_contact JSONB,\n           documents JSONB,\n           bank_info JSONB,\n           benefits JSONB,\n           notes TEXT,\n           is_active BOOLEAN DEFAULT true,\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n\n      // 6. TABELA DE TIPOS DE REQUISIÇÕES\n      `CREATE TABLE IF NOT EXISTS request_types (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           name VARCHAR(255) NOT NULL,\n           description TEXT,\n           category VARCHAR(100),\n           requires_approval BOOLEAN DEFAULT true,\n           approval_levels INTEGER DEFAULT 1,\n           form_fields JSONB DEFAULT '[]',\n           is_active BOOLEAN DEFAULT true,\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n\n      // 7. TABELA DE REQUISIÇÕES\n      `CREATE TABLE IF NOT EXISTS requests (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           request_number VARCHAR(50) UNIQUE NOT NULL,\n           employee_id UUID REFERENCES employees(id),\n           request_type_id UUID REFERENCES request_types(id),\n           title VARCHAR(255) NOT NULL,\n           description TEXT,\n           status VARCHAR(50) DEFAULT 'pending',\n           priority VARCHAR(20) DEFAULT 'normal',\n           data JSONB DEFAULT '{}',\n           requested_date DATE,\n           due_date DATE,\n           completed_date DATE,\n           requested_by UUID REFERENCES users(id),\n           assigned_to UUID REFERENCES users(id),\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n\n      // 8. TABELA DE APROVAÇÕES\n      `CREATE TABLE IF NOT EXISTS approvals (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           request_id UUID REFERENCES requests(id) ON DELETE CASCADE,\n           approver_id UUID REFERENCES users(id),\n           level INTEGER NOT NULL,\n           status VARCHAR(50) DEFAULT 'pending',\n           comments TEXT,\n           approved_at TIMESTAMP,\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n\n      // 9. TABELA DE CONFIGURAÇÃO AD\n      `CREATE TABLE IF NOT EXISTS ad_configuration (\n           id SERIAL PRIMARY KEY,\n           server VARCHAR(255) NOT NULL,\n           domain VARCHAR(100) NOT NULL,\n           base_dn VARCHAR(255) NOT NULL,\n           admin_dn VARCHAR(255) NOT NULL,\n           admin_password VARCHAR(255) NOT NULL,\n           user_search_base VARCHAR(255),\n           is_active BOOLEAN DEFAULT true,\n           last_sync TIMESTAMP,\n           configured_by UUID REFERENCES users(id),\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n\n      // 10. TABELA DE LOGS AD\n      `CREATE TABLE IF NOT EXISTS ad_sync_logs (\n           id SERIAL PRIMARY KEY,\n           sync_type VARCHAR(50) NOT NULL,\n           status VARCHAR(20) NOT NULL,\n           users_imported INTEGER DEFAULT 0,\n           users_updated INTEGER DEFAULT 0,\n           groups_imported INTEGER DEFAULT 0,\n           groups_updated INTEGER DEFAULT 0,\n           error_message TEXT,\n           synced_by UUID REFERENCES users(id),\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n\n      // 11. TABELA DE AVALIAÇÕES DE DESEMPENHO\n      `CREATE TABLE IF NOT EXISTS performance_evaluations (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           employee_id UUID REFERENCES employees(id),\n           evaluator_id UUID REFERENCES users(id),\n           period_start DATE,\n           period_end DATE,\n           status VARCHAR(50) DEFAULT 'draft',\n           overall_rating DECIMAL(3,2),\n           goals JSONB DEFAULT '[]',\n           competencies JSONB DEFAULT '[]',\n           feedback TEXT,\n           development_plan TEXT,\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n\n      // 12. TABELA DE METAS (OKRs)\n      `CREATE TABLE IF NOT EXISTS objectives (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           employee_id UUID REFERENCES employees(id),\n           title VARCHAR(255) NOT NULL,\n           description TEXT,\n           category VARCHAR(100),\n           target_value DECIMAL(12,2),\n           current_value DECIMAL(12,2) DEFAULT 0,\n           unit VARCHAR(50),\n           due_date DATE,\n           status VARCHAR(50) DEFAULT 'active',\n           weight DECIMAL(5,2) DEFAULT 1.0,\n           created_by UUID REFERENCES users(id),\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n\n      // 13. TABELA DE TREINAMENTOS\n      `CREATE TABLE IF NOT EXISTS training_programs (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           title VARCHAR(255) NOT NULL,\n           description TEXT,\n           category VARCHAR(100),\n           duration_hours INTEGER,\n           cost DECIMAL(10,2),\n           provider VARCHAR(255),\n           location VARCHAR(255),\n           max_participants INTEGER,\n           status VARCHAR(50) DEFAULT 'active',\n           start_date DATE,\n           end_date DATE,\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n\n      // 14. TABELA DE PARTICIPAÇÃO EM TREINAMENTOS\n      `CREATE TABLE IF NOT EXISTS training_enrollments (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           training_id UUID REFERENCES training_programs(id),\n           employee_id UUID REFERENCES employees(id),\n           status VARCHAR(50) DEFAULT 'enrolled',\n           completion_date DATE,\n           score DECIMAL(5,2),\n           certificate_url VARCHAR(500),\n           feedback TEXT,\n           enrolled_by UUID REFERENCES users(id),\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           UNIQUE(training_id, employee_id)\n       )`,\n\n      // 15. TABELA DE PESQUISAS\n      `CREATE TABLE IF NOT EXISTS surveys (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           title VARCHAR(255) NOT NULL,\n           description TEXT,\n           category VARCHAR(100),\n           questions JSONB DEFAULT '[]',\n           target_audience JSONB DEFAULT '{}',\n           is_anonymous BOOLEAN DEFAULT false,\n           status VARCHAR(50) DEFAULT 'draft',\n           start_date DATE,\n           end_date DATE,\n           created_by UUID REFERENCES users(id),\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n\n      // 16. TABELA DE RESPOSTAS DE PESQUISAS\n      `CREATE TABLE IF NOT EXISTS survey_responses (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           survey_id UUID REFERENCES surveys(id),\n           employee_id UUID REFERENCES employees(id),\n           responses JSONB DEFAULT '{}',\n           completed_at TIMESTAMP,\n           ip_address INET,\n           user_agent TEXT,\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n\n      // 17. TABELA DE RELATÓRIOS\n      `CREATE TABLE IF NOT EXISTS reports (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           name VARCHAR(255) NOT NULL,\n           description TEXT,\n           category VARCHAR(100),\n           query_template TEXT,\n           parameters JSONB DEFAULT '{}',\n           schedule_config JSONB,\n           last_run TIMESTAMP,\n           next_run TIMESTAMP,\n           status VARCHAR(50) DEFAULT 'active',\n           created_by UUID REFERENCES users(id),\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n\n      // 18. TABELA DE EXECUÇÃO DE RELATÓRIOS\n      `CREATE TABLE IF NOT EXISTS report_executions (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           report_id UUID REFERENCES reports(id),\n           executed_by UUID REFERENCES users(id),\n           status VARCHAR(50) DEFAULT 'running',\n           result_data JSONB,\n           file_path VARCHAR(500),\n           execution_time INTEGER,\n           error_message TEXT,\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           completed_at TIMESTAMP\n       )`,\n\n      // 19. TABELA DE AUDITORIA\n      `CREATE TABLE IF NOT EXISTS audit_logs (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           table_name VARCHAR(100) NOT NULL,\n           record_id VARCHAR(100) NOT NULL,\n           operation VARCHAR(20) NOT NULL,\n           old_values JSONB,\n           new_values JSONB,\n           user_id UUID REFERENCES users(id),\n           ip_address INET,\n           user_agent TEXT,\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n\n      // 20. TABELA DE CONFIGURAÇÕES DO SISTEMA\n      `CREATE TABLE IF NOT EXISTS system_settings (\n           id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n           key VARCHAR(255) UNIQUE NOT NULL,\n           value JSONB,\n           category VARCHAR(100),\n           description TEXT,\n           is_public BOOLEAN DEFAULT false,\n           updated_by UUID REFERENCES users(id),\n           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n           updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n       )`,\n\n      // TRIGGERS para updated_at\n      `DROP TRIGGER IF EXISTS update_users_updated_at ON users`,\n      `CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column()`,\n      \n      `DROP TRIGGER IF EXISTS update_user_groups_updated_at ON user_groups`,\n      `CREATE TRIGGER update_user_groups_updated_at BEFORE UPDATE ON user_groups FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column()`,\n      \n      `DROP TRIGGER IF EXISTS update_departments_updated_at ON departments`,\n      `CREATE TRIGGER update_departments_updated_at BEFORE UPDATE ON departments FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column()`,\n      \n      `DROP TRIGGER IF EXISTS update_employees_updated_at ON employees`,\n      `CREATE TRIGGER update_employees_updated_at BEFORE UPDATE ON employees FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column()`,\n      \n      `DROP TRIGGER IF EXISTS update_requests_updated_at ON requests`,\n      `CREATE TRIGGER update_requests_updated_at BEFORE UPDATE ON requests FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column()`,\n      \n      `DROP TRIGGER IF EXISTS update_approvals_updated_at ON approvals`,\n      `CREATE TRIGGER update_approvals_updated_at BEFORE UPDATE ON approvals FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column()`,\n\n      // ÍNDICES para performance\n      `CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)`,\n      `CREATE INDEX IF NOT EXISTS idx_users_active ON users(is_active)`,\n      `CREATE INDEX IF NOT EXISTS idx_employees_code ON employees(employee_code)`,\n      `CREATE INDEX IF NOT EXISTS idx_employees_email ON employees(email)`,\n      `CREATE INDEX IF NOT EXISTS idx_employees_cpf ON employees(cpf)`,\n      `CREATE INDEX IF NOT EXISTS idx_employees_department ON employees(department_id)`,\n      `CREATE INDEX IF NOT EXISTS idx_employees_status ON employees(status)`,\n      `CREATE INDEX IF NOT EXISTS idx_requests_number ON requests(request_number)`,\n      `CREATE INDEX IF NOT EXISTS idx_requests_employee ON requests(employee_id)`,\n      `CREATE INDEX IF NOT EXISTS idx_requests_status ON requests(status)`,\n      `CREATE INDEX IF NOT EXISTS idx_requests_type ON requests(request_type_id)`,\n      `CREATE INDEX IF NOT EXISTS idx_approvals_request ON approvals(request_id)`,\n      `CREATE INDEX IF NOT EXISTS idx_approvals_approver ON approvals(approver_id)`,\n      `CREATE INDEX IF NOT EXISTS idx_audit_logs_table ON audit_logs(table_name)`,\n      `CREATE INDEX IF NOT EXISTS idx_audit_logs_user ON audit_logs(user_id)`,\n      `CREATE INDEX IF NOT EXISTS idx_audit_logs_date ON audit_logs(created_at)`,\n      `CREATE INDEX IF NOT EXISTS idx_ad_config_active ON ad_configuration(is_active, created_at)`,\n      `CREATE INDEX IF NOT EXISTS idx_ad_sync_logs_date ON ad_sync_logs(created_at DESC)`,\n      `CREATE INDEX IF NOT EXISTS idx_training_enrollments_employee ON training_enrollments(employee_id)`,\n      `CREATE INDEX IF NOT EXISTS idx_survey_responses_survey ON survey_responses(survey_id)`,\n      `CREATE INDEX IF NOT EXISTS idx_report_executions_report ON report_executions(report_id)`\n    ];\n    \n    console.log(`📋 Executando ${migrationCommands.length} comandos de migração...`);\n    \n    for (let i = 0; i < migrationCommands.length; i++) {\n      const command = migrationCommands[i];\n      try {\n        await query(command);\n        console.log(`✅ Comando ${i + 1}/${migrationCommands.length} executado`);\n      } catch (error) {\n        // Ignora erros de objetos que já existem\n        if (error.code === '42710' || // trigger already exists\n            error.code === '42P07' || // table already exists\n            error.code === '42723' || // function already exists\n            error.code === '42P06' || // schema already exists\n            error.code === '42P16' || // index already exists\n            error.code === '42703') { // column already exists\n          console.log(`⚠️ Comando ${i + 1}/${migrationCommands.length} já existe, ignorando...`);\n        } else {\n          console.error(`❌ Erro no comando ${i + 1}:`, error.message);\n          console.error('Comando:', command.substring(0, 100) + '...');\n          // Continue mesmo com erro para não parar toda a migração\n        }\n      }\n    }\n    \n    console.log('✅ Estrutura do banco criada com sucesso!');\n    \n    // INSERIR DADOS INICIAIS ESSENCIAIS\n    \n    // 1. Verificar e criar usuário admin\n    console.log('👤 Verificando usuário administrador...');\n    const adminExists = await query(\n      'SELECT id FROM users WHERE email = $1',\n      ['admin@rhpro.com']\n    );\n    \n    if (adminExists.rows.length === 0) {\n      const bcrypt = require('bcryptjs');\n      const hashedPassword = await bcrypt.hash('admin123', 10);\n      \n      await query(\n        `INSERT INTO users (email, password_hash, name, role) \n         VALUES ($1, $2, $3, $4)`,\n        ['admin@rhpro.com', hashedPassword, 'Administrador', 'admin']\n      );\n      \n      console.log('👤 Usuário admin criado: admin@rhpro.com / admin123');\n    } else {\n      console.log('👤 Usuário admin já existe');\n    }\n    \n    // 2. Verificar e criar grupos de usuários básicos\n    console.log('👥 Verificando grupos de usuários...');\n    const groupsToCreate = [\n      {\n        name: 'Administradores',\n        description: 'Administradores do sistema com acesso total',\n        permissions: {\n          users: ['create', 'read', 'update', 'delete'],\n          employees: ['create', 'read', 'update', 'delete'],\n          departments: ['create', 'read', 'update', 'delete'],\n          requests: ['create', 'read', 'update', 'delete', 'approve'],\n          reports: ['create', 'read', 'update', 'delete', 'execute']\n        }\n      },\n      {\n        name: 'RH',\n        description: 'Equipe de Recursos Humanos',\n        permissions: {\n          employees: ['create', 'read', 'update', 'delete'],\n          departments: ['read', 'update'],\n          requests: ['create', 'read', 'update', 'approve'],\n          reports: ['read', 'execute']\n        }\n      },\n      {\n        name: 'Gestores',\n        description: 'Gestores de departamento',\n        permissions: {\n          employees: ['read', 'update'],\n          requests: ['read', 'approve'],\n          reports: ['read']\n        }\n      },\n      {\n        name: 'Funcionários',\n        description: 'Funcionários padrão',\n        permissions: {\n          requests: ['create', 'read'],\n          employees: ['read'] // próprio perfil apenas\n        }\n      }\n    ];\n    \n    for (const group of groupsToCreate) {\n      const exists = await query('SELECT id FROM user_groups WHERE name = $1', [group.name]);\n      if (exists.rows.length === 0) {\n        await query(\n          'INSERT INTO user_groups (name, description, permissions) VALUES ($1, $2, $3)',\n          [group.name, group.description, JSON.stringify(group.permissions)]\n        );\n        console.log(`👥 Grupo \"${group.name}\" criado`);\n      }\n    }\n    \n    // 3. Verificar e criar tipos de requisições básicos\n    console.log('📋 Verificando tipos de requisições...');\n    const requestTypesToCreate = [\n      {\n        name: 'Férias',\n        description: 'Solicitação de férias',\n        category: 'Ausência',\n        form_fields: [\n          { name: 'data_inicio', type: 'date', required: true, label: 'Data de Início' },\n          { name: 'data_fim', type: 'date', required: true, label: 'Data de Fim' },\n          { name: 'observacoes', type: 'textarea', required: false, label: 'Observações' }\n        ]\n      },\n      {\n        name: 'Licença Médica',\n        description: 'Solicitação de afastamento por motivo médico',\n        category: 'Ausência',\n        approval_levels: 2,\n        form_fields: [\n          { name: 'data_inicio', type: 'date', required: true, label: 'Data de Início' },\n          { name: 'previsao_retorno', type: 'date', required: false, label: 'Previsão de Retorno' },\n          { name: 'anexo_atestado', type: 'file', required: true, label: 'Anexar Atestado Médico' }\n        ]\n      },\n      {\n        name: 'Mudança de Dados',\n        description: 'Alteração de dados pessoais',\n        category: 'Dados Pessoais',\n        approval_levels: 1,\n        form_fields: [\n          { name: 'tipo_alteracao', type: 'select', required: true, label: 'Tipo de Alteração', \n            options: ['Endereço', 'Telefone', 'Email', 'Estado Civil', 'Conta Bancária'] },\n          { name: 'valor_atual', type: 'text', required: true, label: 'Valor Atual' },\n          { name: 'valor_novo', type: 'text', required: true, label: 'Valor Novo' },\n          { name: 'justificativa', type: 'textarea', required: true, label: 'Justificativa' }\n        ]\n      },\n      {\n        name: 'Vale Transporte',\n        description: 'Solicitação ou alteração de vale transporte',\n        category: 'Benefícios',\n        form_fields: [\n          { name: 'tipo_solicitacao', type: 'select', required: true, label: 'Tipo', \n            options: ['Inclusão', 'Exclusão', 'Alteração de Valor'] },\n          { name: 'linhas_utilizadas', type: 'textarea', required: true, label: 'Linhas de Ônibus Utilizadas' },\n          { name: 'valor_mensal', type: 'number', required: true, label: 'Valor Mensal Estimado' }\n        ]\n      },\n      {\n        name: 'Hora Extra',\n        description: 'Solicitação de aprovação de horas extras',\n        category: 'Jornada',\n        form_fields: [\n          { name: 'data_hora_extra', type: 'date', required: true, label: 'Data da Hora Extra' },\n          { name: 'hora_inicio', type: 'time', required: true, label: 'Hora de Início' },\n          { name: 'hora_fim', type: 'time', required: true, label: 'Hora de Fim' },\n          { name: 'justificativa', type: 'textarea', required: true, label: 'Justificativa' },\n          { name: 'atividades_realizadas', type: 'textarea', required: true, label: 'Atividades Realizadas' }\n        ]\n      }\n    ];\n    \n    for (const requestType of requestTypesToCreate) {\n      const exists = await query('SELECT id FROM request_types WHERE name = $1', [requestType.name]);\n      if (exists.rows.length === 0) {\n        await query(\n          `INSERT INTO request_types (name, description, category, approval_levels, form_fields) \n           VALUES ($1, $2, $3, $4, $5)`,\n          [requestType.name, requestType.description, requestType.category, \n           requestType.approval_levels || 1, JSON.stringify(requestType.form_fields)]\n        );\n        console.log(`📋 Tipo de requisição \"${requestType.name}\" criado`);\n      }\n    }\n    \n    // 4. Criar configurações padrão do sistema\n    console.log('⚙️ Verificando configurações do sistema...');\n    const systemSettings = [\n      { key: 'company_name', value: '\"Hotel Thermas\"', category: 'company', description: 'Nome da empresa' },\n      { key: 'company_logo', value: '\"/assets/logo.png\"', category: 'company', description: 'Logo da empresa' },\n      { key: 'max_vacation_days', value: '30', category: 'hr_policies', description: 'Máximo de dias de férias' },\n      { key: 'working_hours_per_day', value: '8', category: 'hr_policies', description: 'Horas de trabalho por dia' },\n      { key: 'overtime_multiplier', value: '1.5', category: 'hr_policies', description: 'Multiplicador de hora extra' },\n      { key: 'email_notifications', value: 'true', category: 'notifications', description: 'Habilitar notificações por email' },\n      { key: 'approval_email_template', value: '\"Nova solicitação aguardando aprovação\"', category: 'templates', description: 'Template de email de aprovação' }\n    ];\n    \n    for (const setting of systemSettings) {\n      const exists = await query('SELECT id FROM system_settings WHERE key = $1', [setting.key]);\n      if (exists.rows.length === 0) {\n        await query(\n          'INSERT INTO system_settings (key, value, category, description) VALUES ($1, $2, $3, $4)',\n          [setting.key, setting.value, setting.category, setting.description]\n        );\n        console.log(`⚙️ Configuração \"${setting.key}\" criada`);\n      }\n    }\n    \n    console.log('🎉 Migração completa finalizada com sucesso!');\n    console.log('');\n    console.log('📊 Resumo do que foi criado:');\n    console.log('   ✅ 20 tabelas principais');\n    console.log('   ✅ Índices de performance');\n    console.log('   ✅ Triggers de auditoria');\n    console.log('   ✅ Usuário admin: admin@rhpro.com / admin123');\n    console.log('   ✅ 4 grupos de usuários');\n    console.log('   ✅ 5 tipos de requisições');\n    console.log('   ✅ Configurações do sistema');\n    console.log('');\n    console.log('🚀 Sistema pronto para uso!');\n    \n    process.exit(0);\n    \n  } catch (error) {\n    console.error('❌ Erro na migração completa:', error);\n    process.exit(1);\n  }\n}\n\n// Executa se chamado diretamente\nif (require.main === module) {\n  runFullMigration();\n}\n\nmodule.exports = { runFullMigration };","size_bytes":25926},"client/src.bak/components/Header.jsx":{"content":"import { Fragment } from 'react'\nimport { Menu, Transition } from '@headlessui/react'\nimport { BellIcon, UserCircleIcon } from '@heroicons/react/24/outline'\n// import { useAuth } from '../contexts/AuthContext'\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ')\n}\n\nexport default function Header() {\n  // const { user, logout } = useAuth()\n  const user = { name: 'Usuário Teste', email: 'teste@empresa.com' }\n  const logout = () => console.log('logout')\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200\">\n      <div className=\"px-6 py-4 flex items-center justify-between\">\n        {/* Page title will be dynamic based on route */}\n        <div>\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Dashboard</h1>\n          <p className=\"text-sm text-gray-500\">Bem-vindo ao Sistema RH Pro</p>\n        </div>\n\n        {/* Right side */}\n        <div className=\"flex items-center space-x-4\">\n          {/* Notifications */}\n          <button\n            type=\"button\"\n            className=\"p-2 text-gray-400 hover:text-gray-500 rounded-md hover:bg-gray-100\"\n          >\n            <span className=\"sr-only\">Ver notificações</span>\n            <BellIcon className=\"h-6 w-6\" aria-hidden=\"true\" />\n          </button>\n\n          {/* Profile dropdown */}\n          <Menu as=\"div\" className=\"relative\">\n            <div>\n              <Menu.Button className=\"flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-thermas-500\">\n                <span className=\"sr-only\">Abrir menu do usuário</span>\n                <UserCircleIcon className=\"h-8 w-8 text-gray-400\" />\n                <div className=\"ml-3 text-left\">\n                  <p className=\"text-sm font-medium text-gray-900\">{user?.name}</p>\n                  <p className=\"text-xs text-gray-500\">{user?.email}</p>\n                </div>\n              </Menu.Button>\n            </div>\n            <Transition\n              as={Fragment}\n              enter=\"transition ease-out duration-100\"\n              enterFrom=\"transform opacity-0 scale-95\"\n              enterTo=\"transform opacity-100 scale-100\"\n              leave=\"transition ease-in duration-75\"\n              leaveFrom=\"transform opacity-100 scale-100\"\n              leaveTo=\"transform opacity-0 scale-95\"\n            >\n              <Menu.Items className=\"absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\n                <Menu.Item>\n                  {({ active }) => (\n                    <a\n                      href=\"#\"\n                      className={classNames(\n                        active ? 'bg-gray-100' : '',\n                        'block px-4 py-2 text-sm text-gray-700'\n                      )}\n                    >\n                      Seu Perfil\n                    </a>\n                  )}\n                </Menu.Item>\n                <Menu.Item>\n                  {({ active }) => (\n                    <a\n                      href=\"#\"\n                      className={classNames(\n                        active ? 'bg-gray-100' : '',\n                        'block px-4 py-2 text-sm text-gray-700'\n                      )}\n                    >\n                      Configurações\n                    </a>\n                  )}\n                </Menu.Item>\n                <Menu.Item>\n                  {({ active }) => (\n                    <button\n                      onClick={logout}\n                      className={classNames(\n                        active ? 'bg-gray-100' : '',\n                        'block w-full text-left px-4 py-2 text-sm text-gray-700'\n                      )}\n                    >\n                      Sair\n                    </button>\n                  )}\n                </Menu.Item>\n              </Menu.Items>\n            </Transition>\n          </Menu>\n        </div>\n      </div>\n    </header>\n  )\n}","size_bytes":3988},"client/src.bak/components/Layout.jsx":{"content":"import { Outlet } from 'react-router-dom'\nimport Sidebar from './Sidebar-Advanced'\nimport Header from './Header'\n\nexport default function Layout() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col\">\n        <Header />\n        <main className=\"flex-1 p-6\">\n          <Outlet />\n        </main>\n      </div>\n    </div>\n  )\n}","size_bytes":397},"client/src.bak/components/Loading.jsx":{"content":"export default function Loading({ text = 'Carregando...' }) {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center\">\n      <div className=\"text-center\">\n        <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-thermas-600\"></div>\n        <p className=\"mt-4 text-gray-600\">{text}</p>\n      </div>\n    </div>\n  )\n}","size_bytes":368},"client/src.bak/components/ProtectedRoute.jsx":{"content":"import { Navigate } from 'react-router-dom'\nimport { useAuth } from '../contexts/AuthContext'\nimport Loading from './Loading'\n\nexport default function ProtectedRoute({ children }) {\n  const { user, loading } = useAuth()\n\n  if (loading) {\n    return <Loading />\n  }\n\n  if (!user) {\n    return <Navigate to=\"/login\" replace />\n  }\n\n  return children\n}","size_bytes":349},"client/src.bak/components/Sidebar-Advanced.jsx":{"content":"import { Fragment } from 'react'\nimport { NavLink, useLocation } from 'react-router-dom'\nimport { \n  HomeIcon,\n  UsersIcon,\n  BuildingOfficeIcon,\n  DocumentTextIcon,\n  ChartBarIcon,\n  Cog6ToothIcon,\n  ClipboardDocumentListIcon,\n  UserPlusIcon,\n  BellIcon,\n  CalendarDaysIcon\n} from '@heroicons/react/24/outline'\n\nconst navigation = [\n  { name: 'Dashboard', href: '/', icon: HomeIcon, badge: null },\n  { name: 'Funcionários', href: '/employees', icon: UsersIcon, badge: null },\n  { name: 'Departamentos', href: '/departments', icon: BuildingOfficeIcon, badge: null },\n  { name: 'Solicitações', href: '/requests', icon: DocumentTextIcon, badge: 3 },\n  { name: 'Relatórios', href: '/reports', icon: ChartBarIcon, badge: null },\n  { name: 'Aprovações', href: '/approvals', icon: ClipboardDocumentListIcon, badge: 2 },\n]\n\nconst secondaryNavigation = [\n  { name: 'Calendário', href: '/calendar', icon: CalendarDaysIcon },\n  { name: 'Notificações', href: '/notifications', icon: BellIcon },\n  { name: 'Configurações', href: '/settings', icon: Cog6ToothIcon },\n]\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ')\n}\n\nexport default function SidebarAdvanced() {\n  const location = useLocation()\n\n  return (\n    <div className=\"flex flex-col w-64 bg-white shadow-lg border-r border-gray-200\">\n      {/* Logo */}\n      <div className=\"flex items-center px-6 py-6 border-b border-gray-200\">\n        <div className=\"flex items-center\">\n          <div className=\"h-10 w-10 bg-thermas-600 rounded-lg flex items-center justify-center\">\n            <span className=\"text-white font-bold text-lg\">T</span>\n          </div>\n          <div className=\"ml-3\">\n            <h1 className=\"text-xl font-bold text-gray-900\">RH Pro</h1>\n            <p className=\"text-sm text-thermas-600 font-medium\">Thermas</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 px-4 py-6 space-y-2 overflow-y-auto\">\n        {navigation.map((item) => {\n          const isActive = location.pathname === item.href\n          return (\n            <NavLink\n              key={item.name}\n              to={item.href}\n              className={classNames(\n                isActive\n                  ? 'bg-thermas-50 border-r-4 border-thermas-600 text-thermas-700 shadow-sm'\n                  : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900',\n                'group flex items-center justify-between px-3 py-3 text-sm font-medium rounded-lg transition-all duration-200 ease-in-out'\n              )}\n            >\n              <div className=\"flex items-center\">\n                <item.icon\n                  className={classNames(\n                    isActive ? 'text-thermas-500' : 'text-gray-400 group-hover:text-gray-500',\n                    'mr-3 h-5 w-5'\n                  )}\n                  aria-hidden=\"true\"\n                />\n                {item.name}\n              </div>\n              {item.badge && (\n                <span className=\"bg-red-100 text-red-800 text-xs font-medium px-2 py-1 rounded-full\">\n                  {item.badge}\n                </span>\n              )}\n            </NavLink>\n          )\n        })}\n\n        {/* Divider */}\n        <div className=\"border-t border-gray-200 my-6\"></div>\n\n        {/* Secondary Navigation */}\n        <div className=\"space-y-2\">\n          <p className=\"px-3 text-xs font-semibold text-gray-500 uppercase tracking-wider\">\n            Ferramentas\n          </p>\n          {secondaryNavigation.map((item) => {\n            const isActive = location.pathname === item.href\n            return (\n              <NavLink\n                key={item.name}\n                to={item.href}\n                className={classNames(\n                  isActive\n                    ? 'bg-thermas-50 border-r-4 border-thermas-600 text-thermas-700'\n                    : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900',\n                  'group flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors'\n                )}\n              >\n                <item.icon\n                  className={classNames(\n                    isActive ? 'text-thermas-500' : 'text-gray-400 group-hover:text-gray-500',\n                    'mr-3 h-5 w-5'\n                  )}\n                  aria-hidden=\"true\"\n                />\n                {item.name}\n              </NavLink>\n            )\n          })}\n        </div>\n      </nav>\n\n      {/* Quick Stats */}\n      <div className=\"px-4 py-4 border-t border-gray-200 bg-gray-50\">\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between text-xs\">\n            <span className=\"text-gray-500\">Funcionários ativos</span>\n            <span className=\"font-semibold text-gray-900\">127</span>\n          </div>\n          <div className=\"flex items-center justify-between text-xs\">\n            <span className=\"text-gray-500\">Solicitações pendentes</span>\n            <span className=\"font-semibold text-orange-600\">3</span>\n          </div>\n          <div className=\"flex items-center justify-between text-xs\">\n            <span className=\"text-gray-500\">Sistema</span>\n            <span className=\"font-semibold text-green-600\">Online</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div className=\"px-4 py-3 border-t border-gray-200 bg-white\">\n        <p className=\"text-xs text-gray-500 text-center\">\n          Sistema RH Pro v2.0\n        </p>\n        <p className=\"text-xs text-gray-400 text-center mt-1\">\n          © 2025 Thermas\n        </p>\n      </div>\n    </div>\n  )\n}","size_bytes":5599},"client/src.bak/components/Sidebar.jsx":{"content":"import { NavLink, useLocation } from 'react-router-dom'\nimport { \n  HomeIcon, \n  UsersIcon, \n  BuildingOfficeIcon,\n  DocumentTextIcon,\n  ChartBarIcon,\n  Cog6ToothIcon\n} from '@heroicons/react/24/outline'\n\nconst navigation = [\n  { name: 'Dashboard', href: '/', icon: HomeIcon },\n  { name: 'Funcionários', href: '/employees', icon: UsersIcon },\n  { name: 'Departamentos', href: '/departments', icon: BuildingOfficeIcon },\n  { name: 'Requisições', href: '/requests', icon: DocumentTextIcon },\n  { name: 'Relatórios', href: '/reports', icon: ChartBarIcon },\n  { name: 'Configurações', href: '/settings', icon: Cog6ToothIcon },\n]\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ')\n}\n\nexport default function Sidebar() {\n  const location = useLocation()\n\n  return (\n    <div className=\"flex flex-col w-64 bg-white shadow-sm border-r border-gray-200\">\n      {/* Logo */}\n      <div className=\"flex items-center px-6 py-4 border-b border-gray-200\">\n        <img \n          className=\"h-8 w-auto\" \n          src=\"/logo-thermas.png\" \n          alt=\"Thermas\" \n        />\n        <div className=\"ml-3\">\n          <h1 className=\"text-lg font-semibold text-gray-900\">RH Pro</h1>\n          <p className=\"text-sm text-gray-500\">Sistema de Gestão</p>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 px-4 py-6 space-y-1\">\n        {navigation.map((item) => {\n          const isActive = location.pathname === item.href\n          return (\n            <NavLink\n              key={item.name}\n              to={item.href}\n              className={classNames(\n                isActive\n                  ? 'bg-thermas-50 border-r-2 border-thermas-600 text-thermas-700'\n                  : 'text-gray-700 hover:bg-gray-50',\n                'group flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors'\n              )}\n            >\n              <item.icon\n                className={classNames(\n                  isActive ? 'text-thermas-500' : 'text-gray-400 group-hover:text-gray-500',\n                  'mr-3 h-5 w-5'\n                )}\n                aria-hidden=\"true\"\n              />\n              {item.name}\n            </NavLink>\n          )\n        })}\n      </nav>\n\n      {/* Footer */}\n      <div className=\"px-4 py-4 border-t border-gray-200\">\n        <p className=\"text-xs text-gray-500 text-center\">\n          Sistema RH Pro v1.0\n        </p>\n      </div>\n    </div>\n  )\n}","size_bytes":2456},"client/src.bak/contexts/AuthContext.jsx":{"content":"import { createContext, useContext, useState, useEffect } from 'react'\nimport axios from 'axios'\nimport toast from 'react-hot-toast'\n\nconst AuthContext = createContext()\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider')\n  }\n  return context\n}\n\n// Configure axios defaults\naxios.defaults.baseURL = '/api'\naxios.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token')\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`\n  }\n  return config\n})\n\naxios.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token')\n      localStorage.removeItem('user')\n      window.location.href = '/login'\n    }\n    return Promise.reject(error)\n  }\n)\n\nexport default function AuthProvider({ children }) {\n  const [user, setUser] = useState(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    // Por enquanto, vamos pular a autenticação para testar\n    // Simular usuário logado\n    const mockUser = {\n      id: 1,\n      name: 'Usuário Teste',\n      email: 'teste@empresa.com'\n    }\n    setUser(mockUser)\n    setLoading(false)\n  }, [])\n\n  const checkTokenValidity = async () => {\n    try {\n      const response = await axios.get('/auth/me')\n      setUser(response.data.user)\n    } catch (error) {\n      console.error('Token inválido:', error)\n      logout()\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post('/auth/login', { email, password })\n      \n      const { token, user: userData } = response.data\n      \n      localStorage.setItem('token', token)\n      localStorage.setItem('user', JSON.stringify(userData))\n      setUser(userData)\n      \n      toast.success(`Bem-vindo, ${userData.name}!`)\n      return { success: true }\n      \n    } catch (error) {\n      const message = error.response?.data?.error || 'Erro no login'\n      toast.error(message)\n      return { success: false, error: message }\n    }\n  }\n\n  const logout = () => {\n    localStorage.removeItem('token')\n    localStorage.removeItem('user')\n    setUser(null)\n    toast.success('Logout realizado com sucesso')\n  }\n\n  const register = async (userData) => {\n    try {\n      const response = await axios.post('/auth/register', userData)\n      toast.success('Usuário criado com sucesso!')\n      return { success: true, data: response.data }\n    } catch (error) {\n      const message = error.response?.data?.error || 'Erro no registro'\n      toast.error(message)\n      return { success: false, error: message }\n    }\n  }\n\n  const refreshToken = async () => {\n    try {\n      const token = localStorage.getItem('token')\n      if (!token) return false\n\n      const response = await axios.post('/auth/refresh', { token })\n      const { token: newToken, user: userData } = response.data\n      \n      localStorage.setItem('token', newToken)\n      localStorage.setItem('user', JSON.stringify(userData))\n      setUser(userData)\n      \n      return true\n    } catch (error) {\n      console.error('Erro ao renovar token:', error)\n      logout()\n      return false\n    }\n  }\n\n  const value = {\n    user,\n    login,\n    logout,\n    register,\n    refreshToken,\n    loading,\n    isAuthenticated: !!user\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}","size_bytes":3493},"client/src.bak/pages/Dashboard-Advanced.jsx":{"content":"import { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { \n  UserGroupIcon, \n  BuildingOfficeIcon, \n  DocumentTextIcon,\n  ExclamationTriangleIcon,\n  ChartBarIcon,\n  ClockIcon,\n  ArrowUpIcon,\n  ArrowDownIcon,\n  CurrencyDollarIcon,\n  CalendarDaysIcon\n} from '@heroicons/react/24/outline'\n\nfunction StatCard({ title, value, icon: Icon, change, changeType, color = 'bg-blue-600', textColor = 'text-blue-600' }) {\n  return (\n    <div className=\"bg-white overflow-hidden shadow-sm rounded-lg border border-gray-200 hover:shadow-md transition-shadow\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center\">\n          <div className=\"flex-shrink-0\">\n            <div className={`p-3 rounded-lg ${color} bg-opacity-10`}>\n              <Icon className={`h-6 w-6 ${textColor}`} aria-hidden=\"true\" />\n            </div>\n          </div>\n          <div className=\"ml-4 w-0 flex-1\">\n            <dl>\n              <dt className=\"text-sm font-medium text-gray-500 truncate\">{title}</dt>\n              <dd className=\"text-2xl font-bold text-gray-900\">{value || 0}</dd>\n              {change && (\n                <dd className={`text-sm flex items-center ${\n                  changeType === 'increase' ? 'text-green-600' : 'text-red-600'\n                }`}>\n                  {changeType === 'increase' ? (\n                    <ArrowUpIcon className=\"h-4 w-4 mr-1\" />\n                  ) : (\n                    <ArrowDownIcon className=\"h-4 w-4 mr-1\" />\n                  )}\n                  {change}% vs mês anterior\n                </dd>\n              )}\n            </dl>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction QuickAction({ title, description, icon: Icon, color, onClick }) {\n  return (\n    <div \n      onClick={onClick}\n      className=\"bg-white p-6 rounded-lg border border-gray-200 hover:shadow-md transition-all cursor-pointer hover:border-thermas-300\"\n    >\n      <div className=\"flex items-center\">\n        <div className={`p-3 rounded-lg ${color} bg-opacity-10 mr-4`}>\n          <Icon className={`h-6 w-6 text-${color.replace('bg-', '').replace('-600', '-600')}`} />\n        </div>\n        <div>\n          <h3 className=\"text-lg font-medium text-gray-900\">{title}</h3>\n          <p className=\"text-sm text-gray-500\">{description}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction RecentActivity({ activities }) {\n  return (\n    <div className=\"bg-white shadow-sm rounded-lg border border-gray-200\">\n      <div className=\"p-6\">\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Atividades Recentes</h3>\n        <div className=\"space-y-4\">\n          {activities.length > 0 ? activities.map((activity, index) => (\n            <div key={index} className=\"flex items-start space-x-3\">\n              <div className=\"flex-shrink-0\">\n                <div className=\"h-8 w-8 bg-thermas-100 rounded-full flex items-center justify-center\">\n                  <UserGroupIcon className=\"h-4 w-4 text-thermas-600\" />\n                </div>\n              </div>\n              <div className=\"min-w-0 flex-1\">\n                <p className=\"text-sm text-gray-900\">{activity.description}</p>\n                <p className=\"text-xs text-gray-500\">{activity.time}</p>\n              </div>\n            </div>\n          )) : (\n            <p className=\"text-sm text-gray-500 text-center py-4\">\n              Nenhuma atividade recente encontrada\n            </p>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default function DashboardAdvanced() {\n  const [stats, setStats] = useState(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    fetchDashboardData()\n  }, [])\n\n  const fetchDashboardData = async () => {\n    try {\n      setError(null)\n      const response = await axios.get('dashboard')\n      setStats(response.data.data)\n    } catch (error) {\n      console.error('Erro ao buscar dados do dashboard:', error)\n      setError('Erro ao carregar dados do dashboard')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-thermas-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Carregando dashboard...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-lg p-6\">\n        <div className=\"flex\">\n          <ExclamationTriangleIcon className=\"h-5 w-5 text-red-400\" />\n          <div className=\"ml-3\">\n            <h3 className=\"text-sm font-medium text-red-800\">Erro no Dashboard</h3>\n            <div className=\"mt-2 text-sm text-red-700\">\n              <p>{error}</p>\n            </div>\n            <div className=\"mt-4\">\n              <button\n                onClick={fetchDashboardData}\n                className=\"bg-red-100 px-3 py-2 rounded-md text-sm font-medium text-red-800 hover:bg-red-200\"\n              >\n                Tentar novamente\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const quickActions = [\n    {\n      title: 'Novo Funcionário',\n      description: 'Cadastrar novo colaborador',\n      icon: UserGroupIcon,\n      color: 'bg-green-600',\n      onClick: () => window.location.href = '/employees'\n    },\n    {\n      title: 'Relatório Mensal',\n      description: 'Gerar relatório do mês',\n      icon: ChartBarIcon,\n      color: 'bg-blue-600',\n      onClick: () => window.location.href = '/reports'\n    },\n    {\n      title: 'Aprovar Solicitações',\n      description: '3 pendentes de aprovação',\n      icon: DocumentTextIcon,\n      color: 'bg-orange-600',\n      onClick: () => window.location.href = '/requests'\n    },\n    {\n      title: 'Departamentos',\n      description: 'Gerenciar estrutura organizacional',\n      icon: BuildingOfficeIcon,\n      color: 'bg-purple-600',\n      onClick: () => window.location.href = '/departments'\n    }\n  ]\n\n  const recentActivities = [\n    {\n      description: 'João Silva foi cadastrado no sistema',\n      time: 'Há 2 horas'\n    },\n    {\n      description: 'Relatório mensal de RH foi gerado',\n      time: 'Há 4 horas'\n    },\n    {\n      description: 'Maria Santos solicitou férias',\n      time: 'Ontem às 16:30'\n    }\n  ]\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold text-gray-900\">Dashboard</h1>\n        <p className=\"text-gray-600 mt-2\">Visão geral do Sistema RH Pro - Thermas</p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <StatCard\n          title=\"Funcionários Ativos\"\n          value={stats?.generalStats?.active_employees}\n          icon={UserGroupIcon}\n          change={8}\n          changeType=\"increase\"\n          color=\"bg-green-600\"\n          textColor=\"text-green-600\"\n        />\n        <StatCard\n          title=\"Departamentos\"\n          value={stats?.generalStats?.active_departments}\n          icon={BuildingOfficeIcon}\n          change={2}\n          changeType=\"increase\"\n          color=\"bg-blue-600\"\n          textColor=\"text-blue-600\"\n        />\n        <StatCard\n          title=\"Solicitações Pendentes\"\n          value={stats?.generalStats?.pending_requests || 3}\n          icon={DocumentTextIcon}\n          change={12}\n          changeType=\"decrease\"\n          color=\"bg-orange-600\"\n          textColor=\"text-orange-600\"\n        />\n        <StatCard\n          title=\"Folha de Pagamento\"\n          value=\"R$ 125.450\"\n          icon={CurrencyDollarIcon}\n          change={5}\n          changeType=\"increase\"\n          color=\"bg-thermas-600\"\n          textColor=\"text-thermas-600\"\n        />\n      </div>\n\n      {/* Quick Actions */}\n      <div>\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-6\">Ações Rápidas</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {quickActions.map((action, index) => (\n            <QuickAction key={index} {...action} />\n          ))}\n        </div>\n      </div>\n\n      {/* Bottom Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Recent Activity */}\n        <div className=\"lg:col-span-2\">\n          <RecentActivity activities={recentActivities} />\n        </div>\n\n        {/* Calendar/Upcoming Events */}\n        <div className=\"bg-white shadow-sm rounded-lg border border-gray-200\">\n          <div className=\"p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-4 flex items-center\">\n              <CalendarDaysIcon className=\"h-5 w-5 mr-2 text-thermas-600\" />\n              Próximos Eventos\n            </h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                <div className=\"flex-shrink-0 text-center\">\n                  <div className=\"text-sm font-medium text-thermas-600\">15</div>\n                  <div className=\"text-xs text-gray-500\">DEZ</div>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-900\">Pagamento do 13º</p>\n                  <p className=\"text-xs text-gray-500\">Prazo final</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                <div className=\"flex-shrink-0 text-center\">\n                  <div className=\"text-sm font-medium text-thermas-600\">20</div>\n                  <div className=\"text-xs text-gray-500\">DEZ</div>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-900\">Fechamento da folha</p>\n                  <p className=\"text-xs text-gray-500\">Processo mensal</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":10052},"client/src.bak/pages/Dashboard.jsx":{"content":"import { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { \n  UserGroupIcon, \n  BuildingOfficeIcon, \n  DocumentTextIcon,\n  ExclamationTriangleIcon \n} from '@heroicons/react/24/outline'\n\nfunction StatCard({ title, value, icon: Icon, color = 'bg-blue-600', textColor = 'text-blue-600' }) {\n  return (\n    <div className=\"bg-white overflow-hidden shadow rounded-lg\">\n      <div className=\"p-5\">\n        <div className=\"flex items-center\">\n          <div className=\"flex-shrink-0\">\n            <Icon className={`h-6 w-6 ${textColor}`} aria-hidden=\"true\" />\n          </div>\n          <div className=\"ml-5 w-0 flex-1\">\n            <dl>\n              <dt className=\"text-sm font-medium text-gray-500 truncate\">{title}</dt>\n              <dd className=\"text-lg font-medium text-gray-900\">{value || 0}</dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default function Dashboard() {\n  const [stats, setStats] = useState(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    fetchDashboardData()\n  }, [])\n\n  const fetchDashboardData = async () => {\n    try {\n      const response = await axios.get('/api/dashboard')\n      setStats(response.data.data)\n    } catch (error) {\n      console.error('Erro ao buscar dados do dashboard:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-thermas-600\"></div>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">Dashboard</h1>\n        <p className=\"text-gray-600\">Visão geral do sistema RH</p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <StatCard\n          title=\"Funcionários Ativos\"\n          value={stats?.generalStats?.active_employees}\n          icon={UserGroupIcon}\n          color=\"bg-green-600\"\n          textColor=\"text-green-600\"\n        />\n        <StatCard\n          title=\"Departamentos\"\n          value={stats?.generalStats?.active_departments}\n          icon={BuildingOfficeIcon}\n          color=\"bg-blue-600\"\n          textColor=\"text-blue-600\"\n        />\n        <StatCard\n          title=\"Requisições Pendentes\"\n          value={stats?.generalStats?.pending_requests}\n          icon={DocumentTextIcon}\n          color=\"bg-yellow-600\"\n          textColor=\"text-yellow-600\"\n        />\n        <StatCard\n          title=\"Requisições Este Mês\"\n          value={stats?.generalStats?.recent_requests}\n          icon={ExclamationTriangleIcon}\n          color=\"bg-purple-600\"\n          textColor=\"text-purple-600\"\n        />\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Recent Hires */}\n        <div className=\"bg-white shadow rounded-lg\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Contratações Recentes</h3>\n          </div>\n          <div className=\"px-6 py-4\">\n            {stats?.recentHires?.length > 0 ? (\n              <div className=\"space-y-3\">\n                {stats.recentHires.map((hire, index) => (\n                  <div key={index} className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">{hire.name}</p>\n                      <p className=\"text-xs text-gray-500\">{hire.department_name}</p>\n                    </div>\n                    <p className=\"text-xs text-gray-500\">\n                      {new Date(hire.hire_date).toLocaleDateString('pt-BR')}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-sm text-gray-500\">Nenhuma contratação recente</p>\n            )}\n          </div>\n        </div>\n\n        {/* Urgent Requests */}\n        <div className=\"bg-white shadow rounded-lg\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Requisições Urgentes</h3>\n          </div>\n          <div className=\"px-6 py-4\">\n            {stats?.urgentRequests?.length > 0 ? (\n              <div className=\"space-y-3\">\n                {stats.urgentRequests.map((request, index) => (\n                  <div key={index} className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900\">{request.title}</p>\n                      <p className=\"text-xs text-gray-500\">{request.employee_name}</p>\n                    </div>\n                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                      request.priority === 'urgent' \n                        ? 'bg-red-100 text-red-800' \n                        : 'bg-yellow-100 text-yellow-800'\n                    }`}>\n                      {request.priority === 'urgent' ? 'Urgente' : 'Alta'}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-sm text-gray-500\">Nenhuma requisição urgente</p>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Department Stats */}\n      {stats?.departmentStats?.length > 0 && (\n        <div className=\"mt-8\">\n          <div className=\"bg-white shadow rounded-lg\">\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Departamentos por Tamanho</h3>\n            </div>\n            <div className=\"px-6 py-4\">\n              <div className=\"space-y-4\">\n                {stats.departmentStats.map((dept, index) => (\n                  <div key={index} className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between\">\n                        <p className=\"text-sm font-medium text-gray-900\">{dept.name}</p>\n                        <p className=\"text-sm text-gray-500\">{dept.employee_count} funcionários</p>\n                      </div>\n                      {dept.budget > 0 && (\n                        <div className=\"mt-1\">\n                          <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                            <span>Uso do orçamento</span>\n                            <span>{dept.budget_usage}%</span>\n                          </div>\n                          <div className=\"mt-1 w-full bg-gray-200 rounded-full h-1.5\">\n                            <div \n                              className=\"bg-thermas-600 h-1.5 rounded-full\" \n                              style={{ width: `${Math.min(dept.budget_usage, 100)}%` }}\n                            ></div>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}","size_bytes":7259},"client/src.bak/pages/Departments.jsx":{"content":"export default function Departments() {\n  return (\n    <div>\n      <div className=\"sm:flex sm:items-center\">\n        <div className=\"sm:flex-auto\">\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Departamentos</h1>\n          <p className=\"mt-2 text-sm text-gray-700\">\n            Gerenciar departamentos da empresa.\n          </p>\n        </div>\n        <div className=\"mt-4 sm:mt-0 sm:ml-16 sm:flex-none\">\n          <button\n            type=\"button\"\n            className=\"inline-flex items-center justify-center rounded-md border border-transparent bg-thermas-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-thermas-700 focus:outline-none focus:ring-2 focus:ring-thermas-500 focus:ring-offset-2 sm:w-auto\"\n          >\n            Criar departamento\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"mt-8 bg-white shadow rounded-lg\">\n        <div className=\"px-6 py-4\">\n          <p className=\"text-sm text-gray-500\">\n            Funcionalidade em desenvolvimento. O backend está pronto e pode ser testado via API.\n          </p>\n          <div className=\"mt-4\">\n            <h4 className=\"text-sm font-medium text-gray-900\">Endpoints disponíveis:</h4>\n            <ul className=\"mt-2 text-xs text-gray-600 space-y-1\">\n              <li>• GET /api/departments - Listar departamentos</li>\n              <li>• POST /api/departments - Criar departamento</li>\n              <li>• PUT /api/departments/:id - Atualizar departamento</li>\n              <li>• DELETE /api/departments/:id - Desativar departamento</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":1657},"client/src.bak/pages/Employees.jsx":{"content":"import { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport toast from 'react-hot-toast'\nimport { \n  PlusIcon, \n  PencilIcon, \n  TrashIcon,\n  MagnifyingGlassIcon,\n  UserIcon,\n  EnvelopeIcon,\n  PhoneIcon,\n  BuildingOfficeIcon,\n  CalendarIcon\n} from '@heroicons/react/24/outline'\n\nfunction EmployeeCard({ employee, onEdit, onDelete }) {\n  return (\n    <div className=\"bg-white shadow rounded-lg p-6 hover:shadow-md transition-shadow\">\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex-shrink-0\">\n            <UserIcon className=\"h-10 w-10 text-gray-400\" />\n          </div>\n          <div className=\"min-w-0 flex-1\">\n            <h3 className=\"text-lg font-medium text-gray-900 truncate\">\n              {employee.name}\n            </h3>\n            <p className=\"text-sm text-gray-500\">\n              Código: {employee.employee_code}\n            </p>\n            {employee.position && (\n              <p className=\"text-sm text-thermas-600 font-medium\">\n                {employee.position}\n              </p>\n            )}\n          </div>\n        </div>\n        <div className=\"flex space-x-2\">\n          <button\n            onClick={() => onEdit(employee)}\n            className=\"text-thermas-600 hover:text-thermas-800 transition-colors\"\n          >\n            <PencilIcon className=\"h-5 w-5\" />\n          </button>\n          <button\n            onClick={() => onDelete(employee)}\n            className=\"text-red-600 hover:text-red-800 transition-colors\"\n          >\n            <TrashIcon className=\"h-5 w-5\" />\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"mt-4 grid grid-cols-1 sm:grid-cols-2 gap-3 text-sm text-gray-600\">\n        {employee.email && (\n          <div className=\"flex items-center space-x-2\">\n            <EnvelopeIcon className=\"h-4 w-4 text-gray-400\" />\n            <span className=\"truncate\">{employee.email}</span>\n          </div>\n        )}\n        {employee.phone && (\n          <div className=\"flex items-center space-x-2\">\n            <PhoneIcon className=\"h-4 w-4 text-gray-400\" />\n            <span>{employee.phone}</span>\n          </div>\n        )}\n        {employee.department_name && (\n          <div className=\"flex items-center space-x-2\">\n            <BuildingOfficeIcon className=\"h-4 w-4 text-gray-400\" />\n            <span>{employee.department_name}</span>\n          </div>\n        )}\n        <div className=\"flex items-center space-x-2\">\n          <CalendarIcon className=\"h-4 w-4 text-gray-400\" />\n          <span>\n            Admitido em {new Date(employee.hire_date).toLocaleDateString('pt-BR')}\n          </span>\n        </div>\n      </div>\n      \n      {employee.salary && (\n        <div className=\"mt-3 pt-3 border-t border-gray-200\">\n          <p className=\"text-sm text-gray-900 font-medium\">\n            Salário: R$ {parseFloat(employee.salary).toLocaleString('pt-BR', {\n              minimumFractionDigits: 2,\n              maximumFractionDigits: 2\n            })}\n          </p>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default function Employees() {\n  const [employees, setEmployees] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [searchTerm, setSearchTerm] = useState('')\n  const [filteredEmployees, setFilteredEmployees] = useState([])\n\n  useEffect(() => {\n    fetchEmployees()\n  }, [])\n\n  useEffect(() => {\n    // Filtrar funcionários baseado no termo de busca\n    const filtered = employees.filter(employee =>\n      employee.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.employee_code?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      employee.department_name?.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n    setFilteredEmployees(filtered)\n  }, [employees, searchTerm])\n\n  const fetchEmployees = async () => {\n    try {\n      setLoading(true)\n      const response = await axios.get('/api/employees')\n      setEmployees(response.data.data || [])\n    } catch (error) {\n      console.error('Erro ao buscar funcionários:', error)\n      toast.error('Erro ao carregar funcionários')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleEdit = (employee) => {\n    // Implementar modal de edição ou navegação para página de edição\n    toast.info(`Editar funcionário: ${employee.name}`)\n  }\n\n  const handleDelete = async (employee) => {\n    if (window.confirm(`Tem certeza que deseja inativar o funcionário ${employee.name}?`)) {\n      try {\n        await axios.delete(`/api/employees/${employee.id}`)\n        toast.success('Funcionário inativado com sucesso')\n        fetchEmployees() // Recarregar lista\n      } catch (error) {\n        console.error('Erro ao inativar funcionário:', error)\n        toast.error('Erro ao inativar funcionário')\n      }\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-thermas-600\"></div>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <div className=\"sm:flex sm:items-center\">\n        <div className=\"sm:flex-auto\">\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Funcionários</h1>\n          <p className=\"mt-2 text-sm text-gray-700\">\n            Lista de todos os funcionários da empresa ({employees.length} funcionários).\n          </p>\n        </div>\n        <div className=\"mt-4 sm:mt-0 sm:ml-16 sm:flex-none\">\n          <button\n            type=\"button\"\n            className=\"inline-flex items-center justify-center rounded-md border border-transparent bg-thermas-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-thermas-700 focus:outline-none focus:ring-2 focus:ring-thermas-500 focus:ring-offset-2 sm:w-auto\"\n            onClick={() => toast.info('Funcionalidade de adicionar funcionário em desenvolvimento')}\n          >\n            <PlusIcon className=\"h-4 w-4 mr-2\" />\n            Adicionar funcionário\n          </button>\n        </div>\n      </div>\n\n      {/* Search Bar */}\n      <div className=\"mt-6\">\n        <div className=\"relative\">\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n            <MagnifyingGlassIcon className=\"h-5 w-5 text-gray-400\" />\n          </div>\n          <input\n            type=\"text\"\n            className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-thermas-500 focus:border-thermas-500 sm:text-sm\"\n            placeholder=\"Buscar por nome, email, código ou departamento...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </div>\n      </div>\n      \n      {/* Employee Grid */}\n      <div className=\"mt-6\">\n        {filteredEmployees.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <UserIcon className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">\n              {searchTerm ? 'Nenhum funcionário encontrado' : 'Nenhum funcionário cadastrado'}\n            </h3>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              {searchTerm \n                ? 'Tente ajustar sua busca ou limpar o filtro.'\n                : 'Comece adicionando um novo funcionário.'}\n            </p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredEmployees.map((employee) => (\n              <EmployeeCard\n                key={employee.id}\n                employee={employee}\n                onEdit={handleEdit}\n                onDelete={handleDelete}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {searchTerm && filteredEmployees.length > 0 && (\n        <div className=\"mt-4 text-sm text-gray-500 text-center\">\n          Mostrando {filteredEmployees.length} de {employees.length} funcionários\n        </div>\n      )}\n    </div>\n  )\n}","size_bytes":8191},"client/src.bak/pages/Login.jsx":{"content":"import { useState, useEffect } from 'react'\nimport { Navigate } from 'react-router-dom'\nimport { useAuth } from '../contexts/AuthContext'\nimport { EyeIcon, EyeSlashIcon } from '@heroicons/react/24/outline'\n\nexport default function Login() {\n  const [email, setEmail] = useState('admin@rhpro.com')\n  const [password, setPassword] = useState('admin123')\n  const [showPassword, setShowPassword] = useState(false)\n  const [loading, setLoading] = useState(false)\n  \n  const { login, isAuthenticated } = useAuth()\n\n  if (isAuthenticated) {\n    return <Navigate to=\"/\" replace />\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    setLoading(true)\n    \n    const result = await login(email, password)\n    \n    setLoading(false)\n    \n    if (result.success) {\n      // Redirect will be handled by AuthContext\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <img\n            className=\"mx-auto h-16 w-auto\"\n            src=\"/logo-thermas.png\"\n            alt=\"Thermas\"\n          />\n          <h2 className=\"mt-6 text-3xl font-bold text-gray-900\">\n            Sistema RH Pro\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-600\">\n            Faça login para acessar o sistema\n          </p>\n        </div>\n\n        {/* Form */}\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          <div className=\"rounded-md shadow-sm space-y-4\">\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n                Email\n              </label>\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                required\n                className=\"mt-1 appearance-none relative block w-full px-3 py-3 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-thermas-500 focus:border-thermas-500 focus:z-10 sm:text-sm\"\n                placeholder=\"Digite seu email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n                Senha\n              </label>\n              <div className=\"mt-1 relative\">\n                <input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  autoComplete=\"current-password\"\n                  required\n                  className=\"appearance-none relative block w-full px-3 py-3 pr-10 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-md focus:outline-none focus:ring-thermas-500 focus:border-thermas-500 focus:z-10 sm:text-sm\"\n                  placeholder=\"Digite sua senha\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeSlashIcon className=\"h-5 w-5 text-gray-400\" />\n                  ) : (\n                    <EyeIcon className=\"h-5 w-5 text-gray-400\" />\n                  )}\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-thermas-600 hover:bg-thermas-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-thermas-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {loading ? (\n                <div className=\"flex items-center\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Entrando...\n                </div>\n              ) : (\n                'Entrar'\n              )}\n            </button>\n          </div>\n\n          {/* Demo credentials */}\n          <div className=\"mt-6 p-4 bg-blue-50 rounded-md\">\n            <h4 className=\"text-sm font-medium text-blue-800 mb-2\">Credenciais de Demonstração:</h4>\n            <div className=\"text-xs text-blue-600 space-y-1\">\n              <p><strong>Admin:</strong> admin@rhpro.com / admin123</p>\n              <p><strong>RH:</strong> hr@rhpro.com / hr123</p>\n              <p><strong>Gerente:</strong> manager@rhpro.com / manager123</p>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  )\n}","size_bytes":4976},"client/src.bak/pages/Reports.jsx":{"content":"export default function Reports() {\n  return (\n    <div>\n      <div className=\"sm:flex sm:items-center\">\n        <div className=\"sm:flex-auto\">\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Relatórios</h1>\n          <p className=\"mt-2 text-sm text-gray-700\">\n            Gerar relatórios detalhados do sistema.\n          </p>\n        </div>\n      </div>\n      \n      <div className=\"mt-8 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {[\n          {\n            title: 'Relatório de Funcionários',\n            description: 'Lista completa de funcionários com filtros',\n            endpoint: 'GET /api/reports/employees'\n          },\n          {\n            title: 'Relatório de Requisições',\n            description: 'Análise detalhada das requisições',\n            endpoint: 'GET /api/reports/requests'\n          },\n          {\n            title: 'Relatório de Departamentos',\n            description: 'Performance e estatísticas dos departamentos',\n            endpoint: 'GET /api/reports/departments'\n          },\n          {\n            title: 'Relatório de Folha',\n            description: 'Cálculos de folha de pagamento',\n            endpoint: 'GET /api/reports/payroll'\n          },\n          {\n            title: 'Relatório de Auditoria',\n            description: 'Log de atividades do sistema',\n            endpoint: 'GET /api/reports/audit'\n          }\n        ].map((report, index) => (\n          <div key={index} className=\"bg-white shadow rounded-lg p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">{report.title}</h3>\n            <p className=\"text-sm text-gray-600 mb-4\">{report.description}</p>\n            <p className=\"text-xs text-gray-500 font-mono bg-gray-100 px-2 py-1 rounded\">\n              {report.endpoint}\n            </p>\n            <button className=\"mt-4 w-full bg-thermas-600 text-white py-2 px-4 rounded-md hover:bg-thermas-700 text-sm\">\n              Gerar Relatório\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}","size_bytes":2056},"client/src.bak/pages/Requests.jsx":{"content":"export default function Requests() {\n  return (\n    <div>\n      <div className=\"sm:flex sm:items-center\">\n        <div className=\"sm:flex-auto\">\n          <h1 className=\"text-2xl font-semibold text-gray-900\">Requisições</h1>\n          <p className=\"mt-2 text-sm text-gray-700\">\n            Gerenciar todas as requisições dos funcionários.\n          </p>\n        </div>\n        <div className=\"mt-4 sm:mt-0 sm:ml-16 sm:flex-none\">\n          <button\n            type=\"button\"\n            className=\"inline-flex items-center justify-center rounded-md border border-transparent bg-thermas-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-thermas-700 focus:outline-none focus:ring-2 focus:ring-thermas-500 focus:ring-offset-2 sm:w-auto\"\n          >\n            Nova requisição\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"mt-8 bg-white shadow rounded-lg\">\n        <div className=\"px-6 py-4\">\n          <p className=\"text-sm text-gray-500\">\n            Funcionalidade em desenvolvimento. O backend está pronto e pode ser testado via API.\n          </p>\n          <div className=\"mt-4\">\n            <h4 className=\"text-sm font-medium text-gray-900\">Endpoints disponíveis:</h4>\n            <ul className=\"mt-2 text-xs text-gray-600 space-y-1\">\n              <li>• GET /api/requests - Listar requisições</li>\n              <li>• POST /api/requests - Criar requisição</li>\n              <li>• PUT /api/requests/:id/approve - Aprovar requisição</li>\n              <li>• PUT /api/requests/:id/reject - Rejeitar requisição</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":1666}},"version":1}